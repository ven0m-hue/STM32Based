
HARD_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006190  08006190  00016190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800658c  0800658c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006594  08006594  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800659c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200001dc  08006778  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006778  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd1d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0002df29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b3c  00000000  00000000  00031530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d939  00000000  00000000  0005406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d19d0  00000000  00000000  000619a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043fc  00000000  00000000  001333c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006174 	.word	0x08006174

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006174 	.word	0x08006174

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <SysTick_Handler>:

#include "main.h"

extern TIM_HandleTypeDef tim2;
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ee4:	f000 fbb0 	bl	8001648 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ee8:	f000 fd20 	bl	800192c <HAL_SYSTICK_IRQHandler>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&tim2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM2_IRQHandler+0x10>)
 8000ef6:	f001 fda5 	bl	8002a44 <HAL_TIM_IRQHandler>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000020c 	.word	0x2000020c

08000f04 <main>:

_Bool Is_CCR_Done = false;

char* user = "Hello VA-u\r\n";
int main()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	uint16_t brightness = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	//Inits
	HAL_Init();
 8000f0e:	f000 fb49 	bl	80015a4 <HAL_Init>
	SystemClockConfig(SYS_CLOCK_FREQ_50MHz);
 8000f12:	2032      	movs	r0, #50	; 0x32
 8000f14:	f000 f832 	bl	8000f7c <SystemClockConfig>
	LSE_Config();
 8000f18:	f000 f912 	bl	8001140 <LSE_Config>
	Timer2_Init();
 8000f1c:	f000 f91a 	bl	8001154 <Timer2_Init>
	UART2_Init();
 8000f20:	f000 f950 	bl	80011c4 <UART2_Init>
	GPIOLED_Init();
 8000f24:	f000 f946 	bl	80011b4 <GPIOLED_Init>
	 * 1. Generate a PWM signal using the timer 2 peripheral for the given duty cycle using output compare mode
	 * 2. Init the timer 2 peripheral
	 * 3. Config the PWM driver init
	 * 4. Calculate the period and duty cycle
	 */
	if (HAL_TIM_PWM_Start(&tim2, TIM_CHANNEL_1) != HAL_OK) Error_handler();
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <main+0x74>)
 8000f2c:	f001 fcc2 	bl	80028b4 <HAL_TIM_PWM_Start>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <main+0x4c>
 8000f36:	f000 f96b 	bl	8001210 <Error_handler>

	while(1)
	{
		while(brightness < tim2.Init.Period)
 8000f3a:	e009      	b.n	8000f50 <main+0x4c>
		{
			brightness += 5;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	3305      	adds	r3, #5
 8000f40:	80fb      	strh	r3, [r7, #6]
			__HAL_TIM_SET_COMPARE(&tim2, TIM_CHANNEL_1, brightness); // Compare it with the CCR register for one full period
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <main+0x74>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);  // 1milli second
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fb9c 	bl	8001688 <HAL_Delay>
		while(brightness < tim2.Init.Period)
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <main+0x74>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3f0      	bcc.n	8000f3c <main+0x38>
		}

		while(brightness > 0)
 8000f5a:	e009      	b.n	8000f70 <main+0x6c>
		{
			brightness -= 5;
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	3b05      	subs	r3, #5
 8000f60:	80fb      	strh	r3, [r7, #6]
			__HAL_TIM_SET_COMPARE(&tim2, TIM_CHANNEL_1, brightness);
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <main+0x74>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);  // 1milli second
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fb8c 	bl	8001688 <HAL_Delay>
		while(brightness > 0)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f2      	bne.n	8000f5c <main+0x58>
		while(brightness < tim2.Init.Period)
 8000f76:	e7eb      	b.n	8000f50 <main+0x4c>
 8000f78:	2000020c 	.word	0x2000020c

08000f7c <SystemClockConfig>:
	while(1);
	return 0;
}

void SystemClockConfig(uint8_t clock_freq)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
				 *  4. PLL by sourcing HSE clock
				 */
				RCC_OscInitTypeDef osc_init;
				RCC_ClkInitTypeDef clk_init;

				memset(&osc_init,0, sizeof(osc_init));
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	2234      	movs	r2, #52	; 0x34
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fc18 	bl	80037c4 <memset>

				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;  // For HSE or LSE since we need both
 8000f94:	2305      	movs	r3, #5
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
				osc_init.HSEState = RCC_HSE_BYPASS;  // This is for HSE
 8000f98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
				osc_init.LSEState = RCC_LSE_ON;      // This is for LSE
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40

				switch(clock_freq)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2bb4      	cmp	r3, #180	; 0xb4
 8000fb0:	d059      	beq.n	8001066 <SystemClockConfig+0xea>
 8000fb2:	2bb4      	cmp	r3, #180	; 0xb4
 8000fb4:	f300 80b6 	bgt.w	8001124 <SystemClockConfig+0x1a8>
 8000fb8:	2b78      	cmp	r3, #120	; 0x78
 8000fba:	d03a      	beq.n	8001032 <SystemClockConfig+0xb6>
 8000fbc:	2b78      	cmp	r3, #120	; 0x78
 8000fbe:	f300 80b1 	bgt.w	8001124 <SystemClockConfig+0x1a8>
 8000fc2:	2b32      	cmp	r3, #50	; 0x32
 8000fc4:	d002      	beq.n	8000fcc <SystemClockConfig+0x50>
 8000fc6:	2b50      	cmp	r3, #80	; 0x50
 8000fc8:	d01a      	beq.n	8001000 <SystemClockConfig+0x84>
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV4;
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;

						flash_latency = FLASH_LATENCY_5;
					}
					default: return;
 8000fca:	e0ab      	b.n	8001124 <SystemClockConfig+0x1a8>
						osc_init.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 100;
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_1;
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	; (800112c <SystemClockConfig+0x1b0>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
						break;
 8000ffe:	e06c      	b.n	80010da <SystemClockConfig+0x15e>
						osc_init.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 160;
 8001004:	23a0      	movs	r3, #160	; 0xa0
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;
 8001010:	2302      	movs	r3, #2
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8001014:	230f      	movs	r3, #15
 8001016:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_2;
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <SystemClockConfig+0x1b0>)
 800102c:	2202      	movs	r2, #2
 800102e:	601a      	str	r2, [r3, #0]
						break;
 8001030:	e053      	b.n	80010da <SystemClockConfig+0x15e>
						osc_init.PLL.PLLM = 8;
 8001032:	2308      	movs	r3, #8
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 240;
 8001036:	23f0      	movs	r3, #240	; 0xf0
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;
 800103a:	2302      	movs	r3, #2
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8001046:	230f      	movs	r3, #15
 8001048:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV4;
 8001052:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001056:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_3;
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <SystemClockConfig+0x1b0>)
 8001060:	2203      	movs	r2, #3
 8001062:	601a      	str	r2, [r3, #0]
						break;
 8001064:	e039      	b.n	80010da <SystemClockConfig+0x15e>
						__HAL_RCC_PWR_CLK_ENABLE(); // ALways enable the clock for anything
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <SystemClockConfig+0x1b4>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a30      	ldr	r2, [pc, #192]	; (8001130 <SystemClockConfig+0x1b4>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <SystemClockConfig+0x1b4>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
						__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <SystemClockConfig+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <SystemClockConfig+0x1b8>)
 800108c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClockConfig+0x1b8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
						__HAL_PWR_OVERDRIVE_ENABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemClockConfig+0x1bc>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
						osc_init.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 360;
 80010a8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;   // default
 80010ae:	2302      	movs	r3, #2
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;   // default
 80010b2:	2302      	movs	r3, #2
 80010b4:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;   // default
 80010b6:	2302      	movs	r3, #2
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 80010ba:	230f      	movs	r3, #15
 80010bc:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2302      	movs	r3, #2
 80010c0:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV4;
 80010c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ca:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_5;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <SystemClockConfig+0x1b0>)
 80010d4:	2205      	movs	r2, #5
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e025      	b.n	8001126 <SystemClockConfig+0x1aa>
				}

			if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) Error_handler();
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f8fa 	bl	80022d8 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClockConfig+0x172>
 80010ea:	f000 f891 	bl	8001210 <Error_handler>

		    // after this line if everything is okay HSE is succefully turned on
			if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) Error_handler();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SystemClockConfig+0x1b0>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fdb9 	bl	8001c70 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClockConfig+0x18c>
 8001104:	f000 f884 	bl	8001210 <Error_handler>
			 * SYSTICK CONFIG
			 * Since we have changed the clock config from default frequency to the application specific
			 * We need to change the clock config  going into the arm cortex processor. (prcoessor side clock config).
			 */

			HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ 1000);
 8001108:	f000 ff00 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 800110c:	4603      	mov	r3, r0
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <SystemClockConfig+0x1c0>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	099b      	lsrs	r3, r3, #6
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbdf 	bl	80018da <HAL_SYSTICK_Config>
			HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // There is a pre-scalar @Ref ClockTree
 800111c:	2004      	movs	r0, #4
 800111e:	f000 fbe9 	bl	80018f4 <HAL_SYSTICK_CLKSourceConfig>
 8001122:	e000      	b.n	8001126 <SystemClockConfig+0x1aa>
					default: return;
 8001124:	bf00      	nop
}
 8001126:	3758      	adds	r7, #88	; 0x58
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000204 	.word	0x20000204
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000
 8001138:	420e0040 	.word	0x420e0040
 800113c:	10624dd3 	.word	0x10624dd3

08001140 <LSE_Config>:

void LSE_Config()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	osc_init.LSEState = RCC_LSE_ON;
	if(HAL_RCC_OscConfig(&osc_init)) Error_handler();
#endif
	// Selects the clock soure to output on any one of the pin
	// MCO1 = PA8 and MCO2 = PA9
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCOSOURCE_LSE, RCC_MCODIV_1);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fe76 	bl	8001e3c <HAL_RCC_MCOConfig>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <Timer2_Init>:

void Timer2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
	 * Period = time_period * time_delay //  100ms * time_period -> 64000
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */
	tim2.Instance = TIM2;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <Timer2_Init+0x5c>)
 800115c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001160:	601a      	str	r2, [r3, #0]
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP; // set as up counter
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <Timer2_Init+0x5c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
	tim2.Init.Period = 10000 - 1; // for one milli second
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <Timer2_Init+0x5c>)
 800116a:	f242 720f 	movw	r2, #9999	; 0x270f
 800116e:	60da      	str	r2, [r3, #12]
	tim2.Init.Prescaler = 49;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <Timer2_Init+0x5c>)
 8001172:	2231      	movs	r2, #49	; 0x31
 8001174:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_PWM_Init(&tim2) != HAL_OK) Error_handler();  //Timer 2 is configured
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <Timer2_Init+0x5c>)
 8001178:	f001 fb4c 	bl	8002814 <HAL_TIM_PWM_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <Timer2_Init+0x32>
 8001182:	f000 f845 	bl	8001210 <Error_handler>
	 /*
		 * Working with the timer2 Output channel for PWM generation, for more info @ref general purpose timer in reference manual
		 * 1. Init the timer Output to Compare the time base
		 * 2. Config  the output channel for PWM
	 */
	timerPWMconfig.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	; 0x60
 8001188:	607b      	str	r3, [r7, #4]
	timerPWMconfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
	// PWM for 0% DutyCycle
		timerPWMconfig.Pulse = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
		if(HAL_TIM_PWM_ConfigChannel(&tim2, &timerPWMconfig, TIM_CHANNEL_1) != HAL_OK) Error_handler();
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <Timer2_Init+0x5c>)
 800119a:	f001 fd5b 	bl	8002c54 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <Timer2_Init+0x54>
 80011a4:	f000 f834 	bl	8001210 <Error_handler>
	if(HAL_TIM_PWM_ConfigChannel(&tim2, &timerPWMconfig, TIM_CHANNEL_3) != HAL_OK) Error_handler();
	// PWM for 95% DutyCycle
	timerPWMconfig.Pulse = tim2.Init.Period * 95/100;
	if(HAL_TIM_PWM_ConfigChannel(&tim2, &timerPWMconfig, TIM_CHANNEL_4) != HAL_OK) Error_handler();
#endif
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000020c 	.word	0x2000020c

080011b4 <GPIOLED_Init>:

void GPIOLED_Init()
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	ledgpio.Pin = GPIO_PIN_5;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &ledgpio);
#endif
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <UART2_Init>:

void UART2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <UART2_Init+0x44>)
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <UART2_Init+0x48>)
 80011cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <UART2_Init+0x44>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <UART2_Init+0x44>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <UART2_Init+0x44>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <UART2_Init+0x44>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
	//huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <UART2_Init+0x44>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <UART2_Init+0x44>)
 80011f0:	220c      	movs	r2, #12
 80011f2:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_handler();  // If there is a problem
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <UART2_Init+0x44>)
 80011f6:	f002 f8a6 	bl	8003346 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <UART2_Init+0x40>
 8001200:	f000 f806 	bl	8001210 <Error_handler>

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000254 	.word	0x20000254
 800120c:	40004400 	.word	0x40004400

08001210 <Error_handler>:

void Error_handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	while(1);
 8001214:	e7fe      	b.n	8001214 <Error_handler+0x4>
	...

08001218 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	 * Low level initialization
	 * 1. Set up the priority grouping of the arm cortex mx processor
	 * 2. Enable the required sustem exceptions of the arm cortex mx processors
	 * 3. Configure the Priority for the system exceptions
	 */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 fb27 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 << 16; // usage fault, memory fault, bus fault systems
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_MspInit+0x40>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_MspInit+0x40>)
 8001228:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800122c:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	f06f 000b 	mvn.w	r0, #11
 8001236:	f000 fb26 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	f06f 000a 	mvn.w	r0, #10
 8001242:	f000 fb20 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	f06f 0009 	mvn.w	r0, #9
 800124e:	f000 fb1a 	bl	8001886 <HAL_NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	 * 1.Enable the peripheral clocks
	 * 2.Config the gpio pins to its respective alternate functionality pins refer datasheet
	 * PA0 ->ch1, PA1->ch2, PB10->ch3, PB11->ch4
	 * 3.Enable the interrupt priority and interrupt
	 */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a25      	ldr	r2, [pc, #148]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_TIM_PWM_MspInit+0xa8>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

	tim2ch1gpio.Pin = GPIO_PIN_5 | GPIO_PIN_1;
 80012b8:	2322      	movs	r3, #34	; 0x22
 80012ba:	617b      	str	r3, [r7, #20]
	tim2ch1gpio.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
	tim2ch1gpio.Alternate = GPIO_AF1_TIM2; // According to the data sheet
 80012c0:	2301      	movs	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2ch1gpio);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <HAL_TIM_PWM_MspInit+0xac>)
 80012cc:	f000 fb3c 	bl	8001948 <HAL_GPIO_Init>

	tim2ch1gpio.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80012d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d4:	617b      	str	r3, [r7, #20]
	tim2ch1gpio.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
	tim2ch1gpio.Alternate = GPIO_AF1_TIM2; // According to the data sheet
 80012da:	2301      	movs	r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &tim2ch1gpio);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <HAL_TIM_PWM_MspInit+0xb0>)
 80012e6:	f000 fb2f 	bl	8001948 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ea:	201c      	movs	r0, #28
 80012ec:	f000 fae7 	bl	80018be <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	210f      	movs	r1, #15
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 fac6 	bl	8001886 <HAL_NVIC_SetPriority>


}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	 * 2. Do the pin muxing config
	 * 3. Enable the IRQ and set up the priority
	 */
	GPIO_InitTypeDef gpio_uart;

	__HAL_RCC_USART2_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_UART_MspInit+0x88>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_UART_MspInit+0x88>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_UART_MspInit+0x88>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_UART_MspInit+0x88>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

	 gpio_uart.Pin = GPIO_PIN_2;//UART2_TX
 8001350:	2304      	movs	r3, #4
 8001352:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; // Alternate functionality for TX_RX
 8001360:	2307      	movs	r3, #7
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_UART_MspInit+0x8c>)
 800136c:	f000 faec 	bl	8001948 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3;//UART2_RX
 8001370:	2308      	movs	r3, #8
 8001372:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <HAL_UART_MspInit+0x8c>)
 800137c:	f000 fae4 	bl	8001948 <HAL_GPIO_Init>

	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001380:	2026      	movs	r0, #38	; 0x26
 8001382:	f000 fa9c 	bl	80018be <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8001386:	2200      	movs	r2, #0
 8001388:	210f      	movs	r1, #15
 800138a:	2026      	movs	r0, #38	; 0x26
 800138c:	f000 fa7b 	bl	8001886 <HAL_NVIC_SetPriority>
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ba:	f002 f9d9 	bl	8003770 <__errno>
 80013be:	4603      	mov	r3, r0
 80013c0:	2216      	movs	r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
	return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_exit>:

void _exit (int status)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe7 	bl	80013b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013e2:	e7fe      	b.n	80013e2 <_exit+0x12>

080013e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
	}

return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
	}
	return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f002 f93e 	bl	8003770 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20020000 	.word	0x20020000
 8001520:	00000400 	.word	0x00000400
 8001524:	200001f8 	.word	0x200001f8
 8001528:	200002b0 	.word	0x200002b0

0800152c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800157a:	f7ff ffd7 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 f8fd 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fcbf 	bl	8000f04 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001594:	0800659c 	.word	0x0800659c
  ldr r2, =_sbss
 8001598:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800159c:	200002b0 	.word	0x200002b0

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f94f 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fe1e 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f967 	bl	80018da <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f92f 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	2000029c 	.word	0x2000029c

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000029c 	.word	0x2000029c

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff3e 	bl	8001718 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff8e 	bl	80017c4 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff31 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d106      	bne.n	8001910 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800190e:	e005      	b.n	800191c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001930:	f000 f802 	bl	8001938 <HAL_SYSTICK_Callback>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e165      	b.n	8001c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8154 	bne.w	8001c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001996:	2b02      	cmp	r3, #2
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d017      	beq.n	8001a38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80ae 	beq.w	8001c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_GPIO_Init+0x304>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x308>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d025      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <HAL_GPIO_Init+0x216>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x310>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x212>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x314>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_GPIO_Init+0x318>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x20a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_GPIO_Init+0x31c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x206>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x202>
 8001b46:	2306      	movs	r3, #6
 8001b48:	e00c      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e00a      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b62:	2300      	movs	r3, #0
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f002 0203 	and.w	r2, r2, #3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x304>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba6:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	f67f ae96 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0cc      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d90c      	bls.n	8001cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	494d      	ldr	r1, [pc, #308]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d044      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d119      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e067      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4934      	ldr	r1, [pc, #208]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d60:	f7ff fc86 	bl	8001670 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff fc82 	bl	8001670 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e04f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d20c      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4916      	ldr	r1, [pc, #88]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490e      	ldr	r1, [pc, #56]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f8bd 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fbe6 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08006190 	.word	0x08006190
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d129      	bne.n	8001ea2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	481f      	ldr	r0, [pc, #124]	; (8001f04 <HAL_RCC_MCOConfig+0xc8>)
 8001e88:	f7ff fd5e 	bl	8001948 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	4919      	ldr	r1, [pc, #100]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001ea0:	e029      	b.n	8001ef6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480b      	ldr	r0, [pc, #44]	; (8001f08 <HAL_RCC_MCOConfig+0xcc>)
 8001edc:	f7ff fd34 	bl	8001948 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	00d9      	lsls	r1, r3, #3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_MCOConfig+0xc4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	3730      	adds	r7, #48	; 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020800 	.word	0x40020800

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff0 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	080061a0 	.word	0x080061a0

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffdc 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	080061a0 	.word	0x080061a0

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f78:	b088      	sub	sp, #32
 8001f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f90:	4bce      	ldr	r3, [pc, #824]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	f200 818d 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x344>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fd9 	.word	0x08001fd9
 8001fa8:	080022b9 	.word	0x080022b9
 8001fac:	080022b9 	.word	0x080022b9
 8001fb0:	080022b9 	.word	0x080022b9
 8001fb4:	08001fdf 	.word	0x08001fdf
 8001fb8:	080022b9 	.word	0x080022b9
 8001fbc:	080022b9 	.word	0x080022b9
 8001fc0:	080022b9 	.word	0x080022b9
 8001fc4:	08001fe5 	.word	0x08001fe5
 8001fc8:	080022b9 	.word	0x080022b9
 8001fcc:	080022b9 	.word	0x080022b9
 8001fd0:	080022b9 	.word	0x080022b9
 8001fd4:	08002159 	.word	0x08002159
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4bbd      	ldr	r3, [pc, #756]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fda:	61bb      	str	r3, [r7, #24]
       break;
 8001fdc:	e16f      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fde:	4bbd      	ldr	r3, [pc, #756]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x360>)
 8001fe0:	61bb      	str	r3, [r7, #24]
      break;
 8001fe2:	e16c      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe4:	4bb9      	ldr	r3, [pc, #740]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fee:	4bb7      	ldr	r3, [pc, #732]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d053      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffa:	4bb4      	ldr	r3, [pc, #720]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	099b      	lsrs	r3, r3, #6
 8002000:	461a      	mov	r2, r3
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	ea02 0400 	and.w	r4, r2, r0
 8002012:	603c      	str	r4, [r7, #0]
 8002014:	400b      	ands	r3, r1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e9d7 4500 	ldrd	r4, r5, [r7]
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	014b      	lsls	r3, r1, #5
 800202a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800202e:	0142      	lsls	r2, r0, #5
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	4623      	mov	r3, r4
 8002036:	1ac0      	subs	r0, r0, r3
 8002038:	462b      	mov	r3, r5
 800203a:	eb61 0103 	sbc.w	r1, r1, r3
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	018b      	lsls	r3, r1, #6
 8002048:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800204c:	0182      	lsls	r2, r0, #6
 800204e:	1a12      	subs	r2, r2, r0
 8002050:	eb63 0301 	sbc.w	r3, r3, r1
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f04f 0100 	mov.w	r1, #0
 800205c:	00d9      	lsls	r1, r3, #3
 800205e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002062:	00d0      	lsls	r0, r2, #3
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4621      	mov	r1, r4
 800206a:	1852      	adds	r2, r2, r1
 800206c:	4629      	mov	r1, r5
 800206e:	eb43 0101 	adc.w	r1, r3, r1
 8002072:	460b      	mov	r3, r1
 8002074:	f04f 0000 	mov.w	r0, #0
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	0259      	lsls	r1, r3, #9
 800207e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002082:	0250      	lsls	r0, r2, #9
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	461a      	mov	r2, r3
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f7fe fda8 	bl	8000be8 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e04c      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	461a      	mov	r2, r3
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	ea02 0a00 	and.w	sl, r2, r0
 80020ba:	ea03 0b01 	and.w	fp, r3, r1
 80020be:	4650      	mov	r0, sl
 80020c0:	4659      	mov	r1, fp
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	014b      	lsls	r3, r1, #5
 80020cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020d0:	0142      	lsls	r2, r0, #5
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	ebb0 000a 	subs.w	r0, r0, sl
 80020da:	eb61 010b 	sbc.w	r1, r1, fp
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020ec:	0182      	lsls	r2, r0, #6
 80020ee:	1a12      	subs	r2, r2, r0
 80020f0:	eb63 0301 	sbc.w	r3, r3, r1
 80020f4:	f04f 0000 	mov.w	r0, #0
 80020f8:	f04f 0100 	mov.w	r1, #0
 80020fc:	00d9      	lsls	r1, r3, #3
 80020fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002102:	00d0      	lsls	r0, r2, #3
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	eb12 020a 	adds.w	r2, r2, sl
 800210c:	eb43 030b 	adc.w	r3, r3, fp
 8002110:	f04f 0000 	mov.w	r0, #0
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	0299      	lsls	r1, r3, #10
 800211a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800211e:	0290      	lsls	r0, r2, #10
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	461a      	mov	r2, r3
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	f7fe fd5a 	bl	8000be8 <__aeabi_uldivmod>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4613      	mov	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	61bb      	str	r3, [r7, #24]
      break;
 8002156:	e0b2      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002160:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04d      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b57      	ldr	r3, [pc, #348]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	ea02 0800 	and.w	r8, r2, r0
 8002186:	ea03 0901 	and.w	r9, r3, r1
 800218a:	4640      	mov	r0, r8
 800218c:	4649      	mov	r1, r9
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800219c:	0142      	lsls	r2, r0, #5
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	ebb0 0008 	subs.w	r0, r0, r8
 80021a6:	eb61 0109 	sbc.w	r1, r1, r9
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	018b      	lsls	r3, r1, #6
 80021b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b8:	0182      	lsls	r2, r0, #6
 80021ba:	1a12      	subs	r2, r2, r0
 80021bc:	eb63 0301 	sbc.w	r3, r3, r1
 80021c0:	f04f 0000 	mov.w	r0, #0
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	00d9      	lsls	r1, r3, #3
 80021ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ce:	00d0      	lsls	r0, r2, #3
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	eb12 0208 	adds.w	r2, r2, r8
 80021d8:	eb43 0309 	adc.w	r3, r3, r9
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0259      	lsls	r1, r3, #9
 80021e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021ea:	0250      	lsls	r0, r2, #9
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f7fe fcf4 	bl	8000be8 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e04a      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	461a      	mov	r2, r3
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	ea02 0400 	and.w	r4, r2, r0
 8002222:	ea03 0501 	and.w	r5, r3, r1
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	014b      	lsls	r3, r1, #5
 8002234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002238:	0142      	lsls	r2, r0, #5
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	1b00      	subs	r0, r0, r4
 8002240:	eb61 0105 	sbc.w	r1, r1, r5
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	018b      	lsls	r3, r1, #6
 800224e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002252:	0182      	lsls	r2, r0, #6
 8002254:	1a12      	subs	r2, r2, r0
 8002256:	eb63 0301 	sbc.w	r3, r3, r1
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002268:	00d0      	lsls	r0, r2, #3
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	1912      	adds	r2, r2, r4
 8002270:	eb45 0303 	adc.w	r3, r5, r3
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	0299      	lsls	r1, r3, #10
 800227e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002282:	0290      	lsls	r0, r2, #10
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	461a      	mov	r2, r3
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f7fe fca8 	bl	8000be8 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4613      	mov	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0f1b      	lsrs	r3, r3, #28
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	61bb      	str	r3, [r7, #24]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022ba:	61bb      	str	r3, [r7, #24]
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	69bb      	ldr	r3, [r7, #24]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e28d      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8083 	beq.w	80023fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022f8:	4b94      	ldr	r3, [pc, #592]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d019      	beq.n	8002338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002304:	4b91      	ldr	r3, [pc, #580]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800230c:	2b08      	cmp	r3, #8
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002310:	4b8e      	ldr	r3, [pc, #568]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b8b      	ldr	r3, [pc, #556]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b84      	ldr	r3, [pc, #528]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x124>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e25a      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x90>
 800235a:	4b7c      	ldr	r3, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7b      	ldr	r2, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xcc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0xb4>
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a72      	ldr	r2, [pc, #456]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xcc>
 800238c:	4b6f      	ldr	r3, [pc, #444]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6e      	ldr	r2, [pc, #440]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b6c      	ldr	r3, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6b      	ldr	r2, [pc, #428]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f960 	bl	8001670 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff f95c 	bl	8001670 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e21f      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xdc>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff f94c 	bl	8001670 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff f948 	bl	8001670 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e20b      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x104>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06f      	beq.n	80024ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x186>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1d3      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x278>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7ff f8f5 	bl	8001670 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7ff f8f1 	bl	8001670 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1b4      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x278>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7ff f8d4 	bl	8001670 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7ff f8d0 	bl	8001670 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e193      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d036      	beq.n	8002564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d016      	beq.n	800252c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x27c>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7ff f8b4 	bl	8001670 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff f8b0 	bl	8001670 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e173      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x234>
 800252a:	e01b      	b.n	8002564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x27c>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff f89d 	bl	8001670 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	e00e      	b.n	8002558 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7ff f899 	bl	8001670 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d907      	bls.n	8002558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e15c      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
 800254c:	40023800 	.word	0x40023800
 8002550:	42470000 	.word	0x42470000
 8002554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b8a      	ldr	r3, [pc, #552]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ea      	bne.n	800253a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8097 	beq.w	80026a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b83      	ldr	r3, [pc, #524]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a7e      	ldr	r2, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a75      	ldr	r2, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7ff f859 	bl	8001670 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7ff f855 	bl	8001670 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e118      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x31e>
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x358>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x340>
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a60      	ldr	r2, [pc, #384]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0x358>
 8002618:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a59      	ldr	r2, [pc, #356]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b57      	ldr	r3, [pc, #348]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a56      	ldr	r2, [pc, #344]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff f81a 	bl	8001670 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7ff f816 	bl	8001670 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0d7      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCC_OscConfig+0x368>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff f804 	bl	8001670 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7ff f800 	bl	8001670 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0c1      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ee      	bne.n	800266c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80ad 	beq.w	8002804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d060      	beq.n	8002778 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d145      	bne.n	800274a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x4b4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe ffd4 	bl	8001670 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe ffd0 	bl	8001670 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e093      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	071b      	lsls	r3, r3, #28
 8002716:	491b      	ldr	r1, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x4b4>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe ffa5 	bl	8001670 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe ffa1 	bl	8001670 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e064      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x452>
 8002748:	e05c      	b.n	8002804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x4b4>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe ff8e 	bl	8001670 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe ff8a 	bl	8001670 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04d      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x480>
 8002776:	e045      	b.n	8002804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e040      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000
 800278c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_RCC_OscConfig+0x538>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d030      	beq.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d129      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d122      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d119      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10f      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e041      	b.n	80028aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fd0e 	bl	800125c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 faee 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_TIM_PWM_Start+0x24>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e022      	b.n	800291e <HAL_TIM_PWM_Start+0x6a>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d109      	bne.n	80028f2 <HAL_TIM_PWM_Start+0x3e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	bf14      	ite	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	2300      	moveq	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	e015      	b.n	800291e <HAL_TIM_PWM_Start+0x6a>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d109      	bne.n	800290c <HAL_TIM_PWM_Start+0x58>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e008      	b.n	800291e <HAL_TIM_PWM_Start+0x6a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07c      	b.n	8002a20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_TIM_PWM_Start+0x82>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	e013      	b.n	800295e <HAL_TIM_PWM_Start+0xaa>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d104      	bne.n	8002946 <HAL_TIM_PWM_Start+0x92>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	e00b      	b.n	800295e <HAL_TIM_PWM_Start+0xaa>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Start+0xa2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002954:	e003      	b.n	800295e <HAL_TIM_PWM_Start+0xaa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fcb4 	bl	80032d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_TIM_PWM_Start+0x174>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_PWM_Start+0xcc>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_TIM_PWM_Start+0x178>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_TIM_PWM_Start+0xd0>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_TIM_PWM_Start+0xd2>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <HAL_TIM_PWM_Start+0x174>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d01d      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_TIM_PWM_Start+0x17c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_TIM_PWM_Start+0x180>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_TIM_PWM_Start+0x184>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIM_PWM_Start+0x178>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_TIM_PWM_Start+0x188>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_PWM_Start+0x136>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_TIM_PWM_Start+0x18c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d111      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d010      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	e007      	b.n	8002a1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40001800 	.word	0x40001800

08002a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9b6 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9a8 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9b9 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0204 	mvn.w	r2, #4
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f98c 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f97e 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f98f 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0208 	mvn.w	r2, #8
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f962 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f954 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f965 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0210 	mvn.w	r2, #16
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2208      	movs	r2, #8
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f938 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f92a 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f93b 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0201 	mvn.w	r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f904 	bl	8002dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb9f 	bl	8003332 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f900 	bl	8002e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0220 	mvn.w	r2, #32
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fb69 	bl	800331e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e0ac      	b.n	8002dc8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	f200 809f 	bhi.w	8002dbc <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c7e:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08002dbd 	.word	0x08002dbd
 8002c8c:	08002dbd 	.word	0x08002dbd
 8002c90:	08002dbd 	.word	0x08002dbd
 8002c94:	08002cf9 	.word	0x08002cf9
 8002c98:	08002dbd 	.word	0x08002dbd
 8002c9c:	08002dbd 	.word	0x08002dbd
 8002ca0:	08002dbd 	.word	0x08002dbd
 8002ca4:	08002d3b 	.word	0x08002d3b
 8002ca8:	08002dbd 	.word	0x08002dbd
 8002cac:	08002dbd 	.word	0x08002dbd
 8002cb0:	08002dbd 	.word	0x08002dbd
 8002cb4:	08002d7b 	.word	0x08002d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f958 	bl	8002f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	619a      	str	r2, [r3, #24]
      break;
 8002cf6:	e062      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f9a8 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	021a      	lsls	r2, r3, #8
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	619a      	str	r2, [r3, #24]
      break;
 8002d38:	e041      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f9fd 	bl	8003140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0208 	orr.w	r2, r2, #8
 8002d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0204 	bic.w	r2, r2, #4
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69d9      	ldr	r1, [r3, #28]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
      break;
 8002d78:	e021      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fa51 	bl	8003228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	021a      	lsls	r2, r3, #8
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	61da      	str	r2, [r3, #28]
      break;
 8002dba:	e000      	b.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d027      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d023      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <TIM_Base_SetConfig+0x128>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0x130>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0x134>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <TIM_Base_SetConfig+0x138>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0xf8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	40001c00 	.word	0x40001c00
 8002f70:	40002000 	.word	0x40002000

08002f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0302 	bic.w	r3, r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a20      	ldr	r2, [pc, #128]	; (800304c <TIM_OC1_SetConfig+0xd8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_OC1_SetConfig+0x64>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10c      	bne.n	8002ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0308 	bic.w	r3, r3, #8
 8002fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <TIM_OC1_SetConfig+0xd8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_OC1_SetConfig+0x8e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	40010400 	.word	0x40010400

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0320 	bic.w	r3, r3, #32
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_OC2_SetConfig+0x68>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_OC2_SetConfig+0xe8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0x94>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <TIM_OC2_SetConfig+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d113      	bne.n	8003110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <TIM_OC3_SetConfig+0xe0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC3_SetConfig+0x66>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <TIM_OC3_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_OC3_SetConfig+0x92>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d113      	bne.n	80031fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <TIM_OC4_SetConfig+0xa4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC4_SetConfig+0x68>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <TIM_OC4_SetConfig+0xa8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400

080032d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2201      	movs	r2, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e03f      	b.n	80033d8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fd ffcf 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	; 0x24
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003388:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f828 	bl	80033e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e4:	b09f      	sub	sp, #124	; 0x7c
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	ea40 0301 	orr.w	r3, r0, r1
 8003400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	431a      	orrs	r2, r3
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	431a      	orrs	r2, r3
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4313      	orrs	r3, r2
 8003418:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003424:	f021 010c 	bic.w	r1, r1, #12
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	6999      	ldr	r1, [r3, #24]
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	ea40 0301 	orr.w	r3, r0, r1
 8003448:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800344a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4bc5      	ldr	r3, [pc, #788]	; (8003764 <UART_SetConfig+0x384>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d004      	beq.n	800345e <UART_SetConfig+0x7e>
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4bc3      	ldr	r3, [pc, #780]	; (8003768 <UART_SetConfig+0x388>)
 800345a:	429a      	cmp	r2, r3
 800345c:	d103      	bne.n	8003466 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800345e:	f7fe fd75 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8003462:	6778      	str	r0, [r7, #116]	; 0x74
 8003464:	e002      	b.n	800346c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003466:	f7fe fd5d 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 800346a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	f040 80b6 	bne.w	80035e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347a:	461c      	mov	r4, r3
 800347c:	f04f 0500 	mov.w	r5, #0
 8003480:	4622      	mov	r2, r4
 8003482:	462b      	mov	r3, r5
 8003484:	1891      	adds	r1, r2, r2
 8003486:	6439      	str	r1, [r7, #64]	; 0x40
 8003488:	415b      	adcs	r3, r3
 800348a:	647b      	str	r3, [r7, #68]	; 0x44
 800348c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003490:	1912      	adds	r2, r2, r4
 8003492:	eb45 0303 	adc.w	r3, r5, r3
 8003496:	f04f 0000 	mov.w	r0, #0
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	00d9      	lsls	r1, r3, #3
 80034a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a4:	00d0      	lsls	r0, r2, #3
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	1911      	adds	r1, r2, r4
 80034ac:	6639      	str	r1, [r7, #96]	; 0x60
 80034ae:	416b      	adcs	r3, r5
 80034b0:	667b      	str	r3, [r7, #100]	; 0x64
 80034b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	63b9      	str	r1, [r7, #56]	; 0x38
 80034c0:	415b      	adcs	r3, r3
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034cc:	f7fd fb8c 	bl	8000be8 <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4ba5      	ldr	r3, [pc, #660]	; (800376c <UART_SetConfig+0x38c>)
 80034d6:	fba3 2302 	umull	r2, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	011e      	lsls	r6, r3, #4
 80034de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e0:	461c      	mov	r4, r3
 80034e2:	f04f 0500 	mov.w	r5, #0
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	1891      	adds	r1, r2, r2
 80034ec:	6339      	str	r1, [r7, #48]	; 0x30
 80034ee:	415b      	adcs	r3, r3
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
 80034f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034f6:	1912      	adds	r2, r2, r4
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350a:	00d0      	lsls	r0, r2, #3
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	1911      	adds	r1, r2, r4
 8003512:	65b9      	str	r1, [r7, #88]	; 0x58
 8003514:	416b      	adcs	r3, r5
 8003516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	461a      	mov	r2, r3
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	1891      	adds	r1, r2, r2
 8003524:	62b9      	str	r1, [r7, #40]	; 0x28
 8003526:	415b      	adcs	r3, r3
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800352e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003532:	f7fd fb59 	bl	8000be8 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b8c      	ldr	r3, [pc, #560]	; (800376c <UART_SetConfig+0x38c>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	; 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3332      	adds	r3, #50	; 0x32
 800354e:	4a87      	ldr	r2, [pc, #540]	; (800376c <UART_SetConfig+0x38c>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800355c:	441e      	add	r6, r3
 800355e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003560:	4618      	mov	r0, r3
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	1894      	adds	r4, r2, r2
 800356c:	623c      	str	r4, [r7, #32]
 800356e:	415b      	adcs	r3, r3
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003576:	1812      	adds	r2, r2, r0
 8003578:	eb41 0303 	adc.w	r3, r1, r3
 800357c:	f04f 0400 	mov.w	r4, #0
 8003580:	f04f 0500 	mov.w	r5, #0
 8003584:	00dd      	lsls	r5, r3, #3
 8003586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800358a:	00d4      	lsls	r4, r2, #3
 800358c:	4622      	mov	r2, r4
 800358e:	462b      	mov	r3, r5
 8003590:	1814      	adds	r4, r2, r0
 8003592:	653c      	str	r4, [r7, #80]	; 0x50
 8003594:	414b      	adcs	r3, r1
 8003596:	657b      	str	r3, [r7, #84]	; 0x54
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	461a      	mov	r2, r3
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	1891      	adds	r1, r2, r2
 80035a4:	61b9      	str	r1, [r7, #24]
 80035a6:	415b      	adcs	r3, r3
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035b2:	f7fd fb19 	bl	8000be8 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4b6c      	ldr	r3, [pc, #432]	; (800376c <UART_SetConfig+0x38c>)
 80035bc:	fba3 1302 	umull	r1, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	2164      	movs	r1, #100	; 0x64
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	3332      	adds	r3, #50	; 0x32
 80035ce:	4a67      	ldr	r2, [pc, #412]	; (800376c <UART_SetConfig+0x38c>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	f003 0207 	and.w	r2, r3, #7
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4432      	add	r2, r6
 80035e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035e2:	e0b9      	b.n	8003758 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e6:	461c      	mov	r4, r3
 80035e8:	f04f 0500 	mov.w	r5, #0
 80035ec:	4622      	mov	r2, r4
 80035ee:	462b      	mov	r3, r5
 80035f0:	1891      	adds	r1, r2, r2
 80035f2:	6139      	str	r1, [r7, #16]
 80035f4:	415b      	adcs	r3, r3
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035fc:	1912      	adds	r2, r2, r4
 80035fe:	eb45 0303 	adc.w	r3, r5, r3
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	00d9      	lsls	r1, r3, #3
 800360c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003610:	00d0      	lsls	r0, r2, #3
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	eb12 0804 	adds.w	r8, r2, r4
 800361a:	eb43 0905 	adc.w	r9, r3, r5
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003636:	0082      	lsls	r2, r0, #2
 8003638:	4640      	mov	r0, r8
 800363a:	4649      	mov	r1, r9
 800363c:	f7fd fad4 	bl	8000be8 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4b49      	ldr	r3, [pc, #292]	; (800376c <UART_SetConfig+0x38c>)
 8003646:	fba3 2302 	umull	r2, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	011e      	lsls	r6, r3, #4
 800364e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003650:	4618      	mov	r0, r3
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	1894      	adds	r4, r2, r2
 800365c:	60bc      	str	r4, [r7, #8]
 800365e:	415b      	adcs	r3, r3
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003666:	1812      	adds	r2, r2, r0
 8003668:	eb41 0303 	adc.w	r3, r1, r3
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	f04f 0500 	mov.w	r5, #0
 8003674:	00dd      	lsls	r5, r3, #3
 8003676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800367a:	00d4      	lsls	r4, r2, #3
 800367c:	4622      	mov	r2, r4
 800367e:	462b      	mov	r3, r5
 8003680:	1814      	adds	r4, r2, r0
 8003682:	64bc      	str	r4, [r7, #72]	; 0x48
 8003684:	414b      	adcs	r3, r1
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	008b      	lsls	r3, r1, #2
 800369c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036a0:	0082      	lsls	r2, r0, #2
 80036a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036a6:	f7fd fa9f 	bl	8000be8 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b2f      	ldr	r3, [pc, #188]	; (800376c <UART_SetConfig+0x38c>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	; 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	3332      	adds	r3, #50	; 0x32
 80036c2:	4a2a      	ldr	r2, [pc, #168]	; (800376c <UART_SetConfig+0x38c>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ce:	441e      	add	r6, r3
 80036d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d2:	4618      	mov	r0, r3
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	1894      	adds	r4, r2, r2
 80036de:	603c      	str	r4, [r7, #0]
 80036e0:	415b      	adcs	r3, r3
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e8:	1812      	adds	r2, r2, r0
 80036ea:	eb41 0303 	adc.w	r3, r1, r3
 80036ee:	f04f 0400 	mov.w	r4, #0
 80036f2:	f04f 0500 	mov.w	r5, #0
 80036f6:	00dd      	lsls	r5, r3, #3
 80036f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036fc:	00d4      	lsls	r4, r2, #3
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	eb12 0a00 	adds.w	sl, r2, r0
 8003706:	eb43 0b01 	adc.w	fp, r3, r1
 800370a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4618      	mov	r0, r3
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	008b      	lsls	r3, r1, #2
 800371e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003722:	0082      	lsls	r2, r0, #2
 8003724:	4650      	mov	r0, sl
 8003726:	4659      	mov	r1, fp
 8003728:	f7fd fa5e 	bl	8000be8 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <UART_SetConfig+0x38c>)
 8003732:	fba3 1302 	umull	r1, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2164      	movs	r1, #100	; 0x64
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	3332      	adds	r3, #50	; 0x32
 8003744:	4a09      	ldr	r2, [pc, #36]	; (800376c <UART_SetConfig+0x38c>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4432      	add	r2, r6
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	377c      	adds	r7, #124	; 0x7c
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003762:	bf00      	nop
 8003764:	40011000 	.word	0x40011000
 8003768:	40011400 	.word	0x40011400
 800376c:	51eb851f 	.word	0x51eb851f

08003770 <__errno>:
 8003770:	4b01      	ldr	r3, [pc, #4]	; (8003778 <__errno+0x8>)
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d0d      	ldr	r5, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2600      	movs	r6, #0
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4d0b      	ldr	r5, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f002 fcf0 	bl	8006174 <_init>
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2600      	movs	r6, #0
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	08006594 	.word	0x08006594
 80037b8:	08006594 	.word	0x08006594
 80037bc:	08006594 	.word	0x08006594
 80037c0:	08006598 	.word	0x08006598

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <__cvt>:
 80037d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	ec55 4b10 	vmov	r4, r5, d0
 80037dc:	2d00      	cmp	r5, #0
 80037de:	460e      	mov	r6, r1
 80037e0:	4619      	mov	r1, r3
 80037e2:	462b      	mov	r3, r5
 80037e4:	bfbb      	ittet	lt
 80037e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037ea:	461d      	movlt	r5, r3
 80037ec:	2300      	movge	r3, #0
 80037ee:	232d      	movlt	r3, #45	; 0x2d
 80037f0:	700b      	strb	r3, [r1, #0]
 80037f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037f8:	4691      	mov	r9, r2
 80037fa:	f023 0820 	bic.w	r8, r3, #32
 80037fe:	bfbc      	itt	lt
 8003800:	4622      	movlt	r2, r4
 8003802:	4614      	movlt	r4, r2
 8003804:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003808:	d005      	beq.n	8003816 <__cvt+0x42>
 800380a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800380e:	d100      	bne.n	8003812 <__cvt+0x3e>
 8003810:	3601      	adds	r6, #1
 8003812:	2102      	movs	r1, #2
 8003814:	e000      	b.n	8003818 <__cvt+0x44>
 8003816:	2103      	movs	r1, #3
 8003818:	ab03      	add	r3, sp, #12
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	ab02      	add	r3, sp, #8
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	ec45 4b10 	vmov	d0, r4, r5
 8003824:	4653      	mov	r3, sl
 8003826:	4632      	mov	r2, r6
 8003828:	f000 fcca 	bl	80041c0 <_dtoa_r>
 800382c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003830:	4607      	mov	r7, r0
 8003832:	d102      	bne.n	800383a <__cvt+0x66>
 8003834:	f019 0f01 	tst.w	r9, #1
 8003838:	d022      	beq.n	8003880 <__cvt+0xac>
 800383a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800383e:	eb07 0906 	add.w	r9, r7, r6
 8003842:	d110      	bne.n	8003866 <__cvt+0x92>
 8003844:	783b      	ldrb	r3, [r7, #0]
 8003846:	2b30      	cmp	r3, #48	; 0x30
 8003848:	d10a      	bne.n	8003860 <__cvt+0x8c>
 800384a:	2200      	movs	r2, #0
 800384c:	2300      	movs	r3, #0
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fd f959 	bl	8000b08 <__aeabi_dcmpeq>
 8003856:	b918      	cbnz	r0, 8003860 <__cvt+0x8c>
 8003858:	f1c6 0601 	rsb	r6, r6, #1
 800385c:	f8ca 6000 	str.w	r6, [sl]
 8003860:	f8da 3000 	ldr.w	r3, [sl]
 8003864:	4499      	add	r9, r3
 8003866:	2200      	movs	r2, #0
 8003868:	2300      	movs	r3, #0
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f7fd f94b 	bl	8000b08 <__aeabi_dcmpeq>
 8003872:	b108      	cbz	r0, 8003878 <__cvt+0xa4>
 8003874:	f8cd 900c 	str.w	r9, [sp, #12]
 8003878:	2230      	movs	r2, #48	; 0x30
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	454b      	cmp	r3, r9
 800387e:	d307      	bcc.n	8003890 <__cvt+0xbc>
 8003880:	9b03      	ldr	r3, [sp, #12]
 8003882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003884:	1bdb      	subs	r3, r3, r7
 8003886:	4638      	mov	r0, r7
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	b004      	add	sp, #16
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003890:	1c59      	adds	r1, r3, #1
 8003892:	9103      	str	r1, [sp, #12]
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e7f0      	b.n	800387a <__cvt+0xa6>

08003898 <__exponent>:
 8003898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800389a:	4603      	mov	r3, r0
 800389c:	2900      	cmp	r1, #0
 800389e:	bfb8      	it	lt
 80038a0:	4249      	neglt	r1, r1
 80038a2:	f803 2b02 	strb.w	r2, [r3], #2
 80038a6:	bfb4      	ite	lt
 80038a8:	222d      	movlt	r2, #45	; 0x2d
 80038aa:	222b      	movge	r2, #43	; 0x2b
 80038ac:	2909      	cmp	r1, #9
 80038ae:	7042      	strb	r2, [r0, #1]
 80038b0:	dd2a      	ble.n	8003908 <__exponent+0x70>
 80038b2:	f10d 0407 	add.w	r4, sp, #7
 80038b6:	46a4      	mov	ip, r4
 80038b8:	270a      	movs	r7, #10
 80038ba:	46a6      	mov	lr, r4
 80038bc:	460a      	mov	r2, r1
 80038be:	fb91 f6f7 	sdiv	r6, r1, r7
 80038c2:	fb07 1516 	mls	r5, r7, r6, r1
 80038c6:	3530      	adds	r5, #48	; 0x30
 80038c8:	2a63      	cmp	r2, #99	; 0x63
 80038ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80038ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038d2:	4631      	mov	r1, r6
 80038d4:	dcf1      	bgt.n	80038ba <__exponent+0x22>
 80038d6:	3130      	adds	r1, #48	; 0x30
 80038d8:	f1ae 0502 	sub.w	r5, lr, #2
 80038dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038e0:	1c44      	adds	r4, r0, #1
 80038e2:	4629      	mov	r1, r5
 80038e4:	4561      	cmp	r1, ip
 80038e6:	d30a      	bcc.n	80038fe <__exponent+0x66>
 80038e8:	f10d 0209 	add.w	r2, sp, #9
 80038ec:	eba2 020e 	sub.w	r2, r2, lr
 80038f0:	4565      	cmp	r5, ip
 80038f2:	bf88      	it	hi
 80038f4:	2200      	movhi	r2, #0
 80038f6:	4413      	add	r3, r2
 80038f8:	1a18      	subs	r0, r3, r0
 80038fa:	b003      	add	sp, #12
 80038fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003902:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003906:	e7ed      	b.n	80038e4 <__exponent+0x4c>
 8003908:	2330      	movs	r3, #48	; 0x30
 800390a:	3130      	adds	r1, #48	; 0x30
 800390c:	7083      	strb	r3, [r0, #2]
 800390e:	70c1      	strb	r1, [r0, #3]
 8003910:	1d03      	adds	r3, r0, #4
 8003912:	e7f1      	b.n	80038f8 <__exponent+0x60>

08003914 <_printf_float>:
 8003914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003918:	ed2d 8b02 	vpush	{d8}
 800391c:	b08d      	sub	sp, #52	; 0x34
 800391e:	460c      	mov	r4, r1
 8003920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003924:	4616      	mov	r6, r2
 8003926:	461f      	mov	r7, r3
 8003928:	4605      	mov	r5, r0
 800392a:	f001 fa35 	bl	8004d98 <_localeconv_r>
 800392e:	f8d0 a000 	ldr.w	sl, [r0]
 8003932:	4650      	mov	r0, sl
 8003934:	f7fc fc6c 	bl	8000210 <strlen>
 8003938:	2300      	movs	r3, #0
 800393a:	930a      	str	r3, [sp, #40]	; 0x28
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	9305      	str	r3, [sp, #20]
 8003940:	f8d8 3000 	ldr.w	r3, [r8]
 8003944:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003948:	3307      	adds	r3, #7
 800394a:	f023 0307 	bic.w	r3, r3, #7
 800394e:	f103 0208 	add.w	r2, r3, #8
 8003952:	f8c8 2000 	str.w	r2, [r8]
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800395e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003966:	9307      	str	r3, [sp, #28]
 8003968:	f8cd 8018 	str.w	r8, [sp, #24]
 800396c:	ee08 0a10 	vmov	s16, r0
 8003970:	4b9f      	ldr	r3, [pc, #636]	; (8003bf0 <_printf_float+0x2dc>)
 8003972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003976:	f04f 32ff 	mov.w	r2, #4294967295
 800397a:	f7fd f8f7 	bl	8000b6c <__aeabi_dcmpun>
 800397e:	bb88      	cbnz	r0, 80039e4 <_printf_float+0xd0>
 8003980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003984:	4b9a      	ldr	r3, [pc, #616]	; (8003bf0 <_printf_float+0x2dc>)
 8003986:	f04f 32ff 	mov.w	r2, #4294967295
 800398a:	f7fd f8d1 	bl	8000b30 <__aeabi_dcmple>
 800398e:	bb48      	cbnz	r0, 80039e4 <_printf_float+0xd0>
 8003990:	2200      	movs	r2, #0
 8003992:	2300      	movs	r3, #0
 8003994:	4640      	mov	r0, r8
 8003996:	4649      	mov	r1, r9
 8003998:	f7fd f8c0 	bl	8000b1c <__aeabi_dcmplt>
 800399c:	b110      	cbz	r0, 80039a4 <_printf_float+0x90>
 800399e:	232d      	movs	r3, #45	; 0x2d
 80039a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a4:	4b93      	ldr	r3, [pc, #588]	; (8003bf4 <_printf_float+0x2e0>)
 80039a6:	4894      	ldr	r0, [pc, #592]	; (8003bf8 <_printf_float+0x2e4>)
 80039a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80039ac:	bf94      	ite	ls
 80039ae:	4698      	movls	r8, r3
 80039b0:	4680      	movhi	r8, r0
 80039b2:	2303      	movs	r3, #3
 80039b4:	6123      	str	r3, [r4, #16]
 80039b6:	9b05      	ldr	r3, [sp, #20]
 80039b8:	f023 0204 	bic.w	r2, r3, #4
 80039bc:	6022      	str	r2, [r4, #0]
 80039be:	f04f 0900 	mov.w	r9, #0
 80039c2:	9700      	str	r7, [sp, #0]
 80039c4:	4633      	mov	r3, r6
 80039c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80039c8:	4621      	mov	r1, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 f9d8 	bl	8003d80 <_printf_common>
 80039d0:	3001      	adds	r0, #1
 80039d2:	f040 8090 	bne.w	8003af6 <_printf_float+0x1e2>
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295
 80039da:	b00d      	add	sp, #52	; 0x34
 80039dc:	ecbd 8b02 	vpop	{d8}
 80039e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e4:	4642      	mov	r2, r8
 80039e6:	464b      	mov	r3, r9
 80039e8:	4640      	mov	r0, r8
 80039ea:	4649      	mov	r1, r9
 80039ec:	f7fd f8be 	bl	8000b6c <__aeabi_dcmpun>
 80039f0:	b140      	cbz	r0, 8003a04 <_printf_float+0xf0>
 80039f2:	464b      	mov	r3, r9
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bfbc      	itt	lt
 80039f8:	232d      	movlt	r3, #45	; 0x2d
 80039fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80039fe:	487f      	ldr	r0, [pc, #508]	; (8003bfc <_printf_float+0x2e8>)
 8003a00:	4b7f      	ldr	r3, [pc, #508]	; (8003c00 <_printf_float+0x2ec>)
 8003a02:	e7d1      	b.n	80039a8 <_printf_float+0x94>
 8003a04:	6863      	ldr	r3, [r4, #4]
 8003a06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a0a:	9206      	str	r2, [sp, #24]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	d13f      	bne.n	8003a90 <_printf_float+0x17c>
 8003a10:	2306      	movs	r3, #6
 8003a12:	6063      	str	r3, [r4, #4]
 8003a14:	9b05      	ldr	r3, [sp, #20]
 8003a16:	6861      	ldr	r1, [r4, #4]
 8003a18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9303      	str	r3, [sp, #12]
 8003a20:	ab0a      	add	r3, sp, #40	; 0x28
 8003a22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a26:	ab09      	add	r3, sp, #36	; 0x24
 8003a28:	ec49 8b10 	vmov	d0, r8, r9
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6022      	str	r2, [r4, #0]
 8003a30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a34:	4628      	mov	r0, r5
 8003a36:	f7ff fecd 	bl	80037d4 <__cvt>
 8003a3a:	9b06      	ldr	r3, [sp, #24]
 8003a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a3e:	2b47      	cmp	r3, #71	; 0x47
 8003a40:	4680      	mov	r8, r0
 8003a42:	d108      	bne.n	8003a56 <_printf_float+0x142>
 8003a44:	1cc8      	adds	r0, r1, #3
 8003a46:	db02      	blt.n	8003a4e <_printf_float+0x13a>
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	4299      	cmp	r1, r3
 8003a4c:	dd41      	ble.n	8003ad2 <_printf_float+0x1be>
 8003a4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a52:	fa5f fb8b 	uxtb.w	fp, fp
 8003a56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a5a:	d820      	bhi.n	8003a9e <_printf_float+0x18a>
 8003a5c:	3901      	subs	r1, #1
 8003a5e:	465a      	mov	r2, fp
 8003a60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a64:	9109      	str	r1, [sp, #36]	; 0x24
 8003a66:	f7ff ff17 	bl	8003898 <__exponent>
 8003a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a6c:	1813      	adds	r3, r2, r0
 8003a6e:	2a01      	cmp	r2, #1
 8003a70:	4681      	mov	r9, r0
 8003a72:	6123      	str	r3, [r4, #16]
 8003a74:	dc02      	bgt.n	8003a7c <_printf_float+0x168>
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	07d2      	lsls	r2, r2, #31
 8003a7a:	d501      	bpl.n	8003a80 <_printf_float+0x16c>
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d09c      	beq.n	80039c2 <_printf_float+0xae>
 8003a88:	232d      	movs	r3, #45	; 0x2d
 8003a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8e:	e798      	b.n	80039c2 <_printf_float+0xae>
 8003a90:	9a06      	ldr	r2, [sp, #24]
 8003a92:	2a47      	cmp	r2, #71	; 0x47
 8003a94:	d1be      	bne.n	8003a14 <_printf_float+0x100>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1bc      	bne.n	8003a14 <_printf_float+0x100>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e7b9      	b.n	8003a12 <_printf_float+0xfe>
 8003a9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003aa2:	d118      	bne.n	8003ad6 <_printf_float+0x1c2>
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	dd0b      	ble.n	8003ac2 <_printf_float+0x1ae>
 8003aaa:	6121      	str	r1, [r4, #16]
 8003aac:	b913      	cbnz	r3, 8003ab4 <_printf_float+0x1a0>
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	07d0      	lsls	r0, r2, #31
 8003ab2:	d502      	bpl.n	8003aba <_printf_float+0x1a6>
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	440b      	add	r3, r1
 8003ab8:	6123      	str	r3, [r4, #16]
 8003aba:	65a1      	str	r1, [r4, #88]	; 0x58
 8003abc:	f04f 0900 	mov.w	r9, #0
 8003ac0:	e7de      	b.n	8003a80 <_printf_float+0x16c>
 8003ac2:	b913      	cbnz	r3, 8003aca <_printf_float+0x1b6>
 8003ac4:	6822      	ldr	r2, [r4, #0]
 8003ac6:	07d2      	lsls	r2, r2, #31
 8003ac8:	d501      	bpl.n	8003ace <_printf_float+0x1ba>
 8003aca:	3302      	adds	r3, #2
 8003acc:	e7f4      	b.n	8003ab8 <_printf_float+0x1a4>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e7f2      	b.n	8003ab8 <_printf_float+0x1a4>
 8003ad2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ad8:	4299      	cmp	r1, r3
 8003ada:	db05      	blt.n	8003ae8 <_printf_float+0x1d4>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	6121      	str	r1, [r4, #16]
 8003ae0:	07d8      	lsls	r0, r3, #31
 8003ae2:	d5ea      	bpl.n	8003aba <_printf_float+0x1a6>
 8003ae4:	1c4b      	adds	r3, r1, #1
 8003ae6:	e7e7      	b.n	8003ab8 <_printf_float+0x1a4>
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	bfd4      	ite	le
 8003aec:	f1c1 0202 	rsble	r2, r1, #2
 8003af0:	2201      	movgt	r2, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	e7e0      	b.n	8003ab8 <_printf_float+0x1a4>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	055a      	lsls	r2, r3, #21
 8003afa:	d407      	bmi.n	8003b0c <_printf_float+0x1f8>
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	4642      	mov	r2, r8
 8003b00:	4631      	mov	r1, r6
 8003b02:	4628      	mov	r0, r5
 8003b04:	47b8      	blx	r7
 8003b06:	3001      	adds	r0, #1
 8003b08:	d12c      	bne.n	8003b64 <_printf_float+0x250>
 8003b0a:	e764      	b.n	80039d6 <_printf_float+0xc2>
 8003b0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b10:	f240 80e0 	bls.w	8003cd4 <_printf_float+0x3c0>
 8003b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f7fc fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d034      	beq.n	8003b8e <_printf_float+0x27a>
 8003b24:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <_printf_float+0x2f0>)
 8003b26:	2301      	movs	r3, #1
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	47b8      	blx	r7
 8003b2e:	3001      	adds	r0, #1
 8003b30:	f43f af51 	beq.w	80039d6 <_printf_float+0xc2>
 8003b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	db02      	blt.n	8003b42 <_printf_float+0x22e>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	07d8      	lsls	r0, r3, #31
 8003b40:	d510      	bpl.n	8003b64 <_printf_float+0x250>
 8003b42:	ee18 3a10 	vmov	r3, s16
 8003b46:	4652      	mov	r2, sl
 8003b48:	4631      	mov	r1, r6
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	47b8      	blx	r7
 8003b4e:	3001      	adds	r0, #1
 8003b50:	f43f af41 	beq.w	80039d6 <_printf_float+0xc2>
 8003b54:	f04f 0800 	mov.w	r8, #0
 8003b58:	f104 091a 	add.w	r9, r4, #26
 8003b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4543      	cmp	r3, r8
 8003b62:	dc09      	bgt.n	8003b78 <_printf_float+0x264>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	079b      	lsls	r3, r3, #30
 8003b68:	f100 8105 	bmi.w	8003d76 <_printf_float+0x462>
 8003b6c:	68e0      	ldr	r0, [r4, #12]
 8003b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b70:	4298      	cmp	r0, r3
 8003b72:	bfb8      	it	lt
 8003b74:	4618      	movlt	r0, r3
 8003b76:	e730      	b.n	80039da <_printf_float+0xc6>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	464a      	mov	r2, r9
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4628      	mov	r0, r5
 8003b80:	47b8      	blx	r7
 8003b82:	3001      	adds	r0, #1
 8003b84:	f43f af27 	beq.w	80039d6 <_printf_float+0xc2>
 8003b88:	f108 0801 	add.w	r8, r8, #1
 8003b8c:	e7e6      	b.n	8003b5c <_printf_float+0x248>
 8003b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	dc39      	bgt.n	8003c08 <_printf_float+0x2f4>
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <_printf_float+0x2f0>)
 8003b96:	2301      	movs	r3, #1
 8003b98:	4631      	mov	r1, r6
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	47b8      	blx	r7
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	f43f af19 	beq.w	80039d6 <_printf_float+0xc2>
 8003ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d102      	bne.n	8003bb2 <_printf_float+0x29e>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	07d9      	lsls	r1, r3, #31
 8003bb0:	d5d8      	bpl.n	8003b64 <_printf_float+0x250>
 8003bb2:	ee18 3a10 	vmov	r3, s16
 8003bb6:	4652      	mov	r2, sl
 8003bb8:	4631      	mov	r1, r6
 8003bba:	4628      	mov	r0, r5
 8003bbc:	47b8      	blx	r7
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f43f af09 	beq.w	80039d6 <_printf_float+0xc2>
 8003bc4:	f04f 0900 	mov.w	r9, #0
 8003bc8:	f104 0a1a 	add.w	sl, r4, #26
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bce:	425b      	negs	r3, r3
 8003bd0:	454b      	cmp	r3, r9
 8003bd2:	dc01      	bgt.n	8003bd8 <_printf_float+0x2c4>
 8003bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bd6:	e792      	b.n	8003afe <_printf_float+0x1ea>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4652      	mov	r2, sl
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f aef7 	beq.w	80039d6 <_printf_float+0xc2>
 8003be8:	f109 0901 	add.w	r9, r9, #1
 8003bec:	e7ee      	b.n	8003bcc <_printf_float+0x2b8>
 8003bee:	bf00      	nop
 8003bf0:	7fefffff 	.word	0x7fefffff
 8003bf4:	080061ac 	.word	0x080061ac
 8003bf8:	080061b0 	.word	0x080061b0
 8003bfc:	080061b8 	.word	0x080061b8
 8003c00:	080061b4 	.word	0x080061b4
 8003c04:	080061bc 	.word	0x080061bc
 8003c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	bfa8      	it	ge
 8003c10:	461a      	movge	r2, r3
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	4691      	mov	r9, r2
 8003c16:	dc37      	bgt.n	8003c88 <_printf_float+0x374>
 8003c18:	f04f 0b00 	mov.w	fp, #0
 8003c1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c20:	f104 021a 	add.w	r2, r4, #26
 8003c24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c26:	9305      	str	r3, [sp, #20]
 8003c28:	eba3 0309 	sub.w	r3, r3, r9
 8003c2c:	455b      	cmp	r3, fp
 8003c2e:	dc33      	bgt.n	8003c98 <_printf_float+0x384>
 8003c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c34:	429a      	cmp	r2, r3
 8003c36:	db3b      	blt.n	8003cb0 <_printf_float+0x39c>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	07da      	lsls	r2, r3, #31
 8003c3c:	d438      	bmi.n	8003cb0 <_printf_float+0x39c>
 8003c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c40:	9b05      	ldr	r3, [sp, #20]
 8003c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	eba2 0901 	sub.w	r9, r2, r1
 8003c4a:	4599      	cmp	r9, r3
 8003c4c:	bfa8      	it	ge
 8003c4e:	4699      	movge	r9, r3
 8003c50:	f1b9 0f00 	cmp.w	r9, #0
 8003c54:	dc35      	bgt.n	8003cc2 <_printf_float+0x3ae>
 8003c56:	f04f 0800 	mov.w	r8, #0
 8003c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c5e:	f104 0a1a 	add.w	sl, r4, #26
 8003c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	eba3 0309 	sub.w	r3, r3, r9
 8003c6c:	4543      	cmp	r3, r8
 8003c6e:	f77f af79 	ble.w	8003b64 <_printf_float+0x250>
 8003c72:	2301      	movs	r3, #1
 8003c74:	4652      	mov	r2, sl
 8003c76:	4631      	mov	r1, r6
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b8      	blx	r7
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	f43f aeaa 	beq.w	80039d6 <_printf_float+0xc2>
 8003c82:	f108 0801 	add.w	r8, r8, #1
 8003c86:	e7ec      	b.n	8003c62 <_printf_float+0x34e>
 8003c88:	4613      	mov	r3, r2
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	4628      	mov	r0, r5
 8003c90:	47b8      	blx	r7
 8003c92:	3001      	adds	r0, #1
 8003c94:	d1c0      	bne.n	8003c18 <_printf_float+0x304>
 8003c96:	e69e      	b.n	80039d6 <_printf_float+0xc2>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	9205      	str	r2, [sp, #20]
 8003ca0:	47b8      	blx	r7
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f43f ae97 	beq.w	80039d6 <_printf_float+0xc2>
 8003ca8:	9a05      	ldr	r2, [sp, #20]
 8003caa:	f10b 0b01 	add.w	fp, fp, #1
 8003cae:	e7b9      	b.n	8003c24 <_printf_float+0x310>
 8003cb0:	ee18 3a10 	vmov	r3, s16
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4628      	mov	r0, r5
 8003cba:	47b8      	blx	r7
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d1be      	bne.n	8003c3e <_printf_float+0x32a>
 8003cc0:	e689      	b.n	80039d6 <_printf_float+0xc2>
 8003cc2:	9a05      	ldr	r2, [sp, #20]
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	4442      	add	r2, r8
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d1c1      	bne.n	8003c56 <_printf_float+0x342>
 8003cd2:	e680      	b.n	80039d6 <_printf_float+0xc2>
 8003cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cd6:	2a01      	cmp	r2, #1
 8003cd8:	dc01      	bgt.n	8003cde <_printf_float+0x3ca>
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	d538      	bpl.n	8003d50 <_printf_float+0x43c>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b8      	blx	r7
 8003ce8:	3001      	adds	r0, #1
 8003cea:	f43f ae74 	beq.w	80039d6 <_printf_float+0xc2>
 8003cee:	ee18 3a10 	vmov	r3, s16
 8003cf2:	4652      	mov	r2, sl
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f43f ae6b 	beq.w	80039d6 <_printf_float+0xc2>
 8003d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d04:	2200      	movs	r2, #0
 8003d06:	2300      	movs	r3, #0
 8003d08:	f7fc fefe 	bl	8000b08 <__aeabi_dcmpeq>
 8003d0c:	b9d8      	cbnz	r0, 8003d46 <_printf_float+0x432>
 8003d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d10:	f108 0201 	add.w	r2, r8, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d10e      	bne.n	8003d3e <_printf_float+0x42a>
 8003d20:	e659      	b.n	80039d6 <_printf_float+0xc2>
 8003d22:	2301      	movs	r3, #1
 8003d24:	4652      	mov	r2, sl
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	f43f ae52 	beq.w	80039d6 <_printf_float+0xc2>
 8003d32:	f108 0801 	add.w	r8, r8, #1
 8003d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	4543      	cmp	r3, r8
 8003d3c:	dcf1      	bgt.n	8003d22 <_printf_float+0x40e>
 8003d3e:	464b      	mov	r3, r9
 8003d40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d44:	e6dc      	b.n	8003b00 <_printf_float+0x1ec>
 8003d46:	f04f 0800 	mov.w	r8, #0
 8003d4a:	f104 0a1a 	add.w	sl, r4, #26
 8003d4e:	e7f2      	b.n	8003d36 <_printf_float+0x422>
 8003d50:	2301      	movs	r3, #1
 8003d52:	4642      	mov	r2, r8
 8003d54:	e7df      	b.n	8003d16 <_printf_float+0x402>
 8003d56:	2301      	movs	r3, #1
 8003d58:	464a      	mov	r2, r9
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	47b8      	blx	r7
 8003d60:	3001      	adds	r0, #1
 8003d62:	f43f ae38 	beq.w	80039d6 <_printf_float+0xc2>
 8003d66:	f108 0801 	add.w	r8, r8, #1
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d6e:	1a5b      	subs	r3, r3, r1
 8003d70:	4543      	cmp	r3, r8
 8003d72:	dcf0      	bgt.n	8003d56 <_printf_float+0x442>
 8003d74:	e6fa      	b.n	8003b6c <_printf_float+0x258>
 8003d76:	f04f 0800 	mov.w	r8, #0
 8003d7a:	f104 0919 	add.w	r9, r4, #25
 8003d7e:	e7f4      	b.n	8003d6a <_printf_float+0x456>

08003d80 <_printf_common>:
 8003d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d84:	4616      	mov	r6, r2
 8003d86:	4699      	mov	r9, r3
 8003d88:	688a      	ldr	r2, [r1, #8]
 8003d8a:	690b      	ldr	r3, [r1, #16]
 8003d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	bfb8      	it	lt
 8003d94:	4613      	movlt	r3, r2
 8003d96:	6033      	str	r3, [r6, #0]
 8003d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	b10a      	cbz	r2, 8003da6 <_printf_common+0x26>
 8003da2:	3301      	adds	r3, #1
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	0699      	lsls	r1, r3, #26
 8003daa:	bf42      	ittt	mi
 8003dac:	6833      	ldrmi	r3, [r6, #0]
 8003dae:	3302      	addmi	r3, #2
 8003db0:	6033      	strmi	r3, [r6, #0]
 8003db2:	6825      	ldr	r5, [r4, #0]
 8003db4:	f015 0506 	ands.w	r5, r5, #6
 8003db8:	d106      	bne.n	8003dc8 <_printf_common+0x48>
 8003dba:	f104 0a19 	add.w	sl, r4, #25
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	6832      	ldr	r2, [r6, #0]
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	42ab      	cmp	r3, r5
 8003dc6:	dc26      	bgt.n	8003e16 <_printf_common+0x96>
 8003dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dcc:	1e13      	subs	r3, r2, #0
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	bf18      	it	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	0692      	lsls	r2, r2, #26
 8003dd6:	d42b      	bmi.n	8003e30 <_printf_common+0xb0>
 8003dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ddc:	4649      	mov	r1, r9
 8003dde:	4638      	mov	r0, r7
 8003de0:	47c0      	blx	r8
 8003de2:	3001      	adds	r0, #1
 8003de4:	d01e      	beq.n	8003e24 <_printf_common+0xa4>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	68e5      	ldr	r5, [r4, #12]
 8003dea:	6832      	ldr	r2, [r6, #0]
 8003dec:	f003 0306 	and.w	r3, r3, #6
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	bf08      	it	eq
 8003df4:	1aad      	subeq	r5, r5, r2
 8003df6:	68a3      	ldr	r3, [r4, #8]
 8003df8:	6922      	ldr	r2, [r4, #16]
 8003dfa:	bf0c      	ite	eq
 8003dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e00:	2500      	movne	r5, #0
 8003e02:	4293      	cmp	r3, r2
 8003e04:	bfc4      	itt	gt
 8003e06:	1a9b      	subgt	r3, r3, r2
 8003e08:	18ed      	addgt	r5, r5, r3
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	341a      	adds	r4, #26
 8003e0e:	42b5      	cmp	r5, r6
 8003e10:	d11a      	bne.n	8003e48 <_printf_common+0xc8>
 8003e12:	2000      	movs	r0, #0
 8003e14:	e008      	b.n	8003e28 <_printf_common+0xa8>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4652      	mov	r2, sl
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	47c0      	blx	r8
 8003e20:	3001      	adds	r0, #1
 8003e22:	d103      	bne.n	8003e2c <_printf_common+0xac>
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	e7c6      	b.n	8003dbe <_printf_common+0x3e>
 8003e30:	18e1      	adds	r1, r4, r3
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	2030      	movs	r0, #48	; 0x30
 8003e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e3a:	4422      	add	r2, r4
 8003e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e44:	3302      	adds	r3, #2
 8003e46:	e7c7      	b.n	8003dd8 <_printf_common+0x58>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c0      	blx	r8
 8003e52:	3001      	adds	r0, #1
 8003e54:	d0e6      	beq.n	8003e24 <_printf_common+0xa4>
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7d9      	b.n	8003e0e <_printf_common+0x8e>
	...

08003e5c <_printf_i>:
 8003e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	460c      	mov	r4, r1
 8003e62:	4691      	mov	r9, r2
 8003e64:	7e27      	ldrb	r7, [r4, #24]
 8003e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e68:	2f78      	cmp	r7, #120	; 0x78
 8003e6a:	4680      	mov	r8, r0
 8003e6c:	469a      	mov	sl, r3
 8003e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e72:	d807      	bhi.n	8003e84 <_printf_i+0x28>
 8003e74:	2f62      	cmp	r7, #98	; 0x62
 8003e76:	d80a      	bhi.n	8003e8e <_printf_i+0x32>
 8003e78:	2f00      	cmp	r7, #0
 8003e7a:	f000 80d8 	beq.w	800402e <_printf_i+0x1d2>
 8003e7e:	2f58      	cmp	r7, #88	; 0x58
 8003e80:	f000 80a3 	beq.w	8003fca <_printf_i+0x16e>
 8003e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e8c:	e03a      	b.n	8003f04 <_printf_i+0xa8>
 8003e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e92:	2b15      	cmp	r3, #21
 8003e94:	d8f6      	bhi.n	8003e84 <_printf_i+0x28>
 8003e96:	a001      	add	r0, pc, #4	; (adr r0, 8003e9c <_printf_i+0x40>)
 8003e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003e85 	.word	0x08003e85
 8003ea8:	08003e85 	.word	0x08003e85
 8003eac:	08003e85 	.word	0x08003e85
 8003eb0:	08003e85 	.word	0x08003e85
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003e85 	.word	0x08003e85
 8003ebc:	08003e85 	.word	0x08003e85
 8003ec0:	08003e85 	.word	0x08003e85
 8003ec4:	08003e85 	.word	0x08003e85
 8003ec8:	08004015 	.word	0x08004015
 8003ecc:	08003f39 	.word	0x08003f39
 8003ed0:	08003ff7 	.word	0x08003ff7
 8003ed4:	08003e85 	.word	0x08003e85
 8003ed8:	08003e85 	.word	0x08003e85
 8003edc:	08004037 	.word	0x08004037
 8003ee0:	08003e85 	.word	0x08003e85
 8003ee4:	08003f39 	.word	0x08003f39
 8003ee8:	08003e85 	.word	0x08003e85
 8003eec:	08003e85 	.word	0x08003e85
 8003ef0:	08003fff 	.word	0x08003fff
 8003ef4:	680b      	ldr	r3, [r1, #0]
 8003ef6:	1d1a      	adds	r2, r3, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	600a      	str	r2, [r1, #0]
 8003efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0a3      	b.n	8004050 <_printf_i+0x1f4>
 8003f08:	6825      	ldr	r5, [r4, #0]
 8003f0a:	6808      	ldr	r0, [r1, #0]
 8003f0c:	062e      	lsls	r6, r5, #24
 8003f0e:	f100 0304 	add.w	r3, r0, #4
 8003f12:	d50a      	bpl.n	8003f2a <_printf_i+0xce>
 8003f14:	6805      	ldr	r5, [r0, #0]
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	da03      	bge.n	8003f24 <_printf_i+0xc8>
 8003f1c:	232d      	movs	r3, #45	; 0x2d
 8003f1e:	426d      	negs	r5, r5
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f24:	485e      	ldr	r0, [pc, #376]	; (80040a0 <_printf_i+0x244>)
 8003f26:	230a      	movs	r3, #10
 8003f28:	e019      	b.n	8003f5e <_printf_i+0x102>
 8003f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f2e:	6805      	ldr	r5, [r0, #0]
 8003f30:	600b      	str	r3, [r1, #0]
 8003f32:	bf18      	it	ne
 8003f34:	b22d      	sxthne	r5, r5
 8003f36:	e7ef      	b.n	8003f18 <_printf_i+0xbc>
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	1d18      	adds	r0, r3, #4
 8003f3e:	6008      	str	r0, [r1, #0]
 8003f40:	0628      	lsls	r0, r5, #24
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0xec>
 8003f44:	681d      	ldr	r5, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0xf2>
 8003f48:	0669      	lsls	r1, r5, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0xe8>
 8003f4c:	881d      	ldrh	r5, [r3, #0]
 8003f4e:	4854      	ldr	r0, [pc, #336]	; (80040a0 <_printf_i+0x244>)
 8003f50:	2f6f      	cmp	r7, #111	; 0x6f
 8003f52:	bf0c      	ite	eq
 8003f54:	2308      	moveq	r3, #8
 8003f56:	230a      	movne	r3, #10
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f5e:	6866      	ldr	r6, [r4, #4]
 8003f60:	60a6      	str	r6, [r4, #8]
 8003f62:	2e00      	cmp	r6, #0
 8003f64:	bfa2      	ittt	ge
 8003f66:	6821      	ldrge	r1, [r4, #0]
 8003f68:	f021 0104 	bicge.w	r1, r1, #4
 8003f6c:	6021      	strge	r1, [r4, #0]
 8003f6e:	b90d      	cbnz	r5, 8003f74 <_printf_i+0x118>
 8003f70:	2e00      	cmp	r6, #0
 8003f72:	d04d      	beq.n	8004010 <_printf_i+0x1b4>
 8003f74:	4616      	mov	r6, r2
 8003f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8003f7e:	5dc7      	ldrb	r7, [r0, r7]
 8003f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f84:	462f      	mov	r7, r5
 8003f86:	42bb      	cmp	r3, r7
 8003f88:	460d      	mov	r5, r1
 8003f8a:	d9f4      	bls.n	8003f76 <_printf_i+0x11a>
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d10b      	bne.n	8003fa8 <_printf_i+0x14c>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	07df      	lsls	r7, r3, #31
 8003f94:	d508      	bpl.n	8003fa8 <_printf_i+0x14c>
 8003f96:	6923      	ldr	r3, [r4, #16]
 8003f98:	6861      	ldr	r1, [r4, #4]
 8003f9a:	4299      	cmp	r1, r3
 8003f9c:	bfde      	ittt	le
 8003f9e:	2330      	movle	r3, #48	; 0x30
 8003fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fa8:	1b92      	subs	r2, r2, r6
 8003faa:	6122      	str	r2, [r4, #16]
 8003fac:	f8cd a000 	str.w	sl, [sp]
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	aa03      	add	r2, sp, #12
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	f7ff fee2 	bl	8003d80 <_printf_common>
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d14c      	bne.n	800405a <_printf_i+0x1fe>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	b004      	add	sp, #16
 8003fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fca:	4835      	ldr	r0, [pc, #212]	; (80040a0 <_printf_i+0x244>)
 8003fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	680e      	ldr	r6, [r1, #0]
 8003fd4:	061f      	lsls	r7, r3, #24
 8003fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fda:	600e      	str	r6, [r1, #0]
 8003fdc:	d514      	bpl.n	8004008 <_printf_i+0x1ac>
 8003fde:	07d9      	lsls	r1, r3, #31
 8003fe0:	bf44      	itt	mi
 8003fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8003fe6:	6023      	strmi	r3, [r4, #0]
 8003fe8:	b91d      	cbnz	r5, 8003ff2 <_printf_i+0x196>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f023 0320 	bic.w	r3, r3, #32
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	e7b0      	b.n	8003f58 <_printf_i+0xfc>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	f043 0320 	orr.w	r3, r3, #32
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	2378      	movs	r3, #120	; 0x78
 8004000:	4828      	ldr	r0, [pc, #160]	; (80040a4 <_printf_i+0x248>)
 8004002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004006:	e7e3      	b.n	8003fd0 <_printf_i+0x174>
 8004008:	065e      	lsls	r6, r3, #25
 800400a:	bf48      	it	mi
 800400c:	b2ad      	uxthmi	r5, r5
 800400e:	e7e6      	b.n	8003fde <_printf_i+0x182>
 8004010:	4616      	mov	r6, r2
 8004012:	e7bb      	b.n	8003f8c <_printf_i+0x130>
 8004014:	680b      	ldr	r3, [r1, #0]
 8004016:	6826      	ldr	r6, [r4, #0]
 8004018:	6960      	ldr	r0, [r4, #20]
 800401a:	1d1d      	adds	r5, r3, #4
 800401c:	600d      	str	r5, [r1, #0]
 800401e:	0635      	lsls	r5, r6, #24
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	d501      	bpl.n	8004028 <_printf_i+0x1cc>
 8004024:	6018      	str	r0, [r3, #0]
 8004026:	e002      	b.n	800402e <_printf_i+0x1d2>
 8004028:	0671      	lsls	r1, r6, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0x1c8>
 800402c:	8018      	strh	r0, [r3, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	6123      	str	r3, [r4, #16]
 8004032:	4616      	mov	r6, r2
 8004034:	e7ba      	b.n	8003fac <_printf_i+0x150>
 8004036:	680b      	ldr	r3, [r1, #0]
 8004038:	1d1a      	adds	r2, r3, #4
 800403a:	600a      	str	r2, [r1, #0]
 800403c:	681e      	ldr	r6, [r3, #0]
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	2100      	movs	r1, #0
 8004042:	4630      	mov	r0, r6
 8004044:	f7fc f8ec 	bl	8000220 <memchr>
 8004048:	b108      	cbz	r0, 800404e <_printf_i+0x1f2>
 800404a:	1b80      	subs	r0, r0, r6
 800404c:	6060      	str	r0, [r4, #4]
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	2300      	movs	r3, #0
 8004054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004058:	e7a8      	b.n	8003fac <_printf_i+0x150>
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	4632      	mov	r2, r6
 800405e:	4649      	mov	r1, r9
 8004060:	4640      	mov	r0, r8
 8004062:	47d0      	blx	sl
 8004064:	3001      	adds	r0, #1
 8004066:	d0ab      	beq.n	8003fc0 <_printf_i+0x164>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	079b      	lsls	r3, r3, #30
 800406c:	d413      	bmi.n	8004096 <_printf_i+0x23a>
 800406e:	68e0      	ldr	r0, [r4, #12]
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	4298      	cmp	r0, r3
 8004074:	bfb8      	it	lt
 8004076:	4618      	movlt	r0, r3
 8004078:	e7a4      	b.n	8003fc4 <_printf_i+0x168>
 800407a:	2301      	movs	r3, #1
 800407c:	4632      	mov	r2, r6
 800407e:	4649      	mov	r1, r9
 8004080:	4640      	mov	r0, r8
 8004082:	47d0      	blx	sl
 8004084:	3001      	adds	r0, #1
 8004086:	d09b      	beq.n	8003fc0 <_printf_i+0x164>
 8004088:	3501      	adds	r5, #1
 800408a:	68e3      	ldr	r3, [r4, #12]
 800408c:	9903      	ldr	r1, [sp, #12]
 800408e:	1a5b      	subs	r3, r3, r1
 8004090:	42ab      	cmp	r3, r5
 8004092:	dcf2      	bgt.n	800407a <_printf_i+0x21e>
 8004094:	e7eb      	b.n	800406e <_printf_i+0x212>
 8004096:	2500      	movs	r5, #0
 8004098:	f104 0619 	add.w	r6, r4, #25
 800409c:	e7f5      	b.n	800408a <_printf_i+0x22e>
 800409e:	bf00      	nop
 80040a0:	080061be 	.word	0x080061be
 80040a4:	080061cf 	.word	0x080061cf

080040a8 <quorem>:
 80040a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	6903      	ldr	r3, [r0, #16]
 80040ae:	690c      	ldr	r4, [r1, #16]
 80040b0:	42a3      	cmp	r3, r4
 80040b2:	4607      	mov	r7, r0
 80040b4:	f2c0 8081 	blt.w	80041ba <quorem+0x112>
 80040b8:	3c01      	subs	r4, #1
 80040ba:	f101 0814 	add.w	r8, r1, #20
 80040be:	f100 0514 	add.w	r5, r0, #20
 80040c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040d0:	3301      	adds	r3, #1
 80040d2:	429a      	cmp	r2, r3
 80040d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80040e0:	d331      	bcc.n	8004146 <quorem+0x9e>
 80040e2:	f04f 0e00 	mov.w	lr, #0
 80040e6:	4640      	mov	r0, r8
 80040e8:	46ac      	mov	ip, r5
 80040ea:	46f2      	mov	sl, lr
 80040ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80040f0:	b293      	uxth	r3, r2
 80040f2:	fb06 e303 	mla	r3, r6, r3, lr
 80040f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	ebaa 0303 	sub.w	r3, sl, r3
 8004100:	0c12      	lsrs	r2, r2, #16
 8004102:	f8dc a000 	ldr.w	sl, [ip]
 8004106:	fb06 e202 	mla	r2, r6, r2, lr
 800410a:	fa13 f38a 	uxtah	r3, r3, sl
 800410e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004112:	fa1f fa82 	uxth.w	sl, r2
 8004116:	f8dc 2000 	ldr.w	r2, [ip]
 800411a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800411e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004122:	b29b      	uxth	r3, r3
 8004124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004128:	4581      	cmp	r9, r0
 800412a:	f84c 3b04 	str.w	r3, [ip], #4
 800412e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004132:	d2db      	bcs.n	80040ec <quorem+0x44>
 8004134:	f855 300b 	ldr.w	r3, [r5, fp]
 8004138:	b92b      	cbnz	r3, 8004146 <quorem+0x9e>
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	3b04      	subs	r3, #4
 800413e:	429d      	cmp	r5, r3
 8004140:	461a      	mov	r2, r3
 8004142:	d32e      	bcc.n	80041a2 <quorem+0xfa>
 8004144:	613c      	str	r4, [r7, #16]
 8004146:	4638      	mov	r0, r7
 8004148:	f001 f8be 	bl	80052c8 <__mcmp>
 800414c:	2800      	cmp	r0, #0
 800414e:	db24      	blt.n	800419a <quorem+0xf2>
 8004150:	3601      	adds	r6, #1
 8004152:	4628      	mov	r0, r5
 8004154:	f04f 0c00 	mov.w	ip, #0
 8004158:	f858 2b04 	ldr.w	r2, [r8], #4
 800415c:	f8d0 e000 	ldr.w	lr, [r0]
 8004160:	b293      	uxth	r3, r2
 8004162:	ebac 0303 	sub.w	r3, ip, r3
 8004166:	0c12      	lsrs	r2, r2, #16
 8004168:	fa13 f38e 	uxtah	r3, r3, lr
 800416c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004174:	b29b      	uxth	r3, r3
 8004176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800417a:	45c1      	cmp	r9, r8
 800417c:	f840 3b04 	str.w	r3, [r0], #4
 8004180:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004184:	d2e8      	bcs.n	8004158 <quorem+0xb0>
 8004186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800418a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800418e:	b922      	cbnz	r2, 800419a <quorem+0xf2>
 8004190:	3b04      	subs	r3, #4
 8004192:	429d      	cmp	r5, r3
 8004194:	461a      	mov	r2, r3
 8004196:	d30a      	bcc.n	80041ae <quorem+0x106>
 8004198:	613c      	str	r4, [r7, #16]
 800419a:	4630      	mov	r0, r6
 800419c:	b003      	add	sp, #12
 800419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	2a00      	cmp	r2, #0
 80041a8:	d1cc      	bne.n	8004144 <quorem+0x9c>
 80041aa:	3c01      	subs	r4, #1
 80041ac:	e7c7      	b.n	800413e <quorem+0x96>
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	d1f0      	bne.n	8004198 <quorem+0xf0>
 80041b6:	3c01      	subs	r4, #1
 80041b8:	e7eb      	b.n	8004192 <quorem+0xea>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e7ee      	b.n	800419c <quorem+0xf4>
	...

080041c0 <_dtoa_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	ed2d 8b02 	vpush	{d8}
 80041c8:	ec57 6b10 	vmov	r6, r7, d0
 80041cc:	b095      	sub	sp, #84	; 0x54
 80041ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80041d4:	9105      	str	r1, [sp, #20]
 80041d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80041da:	4604      	mov	r4, r0
 80041dc:	9209      	str	r2, [sp, #36]	; 0x24
 80041de:	930f      	str	r3, [sp, #60]	; 0x3c
 80041e0:	b975      	cbnz	r5, 8004200 <_dtoa_r+0x40>
 80041e2:	2010      	movs	r0, #16
 80041e4:	f000 fddc 	bl	8004da0 <malloc>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6260      	str	r0, [r4, #36]	; 0x24
 80041ec:	b920      	cbnz	r0, 80041f8 <_dtoa_r+0x38>
 80041ee:	4bb2      	ldr	r3, [pc, #712]	; (80044b8 <_dtoa_r+0x2f8>)
 80041f0:	21ea      	movs	r1, #234	; 0xea
 80041f2:	48b2      	ldr	r0, [pc, #712]	; (80044bc <_dtoa_r+0x2fc>)
 80041f4:	f001 fa32 	bl	800565c <__assert_func>
 80041f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80041fc:	6005      	str	r5, [r0, #0]
 80041fe:	60c5      	str	r5, [r0, #12]
 8004200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	b151      	cbz	r1, 800421c <_dtoa_r+0x5c>
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	604a      	str	r2, [r1, #4]
 800420a:	2301      	movs	r3, #1
 800420c:	4093      	lsls	r3, r2
 800420e:	608b      	str	r3, [r1, #8]
 8004210:	4620      	mov	r0, r4
 8004212:	f000 fe1b 	bl	8004e4c <_Bfree>
 8004216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	1e3b      	subs	r3, r7, #0
 800421e:	bfb9      	ittee	lt
 8004220:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004224:	9303      	strlt	r3, [sp, #12]
 8004226:	2300      	movge	r3, #0
 8004228:	f8c8 3000 	strge.w	r3, [r8]
 800422c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004230:	4ba3      	ldr	r3, [pc, #652]	; (80044c0 <_dtoa_r+0x300>)
 8004232:	bfbc      	itt	lt
 8004234:	2201      	movlt	r2, #1
 8004236:	f8c8 2000 	strlt.w	r2, [r8]
 800423a:	ea33 0309 	bics.w	r3, r3, r9
 800423e:	d11b      	bne.n	8004278 <_dtoa_r+0xb8>
 8004240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004242:	f242 730f 	movw	r3, #9999	; 0x270f
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800424c:	4333      	orrs	r3, r6
 800424e:	f000 857a 	beq.w	8004d46 <_dtoa_r+0xb86>
 8004252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004254:	b963      	cbnz	r3, 8004270 <_dtoa_r+0xb0>
 8004256:	4b9b      	ldr	r3, [pc, #620]	; (80044c4 <_dtoa_r+0x304>)
 8004258:	e024      	b.n	80042a4 <_dtoa_r+0xe4>
 800425a:	4b9b      	ldr	r3, [pc, #620]	; (80044c8 <_dtoa_r+0x308>)
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	3308      	adds	r3, #8
 8004260:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	9800      	ldr	r0, [sp, #0]
 8004266:	b015      	add	sp, #84	; 0x54
 8004268:	ecbd 8b02 	vpop	{d8}
 800426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004270:	4b94      	ldr	r3, [pc, #592]	; (80044c4 <_dtoa_r+0x304>)
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	3303      	adds	r3, #3
 8004276:	e7f3      	b.n	8004260 <_dtoa_r+0xa0>
 8004278:	ed9d 7b02 	vldr	d7, [sp, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	ec51 0b17 	vmov	r0, r1, d7
 8004282:	2300      	movs	r3, #0
 8004284:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004288:	f7fc fc3e 	bl	8000b08 <__aeabi_dcmpeq>
 800428c:	4680      	mov	r8, r0
 800428e:	b158      	cbz	r0, 80042a8 <_dtoa_r+0xe8>
 8004290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004292:	2301      	movs	r3, #1
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8551 	beq.w	8004d40 <_dtoa_r+0xb80>
 800429e:	488b      	ldr	r0, [pc, #556]	; (80044cc <_dtoa_r+0x30c>)
 80042a0:	6018      	str	r0, [r3, #0]
 80042a2:	1e43      	subs	r3, r0, #1
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	e7dd      	b.n	8004264 <_dtoa_r+0xa4>
 80042a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80042ac:	aa12      	add	r2, sp, #72	; 0x48
 80042ae:	a913      	add	r1, sp, #76	; 0x4c
 80042b0:	4620      	mov	r0, r4
 80042b2:	f001 f8ad 	bl	8005410 <__d2b>
 80042b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80042ba:	4683      	mov	fp, r0
 80042bc:	2d00      	cmp	r5, #0
 80042be:	d07c      	beq.n	80043ba <_dtoa_r+0x1fa>
 80042c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80042c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80042ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80042d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80042d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042da:	4b7d      	ldr	r3, [pc, #500]	; (80044d0 <_dtoa_r+0x310>)
 80042dc:	2200      	movs	r2, #0
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	f7fb fff1 	bl	80002c8 <__aeabi_dsub>
 80042e6:	a36e      	add	r3, pc, #440	; (adr r3, 80044a0 <_dtoa_r+0x2e0>)
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f7fc f9a4 	bl	8000638 <__aeabi_dmul>
 80042f0:	a36d      	add	r3, pc, #436	; (adr r3, 80044a8 <_dtoa_r+0x2e8>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fb ffe9 	bl	80002cc <__adddf3>
 80042fa:	4606      	mov	r6, r0
 80042fc:	4628      	mov	r0, r5
 80042fe:	460f      	mov	r7, r1
 8004300:	f7fc f930 	bl	8000564 <__aeabi_i2d>
 8004304:	a36a      	add	r3, pc, #424	; (adr r3, 80044b0 <_dtoa_r+0x2f0>)
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f7fc f995 	bl	8000638 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4630      	mov	r0, r6
 8004314:	4639      	mov	r1, r7
 8004316:	f7fb ffd9 	bl	80002cc <__adddf3>
 800431a:	4606      	mov	r6, r0
 800431c:	460f      	mov	r7, r1
 800431e:	f7fc fc3b 	bl	8000b98 <__aeabi_d2iz>
 8004322:	2200      	movs	r2, #0
 8004324:	4682      	mov	sl, r0
 8004326:	2300      	movs	r3, #0
 8004328:	4630      	mov	r0, r6
 800432a:	4639      	mov	r1, r7
 800432c:	f7fc fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8004330:	b148      	cbz	r0, 8004346 <_dtoa_r+0x186>
 8004332:	4650      	mov	r0, sl
 8004334:	f7fc f916 	bl	8000564 <__aeabi_i2d>
 8004338:	4632      	mov	r2, r6
 800433a:	463b      	mov	r3, r7
 800433c:	f7fc fbe4 	bl	8000b08 <__aeabi_dcmpeq>
 8004340:	b908      	cbnz	r0, 8004346 <_dtoa_r+0x186>
 8004342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004346:	f1ba 0f16 	cmp.w	sl, #22
 800434a:	d854      	bhi.n	80043f6 <_dtoa_r+0x236>
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <_dtoa_r+0x314>)
 800434e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800435a:	f7fc fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800435e:	2800      	cmp	r0, #0
 8004360:	d04b      	beq.n	80043fa <_dtoa_r+0x23a>
 8004362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004366:	2300      	movs	r3, #0
 8004368:	930e      	str	r3, [sp, #56]	; 0x38
 800436a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800436c:	1b5d      	subs	r5, r3, r5
 800436e:	1e6b      	subs	r3, r5, #1
 8004370:	9304      	str	r3, [sp, #16]
 8004372:	bf43      	ittte	mi
 8004374:	2300      	movmi	r3, #0
 8004376:	f1c5 0801 	rsbmi	r8, r5, #1
 800437a:	9304      	strmi	r3, [sp, #16]
 800437c:	f04f 0800 	movpl.w	r8, #0
 8004380:	f1ba 0f00 	cmp.w	sl, #0
 8004384:	db3b      	blt.n	80043fe <_dtoa_r+0x23e>
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800438c:	4453      	add	r3, sl
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	2300      	movs	r3, #0
 8004392:	9306      	str	r3, [sp, #24]
 8004394:	9b05      	ldr	r3, [sp, #20]
 8004396:	2b09      	cmp	r3, #9
 8004398:	d869      	bhi.n	800446e <_dtoa_r+0x2ae>
 800439a:	2b05      	cmp	r3, #5
 800439c:	bfc4      	itt	gt
 800439e:	3b04      	subgt	r3, #4
 80043a0:	9305      	strgt	r3, [sp, #20]
 80043a2:	9b05      	ldr	r3, [sp, #20]
 80043a4:	f1a3 0302 	sub.w	r3, r3, #2
 80043a8:	bfcc      	ite	gt
 80043aa:	2500      	movgt	r5, #0
 80043ac:	2501      	movle	r5, #1
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d869      	bhi.n	8004486 <_dtoa_r+0x2c6>
 80043b2:	e8df f003 	tbb	[pc, r3]
 80043b6:	4e2c      	.short	0x4e2c
 80043b8:	5a4c      	.short	0x5a4c
 80043ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80043be:	441d      	add	r5, r3
 80043c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	bfc1      	itttt	gt
 80043c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80043d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80043d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80043d8:	bfda      	itte	le
 80043da:	f1c3 0320 	rsble	r3, r3, #32
 80043de:	fa06 f003 	lslle.w	r0, r6, r3
 80043e2:	4318      	orrgt	r0, r3
 80043e4:	f7fc f8ae 	bl	8000544 <__aeabi_ui2d>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4606      	mov	r6, r0
 80043ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80043f0:	3d01      	subs	r5, #1
 80043f2:	9310      	str	r3, [sp, #64]	; 0x40
 80043f4:	e771      	b.n	80042da <_dtoa_r+0x11a>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e7b6      	b.n	8004368 <_dtoa_r+0x1a8>
 80043fa:	900e      	str	r0, [sp, #56]	; 0x38
 80043fc:	e7b5      	b.n	800436a <_dtoa_r+0x1aa>
 80043fe:	f1ca 0300 	rsb	r3, sl, #0
 8004402:	9306      	str	r3, [sp, #24]
 8004404:	2300      	movs	r3, #0
 8004406:	eba8 080a 	sub.w	r8, r8, sl
 800440a:	930d      	str	r3, [sp, #52]	; 0x34
 800440c:	e7c2      	b.n	8004394 <_dtoa_r+0x1d4>
 800440e:	2300      	movs	r3, #0
 8004410:	9308      	str	r3, [sp, #32]
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	dc39      	bgt.n	800448c <_dtoa_r+0x2cc>
 8004418:	f04f 0901 	mov.w	r9, #1
 800441c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004420:	464b      	mov	r3, r9
 8004422:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004426:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004428:	2200      	movs	r2, #0
 800442a:	6042      	str	r2, [r0, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	f102 0614 	add.w	r6, r2, #20
 8004432:	429e      	cmp	r6, r3
 8004434:	6841      	ldr	r1, [r0, #4]
 8004436:	d92f      	bls.n	8004498 <_dtoa_r+0x2d8>
 8004438:	4620      	mov	r0, r4
 800443a:	f000 fcc7 	bl	8004dcc <_Balloc>
 800443e:	9000      	str	r0, [sp, #0]
 8004440:	2800      	cmp	r0, #0
 8004442:	d14b      	bne.n	80044dc <_dtoa_r+0x31c>
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <_dtoa_r+0x318>)
 8004446:	4602      	mov	r2, r0
 8004448:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800444c:	e6d1      	b.n	80041f2 <_dtoa_r+0x32>
 800444e:	2301      	movs	r3, #1
 8004450:	e7de      	b.n	8004410 <_dtoa_r+0x250>
 8004452:	2300      	movs	r3, #0
 8004454:	9308      	str	r3, [sp, #32]
 8004456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004458:	eb0a 0903 	add.w	r9, sl, r3
 800445c:	f109 0301 	add.w	r3, r9, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	bfb8      	it	lt
 8004466:	2301      	movlt	r3, #1
 8004468:	e7dd      	b.n	8004426 <_dtoa_r+0x266>
 800446a:	2301      	movs	r3, #1
 800446c:	e7f2      	b.n	8004454 <_dtoa_r+0x294>
 800446e:	2501      	movs	r5, #1
 8004470:	2300      	movs	r3, #0
 8004472:	9305      	str	r3, [sp, #20]
 8004474:	9508      	str	r5, [sp, #32]
 8004476:	f04f 39ff 	mov.w	r9, #4294967295
 800447a:	2200      	movs	r2, #0
 800447c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004480:	2312      	movs	r3, #18
 8004482:	9209      	str	r2, [sp, #36]	; 0x24
 8004484:	e7cf      	b.n	8004426 <_dtoa_r+0x266>
 8004486:	2301      	movs	r3, #1
 8004488:	9308      	str	r3, [sp, #32]
 800448a:	e7f4      	b.n	8004476 <_dtoa_r+0x2b6>
 800448c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004490:	f8cd 9004 	str.w	r9, [sp, #4]
 8004494:	464b      	mov	r3, r9
 8004496:	e7c6      	b.n	8004426 <_dtoa_r+0x266>
 8004498:	3101      	adds	r1, #1
 800449a:	6041      	str	r1, [r0, #4]
 800449c:	0052      	lsls	r2, r2, #1
 800449e:	e7c6      	b.n	800442e <_dtoa_r+0x26e>
 80044a0:	636f4361 	.word	0x636f4361
 80044a4:	3fd287a7 	.word	0x3fd287a7
 80044a8:	8b60c8b3 	.word	0x8b60c8b3
 80044ac:	3fc68a28 	.word	0x3fc68a28
 80044b0:	509f79fb 	.word	0x509f79fb
 80044b4:	3fd34413 	.word	0x3fd34413
 80044b8:	080061ed 	.word	0x080061ed
 80044bc:	08006204 	.word	0x08006204
 80044c0:	7ff00000 	.word	0x7ff00000
 80044c4:	080061e9 	.word	0x080061e9
 80044c8:	080061e0 	.word	0x080061e0
 80044cc:	080061bd 	.word	0x080061bd
 80044d0:	3ff80000 	.word	0x3ff80000
 80044d4:	08006300 	.word	0x08006300
 80044d8:	08006263 	.word	0x08006263
 80044dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044de:	9a00      	ldr	r2, [sp, #0]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	2b0e      	cmp	r3, #14
 80044e6:	f200 80ad 	bhi.w	8004644 <_dtoa_r+0x484>
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	f000 80aa 	beq.w	8004644 <_dtoa_r+0x484>
 80044f0:	f1ba 0f00 	cmp.w	sl, #0
 80044f4:	dd36      	ble.n	8004564 <_dtoa_r+0x3a4>
 80044f6:	4ac3      	ldr	r2, [pc, #780]	; (8004804 <_dtoa_r+0x644>)
 80044f8:	f00a 030f 	and.w	r3, sl, #15
 80044fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004500:	ed93 7b00 	vldr	d7, [r3]
 8004504:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004508:	ea4f 172a 	mov.w	r7, sl, asr #4
 800450c:	eeb0 8a47 	vmov.f32	s16, s14
 8004510:	eef0 8a67 	vmov.f32	s17, s15
 8004514:	d016      	beq.n	8004544 <_dtoa_r+0x384>
 8004516:	4bbc      	ldr	r3, [pc, #752]	; (8004808 <_dtoa_r+0x648>)
 8004518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800451c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004520:	f7fc f9b4 	bl	800088c <__aeabi_ddiv>
 8004524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004528:	f007 070f 	and.w	r7, r7, #15
 800452c:	2503      	movs	r5, #3
 800452e:	4eb6      	ldr	r6, [pc, #728]	; (8004808 <_dtoa_r+0x648>)
 8004530:	b957      	cbnz	r7, 8004548 <_dtoa_r+0x388>
 8004532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004536:	ec53 2b18 	vmov	r2, r3, d8
 800453a:	f7fc f9a7 	bl	800088c <__aeabi_ddiv>
 800453e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004542:	e029      	b.n	8004598 <_dtoa_r+0x3d8>
 8004544:	2502      	movs	r5, #2
 8004546:	e7f2      	b.n	800452e <_dtoa_r+0x36e>
 8004548:	07f9      	lsls	r1, r7, #31
 800454a:	d508      	bpl.n	800455e <_dtoa_r+0x39e>
 800454c:	ec51 0b18 	vmov	r0, r1, d8
 8004550:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004554:	f7fc f870 	bl	8000638 <__aeabi_dmul>
 8004558:	ec41 0b18 	vmov	d8, r0, r1
 800455c:	3501      	adds	r5, #1
 800455e:	107f      	asrs	r7, r7, #1
 8004560:	3608      	adds	r6, #8
 8004562:	e7e5      	b.n	8004530 <_dtoa_r+0x370>
 8004564:	f000 80a6 	beq.w	80046b4 <_dtoa_r+0x4f4>
 8004568:	f1ca 0600 	rsb	r6, sl, #0
 800456c:	4ba5      	ldr	r3, [pc, #660]	; (8004804 <_dtoa_r+0x644>)
 800456e:	4fa6      	ldr	r7, [pc, #664]	; (8004808 <_dtoa_r+0x648>)
 8004570:	f006 020f 	and.w	r2, r6, #15
 8004574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004580:	f7fc f85a 	bl	8000638 <__aeabi_dmul>
 8004584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004588:	1136      	asrs	r6, r6, #4
 800458a:	2300      	movs	r3, #0
 800458c:	2502      	movs	r5, #2
 800458e:	2e00      	cmp	r6, #0
 8004590:	f040 8085 	bne.w	800469e <_dtoa_r+0x4de>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1d2      	bne.n	800453e <_dtoa_r+0x37e>
 8004598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 808c 	beq.w	80046b8 <_dtoa_r+0x4f8>
 80045a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045a4:	4b99      	ldr	r3, [pc, #612]	; (800480c <_dtoa_r+0x64c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	4630      	mov	r0, r6
 80045aa:	4639      	mov	r1, r7
 80045ac:	f7fc fab6 	bl	8000b1c <__aeabi_dcmplt>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f000 8081 	beq.w	80046b8 <_dtoa_r+0x4f8>
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d07d      	beq.n	80046b8 <_dtoa_r+0x4f8>
 80045bc:	f1b9 0f00 	cmp.w	r9, #0
 80045c0:	dd3c      	ble.n	800463c <_dtoa_r+0x47c>
 80045c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80045c6:	9307      	str	r3, [sp, #28]
 80045c8:	2200      	movs	r2, #0
 80045ca:	4b91      	ldr	r3, [pc, #580]	; (8004810 <_dtoa_r+0x650>)
 80045cc:	4630      	mov	r0, r6
 80045ce:	4639      	mov	r1, r7
 80045d0:	f7fc f832 	bl	8000638 <__aeabi_dmul>
 80045d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d8:	3501      	adds	r5, #1
 80045da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80045de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045e2:	4628      	mov	r0, r5
 80045e4:	f7fb ffbe 	bl	8000564 <__aeabi_i2d>
 80045e8:	4632      	mov	r2, r6
 80045ea:	463b      	mov	r3, r7
 80045ec:	f7fc f824 	bl	8000638 <__aeabi_dmul>
 80045f0:	4b88      	ldr	r3, [pc, #544]	; (8004814 <_dtoa_r+0x654>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	f7fb fe6a 	bl	80002cc <__adddf3>
 80045f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80045fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004600:	9303      	str	r3, [sp, #12]
 8004602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d15c      	bne.n	80046c2 <_dtoa_r+0x502>
 8004608:	4b83      	ldr	r3, [pc, #524]	; (8004818 <_dtoa_r+0x658>)
 800460a:	2200      	movs	r2, #0
 800460c:	4630      	mov	r0, r6
 800460e:	4639      	mov	r1, r7
 8004610:	f7fb fe5a 	bl	80002c8 <__aeabi_dsub>
 8004614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004618:	4606      	mov	r6, r0
 800461a:	460f      	mov	r7, r1
 800461c:	f7fc fa9c 	bl	8000b58 <__aeabi_dcmpgt>
 8004620:	2800      	cmp	r0, #0
 8004622:	f040 8296 	bne.w	8004b52 <_dtoa_r+0x992>
 8004626:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800462a:	4630      	mov	r0, r6
 800462c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004630:	4639      	mov	r1, r7
 8004632:	f7fc fa73 	bl	8000b1c <__aeabi_dcmplt>
 8004636:	2800      	cmp	r0, #0
 8004638:	f040 8288 	bne.w	8004b4c <_dtoa_r+0x98c>
 800463c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004646:	2b00      	cmp	r3, #0
 8004648:	f2c0 8158 	blt.w	80048fc <_dtoa_r+0x73c>
 800464c:	f1ba 0f0e 	cmp.w	sl, #14
 8004650:	f300 8154 	bgt.w	80048fc <_dtoa_r+0x73c>
 8004654:	4b6b      	ldr	r3, [pc, #428]	; (8004804 <_dtoa_r+0x644>)
 8004656:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800465a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800465e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004660:	2b00      	cmp	r3, #0
 8004662:	f280 80e3 	bge.w	800482c <_dtoa_r+0x66c>
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f300 80df 	bgt.w	800482c <_dtoa_r+0x66c>
 800466e:	f040 826d 	bne.w	8004b4c <_dtoa_r+0x98c>
 8004672:	4b69      	ldr	r3, [pc, #420]	; (8004818 <_dtoa_r+0x658>)
 8004674:	2200      	movs	r2, #0
 8004676:	4640      	mov	r0, r8
 8004678:	4649      	mov	r1, r9
 800467a:	f7fb ffdd 	bl	8000638 <__aeabi_dmul>
 800467e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004682:	f7fc fa5f 	bl	8000b44 <__aeabi_dcmpge>
 8004686:	9e01      	ldr	r6, [sp, #4]
 8004688:	4637      	mov	r7, r6
 800468a:	2800      	cmp	r0, #0
 800468c:	f040 8243 	bne.w	8004b16 <_dtoa_r+0x956>
 8004690:	9d00      	ldr	r5, [sp, #0]
 8004692:	2331      	movs	r3, #49	; 0x31
 8004694:	f805 3b01 	strb.w	r3, [r5], #1
 8004698:	f10a 0a01 	add.w	sl, sl, #1
 800469c:	e23f      	b.n	8004b1e <_dtoa_r+0x95e>
 800469e:	07f2      	lsls	r2, r6, #31
 80046a0:	d505      	bpl.n	80046ae <_dtoa_r+0x4ee>
 80046a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a6:	f7fb ffc7 	bl	8000638 <__aeabi_dmul>
 80046aa:	3501      	adds	r5, #1
 80046ac:	2301      	movs	r3, #1
 80046ae:	1076      	asrs	r6, r6, #1
 80046b0:	3708      	adds	r7, #8
 80046b2:	e76c      	b.n	800458e <_dtoa_r+0x3ce>
 80046b4:	2502      	movs	r5, #2
 80046b6:	e76f      	b.n	8004598 <_dtoa_r+0x3d8>
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80046be:	930c      	str	r3, [sp, #48]	; 0x30
 80046c0:	e78d      	b.n	80045de <_dtoa_r+0x41e>
 80046c2:	9900      	ldr	r1, [sp, #0]
 80046c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046c8:	4b4e      	ldr	r3, [pc, #312]	; (8004804 <_dtoa_r+0x644>)
 80046ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046ce:	4401      	add	r1, r0
 80046d0:	9102      	str	r1, [sp, #8]
 80046d2:	9908      	ldr	r1, [sp, #32]
 80046d4:	eeb0 8a47 	vmov.f32	s16, s14
 80046d8:	eef0 8a67 	vmov.f32	s17, s15
 80046dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d045      	beq.n	8004774 <_dtoa_r+0x5b4>
 80046e8:	494c      	ldr	r1, [pc, #304]	; (800481c <_dtoa_r+0x65c>)
 80046ea:	2000      	movs	r0, #0
 80046ec:	f7fc f8ce 	bl	800088c <__aeabi_ddiv>
 80046f0:	ec53 2b18 	vmov	r2, r3, d8
 80046f4:	f7fb fde8 	bl	80002c8 <__aeabi_dsub>
 80046f8:	9d00      	ldr	r5, [sp, #0]
 80046fa:	ec41 0b18 	vmov	d8, r0, r1
 80046fe:	4639      	mov	r1, r7
 8004700:	4630      	mov	r0, r6
 8004702:	f7fc fa49 	bl	8000b98 <__aeabi_d2iz>
 8004706:	900c      	str	r0, [sp, #48]	; 0x30
 8004708:	f7fb ff2c 	bl	8000564 <__aeabi_i2d>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4630      	mov	r0, r6
 8004712:	4639      	mov	r1, r7
 8004714:	f7fb fdd8 	bl	80002c8 <__aeabi_dsub>
 8004718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800471a:	3330      	adds	r3, #48	; 0x30
 800471c:	f805 3b01 	strb.w	r3, [r5], #1
 8004720:	ec53 2b18 	vmov	r2, r3, d8
 8004724:	4606      	mov	r6, r0
 8004726:	460f      	mov	r7, r1
 8004728:	f7fc f9f8 	bl	8000b1c <__aeabi_dcmplt>
 800472c:	2800      	cmp	r0, #0
 800472e:	d165      	bne.n	80047fc <_dtoa_r+0x63c>
 8004730:	4632      	mov	r2, r6
 8004732:	463b      	mov	r3, r7
 8004734:	4935      	ldr	r1, [pc, #212]	; (800480c <_dtoa_r+0x64c>)
 8004736:	2000      	movs	r0, #0
 8004738:	f7fb fdc6 	bl	80002c8 <__aeabi_dsub>
 800473c:	ec53 2b18 	vmov	r2, r3, d8
 8004740:	f7fc f9ec 	bl	8000b1c <__aeabi_dcmplt>
 8004744:	2800      	cmp	r0, #0
 8004746:	f040 80b9 	bne.w	80048bc <_dtoa_r+0x6fc>
 800474a:	9b02      	ldr	r3, [sp, #8]
 800474c:	429d      	cmp	r5, r3
 800474e:	f43f af75 	beq.w	800463c <_dtoa_r+0x47c>
 8004752:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <_dtoa_r+0x650>)
 8004754:	ec51 0b18 	vmov	r0, r1, d8
 8004758:	2200      	movs	r2, #0
 800475a:	f7fb ff6d 	bl	8000638 <__aeabi_dmul>
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <_dtoa_r+0x650>)
 8004760:	ec41 0b18 	vmov	d8, r0, r1
 8004764:	2200      	movs	r2, #0
 8004766:	4630      	mov	r0, r6
 8004768:	4639      	mov	r1, r7
 800476a:	f7fb ff65 	bl	8000638 <__aeabi_dmul>
 800476e:	4606      	mov	r6, r0
 8004770:	460f      	mov	r7, r1
 8004772:	e7c4      	b.n	80046fe <_dtoa_r+0x53e>
 8004774:	ec51 0b17 	vmov	r0, r1, d7
 8004778:	f7fb ff5e 	bl	8000638 <__aeabi_dmul>
 800477c:	9b02      	ldr	r3, [sp, #8]
 800477e:	9d00      	ldr	r5, [sp, #0]
 8004780:	930c      	str	r3, [sp, #48]	; 0x30
 8004782:	ec41 0b18 	vmov	d8, r0, r1
 8004786:	4639      	mov	r1, r7
 8004788:	4630      	mov	r0, r6
 800478a:	f7fc fa05 	bl	8000b98 <__aeabi_d2iz>
 800478e:	9011      	str	r0, [sp, #68]	; 0x44
 8004790:	f7fb fee8 	bl	8000564 <__aeabi_i2d>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4630      	mov	r0, r6
 800479a:	4639      	mov	r1, r7
 800479c:	f7fb fd94 	bl	80002c8 <__aeabi_dsub>
 80047a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047a2:	3330      	adds	r3, #48	; 0x30
 80047a4:	f805 3b01 	strb.w	r3, [r5], #1
 80047a8:	9b02      	ldr	r3, [sp, #8]
 80047aa:	429d      	cmp	r5, r3
 80047ac:	4606      	mov	r6, r0
 80047ae:	460f      	mov	r7, r1
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	d134      	bne.n	8004820 <_dtoa_r+0x660>
 80047b6:	4b19      	ldr	r3, [pc, #100]	; (800481c <_dtoa_r+0x65c>)
 80047b8:	ec51 0b18 	vmov	r0, r1, d8
 80047bc:	f7fb fd86 	bl	80002cc <__adddf3>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4630      	mov	r0, r6
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fc f9c6 	bl	8000b58 <__aeabi_dcmpgt>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d175      	bne.n	80048bc <_dtoa_r+0x6fc>
 80047d0:	ec53 2b18 	vmov	r2, r3, d8
 80047d4:	4911      	ldr	r1, [pc, #68]	; (800481c <_dtoa_r+0x65c>)
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7fb fd76 	bl	80002c8 <__aeabi_dsub>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4630      	mov	r0, r6
 80047e2:	4639      	mov	r1, r7
 80047e4:	f7fc f99a 	bl	8000b1c <__aeabi_dcmplt>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	f43f af27 	beq.w	800463c <_dtoa_r+0x47c>
 80047ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047f0:	1e6b      	subs	r3, r5, #1
 80047f2:	930c      	str	r3, [sp, #48]	; 0x30
 80047f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047f8:	2b30      	cmp	r3, #48	; 0x30
 80047fa:	d0f8      	beq.n	80047ee <_dtoa_r+0x62e>
 80047fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004800:	e04a      	b.n	8004898 <_dtoa_r+0x6d8>
 8004802:	bf00      	nop
 8004804:	08006300 	.word	0x08006300
 8004808:	080062d8 	.word	0x080062d8
 800480c:	3ff00000 	.word	0x3ff00000
 8004810:	40240000 	.word	0x40240000
 8004814:	401c0000 	.word	0x401c0000
 8004818:	40140000 	.word	0x40140000
 800481c:	3fe00000 	.word	0x3fe00000
 8004820:	4baf      	ldr	r3, [pc, #700]	; (8004ae0 <_dtoa_r+0x920>)
 8004822:	f7fb ff09 	bl	8000638 <__aeabi_dmul>
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	e7ac      	b.n	8004786 <_dtoa_r+0x5c6>
 800482c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004830:	9d00      	ldr	r5, [sp, #0]
 8004832:	4642      	mov	r2, r8
 8004834:	464b      	mov	r3, r9
 8004836:	4630      	mov	r0, r6
 8004838:	4639      	mov	r1, r7
 800483a:	f7fc f827 	bl	800088c <__aeabi_ddiv>
 800483e:	f7fc f9ab 	bl	8000b98 <__aeabi_d2iz>
 8004842:	9002      	str	r0, [sp, #8]
 8004844:	f7fb fe8e 	bl	8000564 <__aeabi_i2d>
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	f7fb fef4 	bl	8000638 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4630      	mov	r0, r6
 8004856:	4639      	mov	r1, r7
 8004858:	f7fb fd36 	bl	80002c8 <__aeabi_dsub>
 800485c:	9e02      	ldr	r6, [sp, #8]
 800485e:	9f01      	ldr	r7, [sp, #4]
 8004860:	3630      	adds	r6, #48	; 0x30
 8004862:	f805 6b01 	strb.w	r6, [r5], #1
 8004866:	9e00      	ldr	r6, [sp, #0]
 8004868:	1bae      	subs	r6, r5, r6
 800486a:	42b7      	cmp	r7, r6
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	d137      	bne.n	80048e2 <_dtoa_r+0x722>
 8004872:	f7fb fd2b 	bl	80002cc <__adddf3>
 8004876:	4642      	mov	r2, r8
 8004878:	464b      	mov	r3, r9
 800487a:	4606      	mov	r6, r0
 800487c:	460f      	mov	r7, r1
 800487e:	f7fc f96b 	bl	8000b58 <__aeabi_dcmpgt>
 8004882:	b9c8      	cbnz	r0, 80048b8 <_dtoa_r+0x6f8>
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	4630      	mov	r0, r6
 800488a:	4639      	mov	r1, r7
 800488c:	f7fc f93c 	bl	8000b08 <__aeabi_dcmpeq>
 8004890:	b110      	cbz	r0, 8004898 <_dtoa_r+0x6d8>
 8004892:	9b02      	ldr	r3, [sp, #8]
 8004894:	07d9      	lsls	r1, r3, #31
 8004896:	d40f      	bmi.n	80048b8 <_dtoa_r+0x6f8>
 8004898:	4620      	mov	r0, r4
 800489a:	4659      	mov	r1, fp
 800489c:	f000 fad6 	bl	8004e4c <_Bfree>
 80048a0:	2300      	movs	r3, #0
 80048a2:	702b      	strb	r3, [r5, #0]
 80048a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048a6:	f10a 0001 	add.w	r0, sl, #1
 80048aa:	6018      	str	r0, [r3, #0]
 80048ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f43f acd8 	beq.w	8004264 <_dtoa_r+0xa4>
 80048b4:	601d      	str	r5, [r3, #0]
 80048b6:	e4d5      	b.n	8004264 <_dtoa_r+0xa4>
 80048b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80048bc:	462b      	mov	r3, r5
 80048be:	461d      	mov	r5, r3
 80048c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048c4:	2a39      	cmp	r2, #57	; 0x39
 80048c6:	d108      	bne.n	80048da <_dtoa_r+0x71a>
 80048c8:	9a00      	ldr	r2, [sp, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d1f7      	bne.n	80048be <_dtoa_r+0x6fe>
 80048ce:	9a07      	ldr	r2, [sp, #28]
 80048d0:	9900      	ldr	r1, [sp, #0]
 80048d2:	3201      	adds	r2, #1
 80048d4:	9207      	str	r2, [sp, #28]
 80048d6:	2230      	movs	r2, #48	; 0x30
 80048d8:	700a      	strb	r2, [r1, #0]
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	3201      	adds	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	e78c      	b.n	80047fc <_dtoa_r+0x63c>
 80048e2:	4b7f      	ldr	r3, [pc, #508]	; (8004ae0 <_dtoa_r+0x920>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	f7fb fea7 	bl	8000638 <__aeabi_dmul>
 80048ea:	2200      	movs	r2, #0
 80048ec:	2300      	movs	r3, #0
 80048ee:	4606      	mov	r6, r0
 80048f0:	460f      	mov	r7, r1
 80048f2:	f7fc f909 	bl	8000b08 <__aeabi_dcmpeq>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d09b      	beq.n	8004832 <_dtoa_r+0x672>
 80048fa:	e7cd      	b.n	8004898 <_dtoa_r+0x6d8>
 80048fc:	9a08      	ldr	r2, [sp, #32]
 80048fe:	2a00      	cmp	r2, #0
 8004900:	f000 80c4 	beq.w	8004a8c <_dtoa_r+0x8cc>
 8004904:	9a05      	ldr	r2, [sp, #20]
 8004906:	2a01      	cmp	r2, #1
 8004908:	f300 80a8 	bgt.w	8004a5c <_dtoa_r+0x89c>
 800490c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800490e:	2a00      	cmp	r2, #0
 8004910:	f000 80a0 	beq.w	8004a54 <_dtoa_r+0x894>
 8004914:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004918:	9e06      	ldr	r6, [sp, #24]
 800491a:	4645      	mov	r5, r8
 800491c:	9a04      	ldr	r2, [sp, #16]
 800491e:	2101      	movs	r1, #1
 8004920:	441a      	add	r2, r3
 8004922:	4620      	mov	r0, r4
 8004924:	4498      	add	r8, r3
 8004926:	9204      	str	r2, [sp, #16]
 8004928:	f000 fb4c 	bl	8004fc4 <__i2b>
 800492c:	4607      	mov	r7, r0
 800492e:	2d00      	cmp	r5, #0
 8004930:	dd0b      	ble.n	800494a <_dtoa_r+0x78a>
 8004932:	9b04      	ldr	r3, [sp, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dd08      	ble.n	800494a <_dtoa_r+0x78a>
 8004938:	42ab      	cmp	r3, r5
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	bfa8      	it	ge
 800493e:	462b      	movge	r3, r5
 8004940:	eba8 0803 	sub.w	r8, r8, r3
 8004944:	1aed      	subs	r5, r5, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9b06      	ldr	r3, [sp, #24]
 800494c:	b1fb      	cbz	r3, 800498e <_dtoa_r+0x7ce>
 800494e:	9b08      	ldr	r3, [sp, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 809f 	beq.w	8004a94 <_dtoa_r+0x8d4>
 8004956:	2e00      	cmp	r6, #0
 8004958:	dd11      	ble.n	800497e <_dtoa_r+0x7be>
 800495a:	4639      	mov	r1, r7
 800495c:	4632      	mov	r2, r6
 800495e:	4620      	mov	r0, r4
 8004960:	f000 fbec 	bl	800513c <__pow5mult>
 8004964:	465a      	mov	r2, fp
 8004966:	4601      	mov	r1, r0
 8004968:	4607      	mov	r7, r0
 800496a:	4620      	mov	r0, r4
 800496c:	f000 fb40 	bl	8004ff0 <__multiply>
 8004970:	4659      	mov	r1, fp
 8004972:	9007      	str	r0, [sp, #28]
 8004974:	4620      	mov	r0, r4
 8004976:	f000 fa69 	bl	8004e4c <_Bfree>
 800497a:	9b07      	ldr	r3, [sp, #28]
 800497c:	469b      	mov	fp, r3
 800497e:	9b06      	ldr	r3, [sp, #24]
 8004980:	1b9a      	subs	r2, r3, r6
 8004982:	d004      	beq.n	800498e <_dtoa_r+0x7ce>
 8004984:	4659      	mov	r1, fp
 8004986:	4620      	mov	r0, r4
 8004988:	f000 fbd8 	bl	800513c <__pow5mult>
 800498c:	4683      	mov	fp, r0
 800498e:	2101      	movs	r1, #1
 8004990:	4620      	mov	r0, r4
 8004992:	f000 fb17 	bl	8004fc4 <__i2b>
 8004996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	4606      	mov	r6, r0
 800499c:	dd7c      	ble.n	8004a98 <_dtoa_r+0x8d8>
 800499e:	461a      	mov	r2, r3
 80049a0:	4601      	mov	r1, r0
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 fbca 	bl	800513c <__pow5mult>
 80049a8:	9b05      	ldr	r3, [sp, #20]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	4606      	mov	r6, r0
 80049ae:	dd76      	ble.n	8004a9e <_dtoa_r+0x8de>
 80049b0:	2300      	movs	r3, #0
 80049b2:	9306      	str	r3, [sp, #24]
 80049b4:	6933      	ldr	r3, [r6, #16]
 80049b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80049ba:	6918      	ldr	r0, [r3, #16]
 80049bc:	f000 fab2 	bl	8004f24 <__hi0bits>
 80049c0:	f1c0 0020 	rsb	r0, r0, #32
 80049c4:	9b04      	ldr	r3, [sp, #16]
 80049c6:	4418      	add	r0, r3
 80049c8:	f010 001f 	ands.w	r0, r0, #31
 80049cc:	f000 8086 	beq.w	8004adc <_dtoa_r+0x91c>
 80049d0:	f1c0 0320 	rsb	r3, r0, #32
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	dd7f      	ble.n	8004ad8 <_dtoa_r+0x918>
 80049d8:	f1c0 001c 	rsb	r0, r0, #28
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	4403      	add	r3, r0
 80049e0:	4480      	add	r8, r0
 80049e2:	4405      	add	r5, r0
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	f1b8 0f00 	cmp.w	r8, #0
 80049ea:	dd05      	ble.n	80049f8 <_dtoa_r+0x838>
 80049ec:	4659      	mov	r1, fp
 80049ee:	4642      	mov	r2, r8
 80049f0:	4620      	mov	r0, r4
 80049f2:	f000 fbfd 	bl	80051f0 <__lshift>
 80049f6:	4683      	mov	fp, r0
 80049f8:	9b04      	ldr	r3, [sp, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dd05      	ble.n	8004a0a <_dtoa_r+0x84a>
 80049fe:	4631      	mov	r1, r6
 8004a00:	461a      	mov	r2, r3
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 fbf4 	bl	80051f0 <__lshift>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d069      	beq.n	8004ae4 <_dtoa_r+0x924>
 8004a10:	4631      	mov	r1, r6
 8004a12:	4658      	mov	r0, fp
 8004a14:	f000 fc58 	bl	80052c8 <__mcmp>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	da63      	bge.n	8004ae4 <_dtoa_r+0x924>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4659      	mov	r1, fp
 8004a20:	220a      	movs	r2, #10
 8004a22:	4620      	mov	r0, r4
 8004a24:	f000 fa34 	bl	8004e90 <__multadd>
 8004a28:	9b08      	ldr	r3, [sp, #32]
 8004a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a2e:	4683      	mov	fp, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 818f 	beq.w	8004d54 <_dtoa_r+0xb94>
 8004a36:	4639      	mov	r1, r7
 8004a38:	2300      	movs	r3, #0
 8004a3a:	220a      	movs	r2, #10
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 fa27 	bl	8004e90 <__multadd>
 8004a42:	f1b9 0f00 	cmp.w	r9, #0
 8004a46:	4607      	mov	r7, r0
 8004a48:	f300 808e 	bgt.w	8004b68 <_dtoa_r+0x9a8>
 8004a4c:	9b05      	ldr	r3, [sp, #20]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	dc50      	bgt.n	8004af4 <_dtoa_r+0x934>
 8004a52:	e089      	b.n	8004b68 <_dtoa_r+0x9a8>
 8004a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a5a:	e75d      	b.n	8004918 <_dtoa_r+0x758>
 8004a5c:	9b01      	ldr	r3, [sp, #4]
 8004a5e:	1e5e      	subs	r6, r3, #1
 8004a60:	9b06      	ldr	r3, [sp, #24]
 8004a62:	42b3      	cmp	r3, r6
 8004a64:	bfbf      	itttt	lt
 8004a66:	9b06      	ldrlt	r3, [sp, #24]
 8004a68:	9606      	strlt	r6, [sp, #24]
 8004a6a:	1af2      	sublt	r2, r6, r3
 8004a6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004a6e:	bfb6      	itet	lt
 8004a70:	189b      	addlt	r3, r3, r2
 8004a72:	1b9e      	subge	r6, r3, r6
 8004a74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004a76:	9b01      	ldr	r3, [sp, #4]
 8004a78:	bfb8      	it	lt
 8004a7a:	2600      	movlt	r6, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bfb5      	itete	lt
 8004a80:	eba8 0503 	sublt.w	r5, r8, r3
 8004a84:	9b01      	ldrge	r3, [sp, #4]
 8004a86:	2300      	movlt	r3, #0
 8004a88:	4645      	movge	r5, r8
 8004a8a:	e747      	b.n	800491c <_dtoa_r+0x75c>
 8004a8c:	9e06      	ldr	r6, [sp, #24]
 8004a8e:	9f08      	ldr	r7, [sp, #32]
 8004a90:	4645      	mov	r5, r8
 8004a92:	e74c      	b.n	800492e <_dtoa_r+0x76e>
 8004a94:	9a06      	ldr	r2, [sp, #24]
 8004a96:	e775      	b.n	8004984 <_dtoa_r+0x7c4>
 8004a98:	9b05      	ldr	r3, [sp, #20]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	dc18      	bgt.n	8004ad0 <_dtoa_r+0x910>
 8004a9e:	9b02      	ldr	r3, [sp, #8]
 8004aa0:	b9b3      	cbnz	r3, 8004ad0 <_dtoa_r+0x910>
 8004aa2:	9b03      	ldr	r3, [sp, #12]
 8004aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa8:	b9a3      	cbnz	r3, 8004ad4 <_dtoa_r+0x914>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ab0:	0d1b      	lsrs	r3, r3, #20
 8004ab2:	051b      	lsls	r3, r3, #20
 8004ab4:	b12b      	cbz	r3, 8004ac2 <_dtoa_r+0x902>
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	f108 0801 	add.w	r8, r8, #1
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	9306      	str	r3, [sp, #24]
 8004ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f47f af74 	bne.w	80049b4 <_dtoa_r+0x7f4>
 8004acc:	2001      	movs	r0, #1
 8004ace:	e779      	b.n	80049c4 <_dtoa_r+0x804>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e7f6      	b.n	8004ac2 <_dtoa_r+0x902>
 8004ad4:	9b02      	ldr	r3, [sp, #8]
 8004ad6:	e7f4      	b.n	8004ac2 <_dtoa_r+0x902>
 8004ad8:	d085      	beq.n	80049e6 <_dtoa_r+0x826>
 8004ada:	4618      	mov	r0, r3
 8004adc:	301c      	adds	r0, #28
 8004ade:	e77d      	b.n	80049dc <_dtoa_r+0x81c>
 8004ae0:	40240000 	.word	0x40240000
 8004ae4:	9b01      	ldr	r3, [sp, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dc38      	bgt.n	8004b5c <_dtoa_r+0x99c>
 8004aea:	9b05      	ldr	r3, [sp, #20]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	dd35      	ble.n	8004b5c <_dtoa_r+0x99c>
 8004af0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	d10d      	bne.n	8004b16 <_dtoa_r+0x956>
 8004afa:	4631      	mov	r1, r6
 8004afc:	464b      	mov	r3, r9
 8004afe:	2205      	movs	r2, #5
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 f9c5 	bl	8004e90 <__multadd>
 8004b06:	4601      	mov	r1, r0
 8004b08:	4606      	mov	r6, r0
 8004b0a:	4658      	mov	r0, fp
 8004b0c:	f000 fbdc 	bl	80052c8 <__mcmp>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f73f adbd 	bgt.w	8004690 <_dtoa_r+0x4d0>
 8004b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b18:	9d00      	ldr	r5, [sp, #0]
 8004b1a:	ea6f 0a03 	mvn.w	sl, r3
 8004b1e:	f04f 0800 	mov.w	r8, #0
 8004b22:	4631      	mov	r1, r6
 8004b24:	4620      	mov	r0, r4
 8004b26:	f000 f991 	bl	8004e4c <_Bfree>
 8004b2a:	2f00      	cmp	r7, #0
 8004b2c:	f43f aeb4 	beq.w	8004898 <_dtoa_r+0x6d8>
 8004b30:	f1b8 0f00 	cmp.w	r8, #0
 8004b34:	d005      	beq.n	8004b42 <_dtoa_r+0x982>
 8004b36:	45b8      	cmp	r8, r7
 8004b38:	d003      	beq.n	8004b42 <_dtoa_r+0x982>
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 f985 	bl	8004e4c <_Bfree>
 8004b42:	4639      	mov	r1, r7
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 f981 	bl	8004e4c <_Bfree>
 8004b4a:	e6a5      	b.n	8004898 <_dtoa_r+0x6d8>
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	4637      	mov	r7, r6
 8004b50:	e7e1      	b.n	8004b16 <_dtoa_r+0x956>
 8004b52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004b54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004b58:	4637      	mov	r7, r6
 8004b5a:	e599      	b.n	8004690 <_dtoa_r+0x4d0>
 8004b5c:	9b08      	ldr	r3, [sp, #32]
 8004b5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80fd 	beq.w	8004d62 <_dtoa_r+0xba2>
 8004b68:	2d00      	cmp	r5, #0
 8004b6a:	dd05      	ble.n	8004b78 <_dtoa_r+0x9b8>
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fb3d 	bl	80051f0 <__lshift>
 8004b76:	4607      	mov	r7, r0
 8004b78:	9b06      	ldr	r3, [sp, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d05c      	beq.n	8004c38 <_dtoa_r+0xa78>
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 f923 	bl	8004dcc <_Balloc>
 8004b86:	4605      	mov	r5, r0
 8004b88:	b928      	cbnz	r0, 8004b96 <_dtoa_r+0x9d6>
 8004b8a:	4b80      	ldr	r3, [pc, #512]	; (8004d8c <_dtoa_r+0xbcc>)
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b92:	f7ff bb2e 	b.w	80041f2 <_dtoa_r+0x32>
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	3202      	adds	r2, #2
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	f107 010c 	add.w	r1, r7, #12
 8004ba0:	300c      	adds	r0, #12
 8004ba2:	f000 f905 	bl	8004db0 <memcpy>
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fb20 	bl	80051f0 <__lshift>
 8004bb0:	9b00      	ldr	r3, [sp, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	9b00      	ldr	r3, [sp, #0]
 8004bb8:	444b      	add	r3, r9
 8004bba:	9307      	str	r3, [sp, #28]
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	46b8      	mov	r8, r7
 8004bc4:	9306      	str	r3, [sp, #24]
 8004bc6:	4607      	mov	r7, r0
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	4631      	mov	r1, r6
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4658      	mov	r0, fp
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	f7ff fa69 	bl	80040a8 <quorem>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	3330      	adds	r3, #48	; 0x30
 8004bda:	9004      	str	r0, [sp, #16]
 8004bdc:	4641      	mov	r1, r8
 8004bde:	4658      	mov	r0, fp
 8004be0:	9308      	str	r3, [sp, #32]
 8004be2:	f000 fb71 	bl	80052c8 <__mcmp>
 8004be6:	463a      	mov	r2, r7
 8004be8:	4681      	mov	r9, r0
 8004bea:	4631      	mov	r1, r6
 8004bec:	4620      	mov	r0, r4
 8004bee:	f000 fb87 	bl	8005300 <__mdiff>
 8004bf2:	68c2      	ldr	r2, [r0, #12]
 8004bf4:	9b08      	ldr	r3, [sp, #32]
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	bb02      	cbnz	r2, 8004c3c <_dtoa_r+0xa7c>
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4658      	mov	r0, fp
 8004bfe:	f000 fb63 	bl	80052c8 <__mcmp>
 8004c02:	9b08      	ldr	r3, [sp, #32]
 8004c04:	4602      	mov	r2, r0
 8004c06:	4629      	mov	r1, r5
 8004c08:	4620      	mov	r0, r4
 8004c0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004c0e:	f000 f91d 	bl	8004e4c <_Bfree>
 8004c12:	9b05      	ldr	r3, [sp, #20]
 8004c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c16:	9d01      	ldr	r5, [sp, #4]
 8004c18:	ea43 0102 	orr.w	r1, r3, r2
 8004c1c:	9b06      	ldr	r3, [sp, #24]
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	9b08      	ldr	r3, [sp, #32]
 8004c22:	d10d      	bne.n	8004c40 <_dtoa_r+0xa80>
 8004c24:	2b39      	cmp	r3, #57	; 0x39
 8004c26:	d029      	beq.n	8004c7c <_dtoa_r+0xabc>
 8004c28:	f1b9 0f00 	cmp.w	r9, #0
 8004c2c:	dd01      	ble.n	8004c32 <_dtoa_r+0xa72>
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	3331      	adds	r3, #49	; 0x31
 8004c32:	9a02      	ldr	r2, [sp, #8]
 8004c34:	7013      	strb	r3, [r2, #0]
 8004c36:	e774      	b.n	8004b22 <_dtoa_r+0x962>
 8004c38:	4638      	mov	r0, r7
 8004c3a:	e7b9      	b.n	8004bb0 <_dtoa_r+0x9f0>
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	e7e2      	b.n	8004c06 <_dtoa_r+0xa46>
 8004c40:	f1b9 0f00 	cmp.w	r9, #0
 8004c44:	db06      	blt.n	8004c54 <_dtoa_r+0xa94>
 8004c46:	9905      	ldr	r1, [sp, #20]
 8004c48:	ea41 0909 	orr.w	r9, r1, r9
 8004c4c:	9906      	ldr	r1, [sp, #24]
 8004c4e:	ea59 0101 	orrs.w	r1, r9, r1
 8004c52:	d120      	bne.n	8004c96 <_dtoa_r+0xad6>
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	ddec      	ble.n	8004c32 <_dtoa_r+0xa72>
 8004c58:	4659      	mov	r1, fp
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	f000 fac6 	bl	80051f0 <__lshift>
 8004c64:	4631      	mov	r1, r6
 8004c66:	4683      	mov	fp, r0
 8004c68:	f000 fb2e 	bl	80052c8 <__mcmp>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	dc02      	bgt.n	8004c78 <_dtoa_r+0xab8>
 8004c72:	d1de      	bne.n	8004c32 <_dtoa_r+0xa72>
 8004c74:	07da      	lsls	r2, r3, #31
 8004c76:	d5dc      	bpl.n	8004c32 <_dtoa_r+0xa72>
 8004c78:	2b39      	cmp	r3, #57	; 0x39
 8004c7a:	d1d8      	bne.n	8004c2e <_dtoa_r+0xa6e>
 8004c7c:	9a02      	ldr	r2, [sp, #8]
 8004c7e:	2339      	movs	r3, #57	; 0x39
 8004c80:	7013      	strb	r3, [r2, #0]
 8004c82:	462b      	mov	r3, r5
 8004c84:	461d      	mov	r5, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c8c:	2a39      	cmp	r2, #57	; 0x39
 8004c8e:	d050      	beq.n	8004d32 <_dtoa_r+0xb72>
 8004c90:	3201      	adds	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e745      	b.n	8004b22 <_dtoa_r+0x962>
 8004c96:	2a00      	cmp	r2, #0
 8004c98:	dd03      	ble.n	8004ca2 <_dtoa_r+0xae2>
 8004c9a:	2b39      	cmp	r3, #57	; 0x39
 8004c9c:	d0ee      	beq.n	8004c7c <_dtoa_r+0xabc>
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	e7c7      	b.n	8004c32 <_dtoa_r+0xa72>
 8004ca2:	9a01      	ldr	r2, [sp, #4]
 8004ca4:	9907      	ldr	r1, [sp, #28]
 8004ca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004caa:	428a      	cmp	r2, r1
 8004cac:	d02a      	beq.n	8004d04 <_dtoa_r+0xb44>
 8004cae:	4659      	mov	r1, fp
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	220a      	movs	r2, #10
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 f8eb 	bl	8004e90 <__multadd>
 8004cba:	45b8      	cmp	r8, r7
 8004cbc:	4683      	mov	fp, r0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	f04f 020a 	mov.w	r2, #10
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	4620      	mov	r0, r4
 8004cca:	d107      	bne.n	8004cdc <_dtoa_r+0xb1c>
 8004ccc:	f000 f8e0 	bl	8004e90 <__multadd>
 8004cd0:	4680      	mov	r8, r0
 8004cd2:	4607      	mov	r7, r0
 8004cd4:	9b01      	ldr	r3, [sp, #4]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	e775      	b.n	8004bc8 <_dtoa_r+0xa08>
 8004cdc:	f000 f8d8 	bl	8004e90 <__multadd>
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4680      	mov	r8, r0
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	220a      	movs	r2, #10
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 f8d1 	bl	8004e90 <__multadd>
 8004cee:	4607      	mov	r7, r0
 8004cf0:	e7f0      	b.n	8004cd4 <_dtoa_r+0xb14>
 8004cf2:	f1b9 0f00 	cmp.w	r9, #0
 8004cf6:	9a00      	ldr	r2, [sp, #0]
 8004cf8:	bfcc      	ite	gt
 8004cfa:	464d      	movgt	r5, r9
 8004cfc:	2501      	movle	r5, #1
 8004cfe:	4415      	add	r5, r2
 8004d00:	f04f 0800 	mov.w	r8, #0
 8004d04:	4659      	mov	r1, fp
 8004d06:	2201      	movs	r2, #1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	f000 fa70 	bl	80051f0 <__lshift>
 8004d10:	4631      	mov	r1, r6
 8004d12:	4683      	mov	fp, r0
 8004d14:	f000 fad8 	bl	80052c8 <__mcmp>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	dcb2      	bgt.n	8004c82 <_dtoa_r+0xac2>
 8004d1c:	d102      	bne.n	8004d24 <_dtoa_r+0xb64>
 8004d1e:	9b01      	ldr	r3, [sp, #4]
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d4ae      	bmi.n	8004c82 <_dtoa_r+0xac2>
 8004d24:	462b      	mov	r3, r5
 8004d26:	461d      	mov	r5, r3
 8004d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d2c:	2a30      	cmp	r2, #48	; 0x30
 8004d2e:	d0fa      	beq.n	8004d26 <_dtoa_r+0xb66>
 8004d30:	e6f7      	b.n	8004b22 <_dtoa_r+0x962>
 8004d32:	9a00      	ldr	r2, [sp, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1a5      	bne.n	8004c84 <_dtoa_r+0xac4>
 8004d38:	f10a 0a01 	add.w	sl, sl, #1
 8004d3c:	2331      	movs	r3, #49	; 0x31
 8004d3e:	e779      	b.n	8004c34 <_dtoa_r+0xa74>
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <_dtoa_r+0xbd0>)
 8004d42:	f7ff baaf 	b.w	80042a4 <_dtoa_r+0xe4>
 8004d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f aa86 	bne.w	800425a <_dtoa_r+0x9a>
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <_dtoa_r+0xbd4>)
 8004d50:	f7ff baa8 	b.w	80042a4 <_dtoa_r+0xe4>
 8004d54:	f1b9 0f00 	cmp.w	r9, #0
 8004d58:	dc03      	bgt.n	8004d62 <_dtoa_r+0xba2>
 8004d5a:	9b05      	ldr	r3, [sp, #20]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	f73f aec9 	bgt.w	8004af4 <_dtoa_r+0x934>
 8004d62:	9d00      	ldr	r5, [sp, #0]
 8004d64:	4631      	mov	r1, r6
 8004d66:	4658      	mov	r0, fp
 8004d68:	f7ff f99e 	bl	80040a8 <quorem>
 8004d6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004d70:	f805 3b01 	strb.w	r3, [r5], #1
 8004d74:	9a00      	ldr	r2, [sp, #0]
 8004d76:	1aaa      	subs	r2, r5, r2
 8004d78:	4591      	cmp	r9, r2
 8004d7a:	ddba      	ble.n	8004cf2 <_dtoa_r+0xb32>
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	2300      	movs	r3, #0
 8004d80:	220a      	movs	r2, #10
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f884 	bl	8004e90 <__multadd>
 8004d88:	4683      	mov	fp, r0
 8004d8a:	e7eb      	b.n	8004d64 <_dtoa_r+0xba4>
 8004d8c:	08006263 	.word	0x08006263
 8004d90:	080061bc 	.word	0x080061bc
 8004d94:	080061e0 	.word	0x080061e0

08004d98 <_localeconv_r>:
 8004d98:	4800      	ldr	r0, [pc, #0]	; (8004d9c <_localeconv_r+0x4>)
 8004d9a:	4770      	bx	lr
 8004d9c:	20000160 	.word	0x20000160

08004da0 <malloc>:
 8004da0:	4b02      	ldr	r3, [pc, #8]	; (8004dac <malloc+0xc>)
 8004da2:	4601      	mov	r1, r0
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	f000 bbef 	b.w	8005588 <_malloc_r>
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <memcpy>:
 8004db0:	440a      	add	r2, r1
 8004db2:	4291      	cmp	r1, r2
 8004db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004db8:	d100      	bne.n	8004dbc <memcpy+0xc>
 8004dba:	4770      	bx	lr
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	d1f9      	bne.n	8004dbe <memcpy+0xe>
 8004dca:	bd10      	pop	{r4, pc}

08004dcc <_Balloc>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	b976      	cbnz	r6, 8004df4 <_Balloc+0x28>
 8004dd6:	2010      	movs	r0, #16
 8004dd8:	f7ff ffe2 	bl	8004da0 <malloc>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6260      	str	r0, [r4, #36]	; 0x24
 8004de0:	b920      	cbnz	r0, 8004dec <_Balloc+0x20>
 8004de2:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <_Balloc+0x78>)
 8004de4:	4818      	ldr	r0, [pc, #96]	; (8004e48 <_Balloc+0x7c>)
 8004de6:	2166      	movs	r1, #102	; 0x66
 8004de8:	f000 fc38 	bl	800565c <__assert_func>
 8004dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004df0:	6006      	str	r6, [r0, #0]
 8004df2:	60c6      	str	r6, [r0, #12]
 8004df4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004df6:	68f3      	ldr	r3, [r6, #12]
 8004df8:	b183      	cbz	r3, 8004e1c <_Balloc+0x50>
 8004dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e02:	b9b8      	cbnz	r0, 8004e34 <_Balloc+0x68>
 8004e04:	2101      	movs	r1, #1
 8004e06:	fa01 f605 	lsl.w	r6, r1, r5
 8004e0a:	1d72      	adds	r2, r6, #5
 8004e0c:	0092      	lsls	r2, r2, #2
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f000 fb5a 	bl	80054c8 <_calloc_r>
 8004e14:	b160      	cbz	r0, 8004e30 <_Balloc+0x64>
 8004e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e1a:	e00e      	b.n	8004e3a <_Balloc+0x6e>
 8004e1c:	2221      	movs	r2, #33	; 0x21
 8004e1e:	2104      	movs	r1, #4
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fb51 	bl	80054c8 <_calloc_r>
 8004e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e28:	60f0      	str	r0, [r6, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e4      	bne.n	8004dfa <_Balloc+0x2e>
 8004e30:	2000      	movs	r0, #0
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	6802      	ldr	r2, [r0, #0]
 8004e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e40:	e7f7      	b.n	8004e32 <_Balloc+0x66>
 8004e42:	bf00      	nop
 8004e44:	080061ed 	.word	0x080061ed
 8004e48:	08006274 	.word	0x08006274

08004e4c <_Bfree>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e50:	4605      	mov	r5, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	b976      	cbnz	r6, 8004e74 <_Bfree+0x28>
 8004e56:	2010      	movs	r0, #16
 8004e58:	f7ff ffa2 	bl	8004da0 <malloc>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6268      	str	r0, [r5, #36]	; 0x24
 8004e60:	b920      	cbnz	r0, 8004e6c <_Bfree+0x20>
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <_Bfree+0x3c>)
 8004e64:	4809      	ldr	r0, [pc, #36]	; (8004e8c <_Bfree+0x40>)
 8004e66:	218a      	movs	r1, #138	; 0x8a
 8004e68:	f000 fbf8 	bl	800565c <__assert_func>
 8004e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e70:	6006      	str	r6, [r0, #0]
 8004e72:	60c6      	str	r6, [r0, #12]
 8004e74:	b13c      	cbz	r4, 8004e86 <_Bfree+0x3a>
 8004e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e78:	6862      	ldr	r2, [r4, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e80:	6021      	str	r1, [r4, #0]
 8004e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	080061ed 	.word	0x080061ed
 8004e8c:	08006274 	.word	0x08006274

08004e90 <__multadd>:
 8004e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	690e      	ldr	r6, [r1, #16]
 8004e96:	4607      	mov	r7, r0
 8004e98:	4698      	mov	r8, r3
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f101 0014 	add.w	r0, r1, #20
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6805      	ldr	r5, [r0, #0]
 8004ea4:	b2a9      	uxth	r1, r5
 8004ea6:	fb02 8101 	mla	r1, r2, r1, r8
 8004eaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004eae:	0c2d      	lsrs	r5, r5, #16
 8004eb0:	fb02 c505 	mla	r5, r2, r5, ip
 8004eb4:	b289      	uxth	r1, r1
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004ebc:	429e      	cmp	r6, r3
 8004ebe:	f840 1b04 	str.w	r1, [r0], #4
 8004ec2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004ec6:	dcec      	bgt.n	8004ea2 <__multadd+0x12>
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	d022      	beq.n	8004f14 <__multadd+0x84>
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	42b3      	cmp	r3, r6
 8004ed2:	dc19      	bgt.n	8004f08 <__multadd+0x78>
 8004ed4:	6861      	ldr	r1, [r4, #4]
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	3101      	adds	r1, #1
 8004eda:	f7ff ff77 	bl	8004dcc <_Balloc>
 8004ede:	4605      	mov	r5, r0
 8004ee0:	b928      	cbnz	r0, 8004eee <__multadd+0x5e>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <__multadd+0x8c>)
 8004ee6:	480e      	ldr	r0, [pc, #56]	; (8004f20 <__multadd+0x90>)
 8004ee8:	21b5      	movs	r1, #181	; 0xb5
 8004eea:	f000 fbb7 	bl	800565c <__assert_func>
 8004eee:	6922      	ldr	r2, [r4, #16]
 8004ef0:	3202      	adds	r2, #2
 8004ef2:	f104 010c 	add.w	r1, r4, #12
 8004ef6:	0092      	lsls	r2, r2, #2
 8004ef8:	300c      	adds	r0, #12
 8004efa:	f7ff ff59 	bl	8004db0 <memcpy>
 8004efe:	4621      	mov	r1, r4
 8004f00:	4638      	mov	r0, r7
 8004f02:	f7ff ffa3 	bl	8004e4c <_Bfree>
 8004f06:	462c      	mov	r4, r5
 8004f08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004f12:	6126      	str	r6, [r4, #16]
 8004f14:	4620      	mov	r0, r4
 8004f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1a:	bf00      	nop
 8004f1c:	08006263 	.word	0x08006263
 8004f20:	08006274 	.word	0x08006274

08004f24 <__hi0bits>:
 8004f24:	0c03      	lsrs	r3, r0, #16
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	b9d3      	cbnz	r3, 8004f60 <__hi0bits+0x3c>
 8004f2a:	0400      	lsls	r0, r0, #16
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f32:	bf04      	itt	eq
 8004f34:	0200      	lsleq	r0, r0, #8
 8004f36:	3308      	addeq	r3, #8
 8004f38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f3c:	bf04      	itt	eq
 8004f3e:	0100      	lsleq	r0, r0, #4
 8004f40:	3304      	addeq	r3, #4
 8004f42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f46:	bf04      	itt	eq
 8004f48:	0080      	lsleq	r0, r0, #2
 8004f4a:	3302      	addeq	r3, #2
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	db05      	blt.n	8004f5c <__hi0bits+0x38>
 8004f50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f54:	f103 0301 	add.w	r3, r3, #1
 8004f58:	bf08      	it	eq
 8004f5a:	2320      	moveq	r3, #32
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	4770      	bx	lr
 8004f60:	2300      	movs	r3, #0
 8004f62:	e7e4      	b.n	8004f2e <__hi0bits+0xa>

08004f64 <__lo0bits>:
 8004f64:	6803      	ldr	r3, [r0, #0]
 8004f66:	f013 0207 	ands.w	r2, r3, #7
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	d00b      	beq.n	8004f86 <__lo0bits+0x22>
 8004f6e:	07da      	lsls	r2, r3, #31
 8004f70:	d424      	bmi.n	8004fbc <__lo0bits+0x58>
 8004f72:	0798      	lsls	r0, r3, #30
 8004f74:	bf49      	itett	mi
 8004f76:	085b      	lsrmi	r3, r3, #1
 8004f78:	089b      	lsrpl	r3, r3, #2
 8004f7a:	2001      	movmi	r0, #1
 8004f7c:	600b      	strmi	r3, [r1, #0]
 8004f7e:	bf5c      	itt	pl
 8004f80:	600b      	strpl	r3, [r1, #0]
 8004f82:	2002      	movpl	r0, #2
 8004f84:	4770      	bx	lr
 8004f86:	b298      	uxth	r0, r3
 8004f88:	b9b0      	cbnz	r0, 8004fb8 <__lo0bits+0x54>
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	2010      	movs	r0, #16
 8004f8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f92:	bf04      	itt	eq
 8004f94:	0a1b      	lsreq	r3, r3, #8
 8004f96:	3008      	addeq	r0, #8
 8004f98:	071a      	lsls	r2, r3, #28
 8004f9a:	bf04      	itt	eq
 8004f9c:	091b      	lsreq	r3, r3, #4
 8004f9e:	3004      	addeq	r0, #4
 8004fa0:	079a      	lsls	r2, r3, #30
 8004fa2:	bf04      	itt	eq
 8004fa4:	089b      	lsreq	r3, r3, #2
 8004fa6:	3002      	addeq	r0, #2
 8004fa8:	07da      	lsls	r2, r3, #31
 8004faa:	d403      	bmi.n	8004fb4 <__lo0bits+0x50>
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	f100 0001 	add.w	r0, r0, #1
 8004fb2:	d005      	beq.n	8004fc0 <__lo0bits+0x5c>
 8004fb4:	600b      	str	r3, [r1, #0]
 8004fb6:	4770      	bx	lr
 8004fb8:	4610      	mov	r0, r2
 8004fba:	e7e8      	b.n	8004f8e <__lo0bits+0x2a>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4770      	bx	lr
 8004fc0:	2020      	movs	r0, #32
 8004fc2:	4770      	bx	lr

08004fc4 <__i2b>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	2101      	movs	r1, #1
 8004fca:	f7ff feff 	bl	8004dcc <_Balloc>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	b928      	cbnz	r0, 8004fde <__i2b+0x1a>
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <__i2b+0x24>)
 8004fd4:	4805      	ldr	r0, [pc, #20]	; (8004fec <__i2b+0x28>)
 8004fd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fda:	f000 fb3f 	bl	800565c <__assert_func>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	6144      	str	r4, [r0, #20]
 8004fe2:	6103      	str	r3, [r0, #16]
 8004fe4:	bd10      	pop	{r4, pc}
 8004fe6:	bf00      	nop
 8004fe8:	08006263 	.word	0x08006263
 8004fec:	08006274 	.word	0x08006274

08004ff0 <__multiply>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	690a      	ldr	r2, [r1, #16]
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	bfb8      	it	lt
 8004ffe:	460b      	movlt	r3, r1
 8005000:	460d      	mov	r5, r1
 8005002:	bfbc      	itt	lt
 8005004:	4625      	movlt	r5, r4
 8005006:	461c      	movlt	r4, r3
 8005008:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800500c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005010:	68ab      	ldr	r3, [r5, #8]
 8005012:	6869      	ldr	r1, [r5, #4]
 8005014:	eb0a 0709 	add.w	r7, sl, r9
 8005018:	42bb      	cmp	r3, r7
 800501a:	b085      	sub	sp, #20
 800501c:	bfb8      	it	lt
 800501e:	3101      	addlt	r1, #1
 8005020:	f7ff fed4 	bl	8004dcc <_Balloc>
 8005024:	b930      	cbnz	r0, 8005034 <__multiply+0x44>
 8005026:	4602      	mov	r2, r0
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <__multiply+0x144>)
 800502a:	4843      	ldr	r0, [pc, #268]	; (8005138 <__multiply+0x148>)
 800502c:	f240 115d 	movw	r1, #349	; 0x15d
 8005030:	f000 fb14 	bl	800565c <__assert_func>
 8005034:	f100 0614 	add.w	r6, r0, #20
 8005038:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800503c:	4633      	mov	r3, r6
 800503e:	2200      	movs	r2, #0
 8005040:	4543      	cmp	r3, r8
 8005042:	d31e      	bcc.n	8005082 <__multiply+0x92>
 8005044:	f105 0c14 	add.w	ip, r5, #20
 8005048:	f104 0314 	add.w	r3, r4, #20
 800504c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005050:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005054:	9202      	str	r2, [sp, #8]
 8005056:	ebac 0205 	sub.w	r2, ip, r5
 800505a:	3a15      	subs	r2, #21
 800505c:	f022 0203 	bic.w	r2, r2, #3
 8005060:	3204      	adds	r2, #4
 8005062:	f105 0115 	add.w	r1, r5, #21
 8005066:	458c      	cmp	ip, r1
 8005068:	bf38      	it	cc
 800506a:	2204      	movcc	r2, #4
 800506c:	9201      	str	r2, [sp, #4]
 800506e:	9a02      	ldr	r2, [sp, #8]
 8005070:	9303      	str	r3, [sp, #12]
 8005072:	429a      	cmp	r2, r3
 8005074:	d808      	bhi.n	8005088 <__multiply+0x98>
 8005076:	2f00      	cmp	r7, #0
 8005078:	dc55      	bgt.n	8005126 <__multiply+0x136>
 800507a:	6107      	str	r7, [r0, #16]
 800507c:	b005      	add	sp, #20
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	f843 2b04 	str.w	r2, [r3], #4
 8005086:	e7db      	b.n	8005040 <__multiply+0x50>
 8005088:	f8b3 a000 	ldrh.w	sl, [r3]
 800508c:	f1ba 0f00 	cmp.w	sl, #0
 8005090:	d020      	beq.n	80050d4 <__multiply+0xe4>
 8005092:	f105 0e14 	add.w	lr, r5, #20
 8005096:	46b1      	mov	r9, r6
 8005098:	2200      	movs	r2, #0
 800509a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800509e:	f8d9 b000 	ldr.w	fp, [r9]
 80050a2:	b2a1      	uxth	r1, r4
 80050a4:	fa1f fb8b 	uxth.w	fp, fp
 80050a8:	fb0a b101 	mla	r1, sl, r1, fp
 80050ac:	4411      	add	r1, r2
 80050ae:	f8d9 2000 	ldr.w	r2, [r9]
 80050b2:	0c24      	lsrs	r4, r4, #16
 80050b4:	0c12      	lsrs	r2, r2, #16
 80050b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80050ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80050be:	b289      	uxth	r1, r1
 80050c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80050c4:	45f4      	cmp	ip, lr
 80050c6:	f849 1b04 	str.w	r1, [r9], #4
 80050ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80050ce:	d8e4      	bhi.n	800509a <__multiply+0xaa>
 80050d0:	9901      	ldr	r1, [sp, #4]
 80050d2:	5072      	str	r2, [r6, r1]
 80050d4:	9a03      	ldr	r2, [sp, #12]
 80050d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050da:	3304      	adds	r3, #4
 80050dc:	f1b9 0f00 	cmp.w	r9, #0
 80050e0:	d01f      	beq.n	8005122 <__multiply+0x132>
 80050e2:	6834      	ldr	r4, [r6, #0]
 80050e4:	f105 0114 	add.w	r1, r5, #20
 80050e8:	46b6      	mov	lr, r6
 80050ea:	f04f 0a00 	mov.w	sl, #0
 80050ee:	880a      	ldrh	r2, [r1, #0]
 80050f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80050f4:	fb09 b202 	mla	r2, r9, r2, fp
 80050f8:	4492      	add	sl, r2
 80050fa:	b2a4      	uxth	r4, r4
 80050fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005100:	f84e 4b04 	str.w	r4, [lr], #4
 8005104:	f851 4b04 	ldr.w	r4, [r1], #4
 8005108:	f8be 2000 	ldrh.w	r2, [lr]
 800510c:	0c24      	lsrs	r4, r4, #16
 800510e:	fb09 2404 	mla	r4, r9, r4, r2
 8005112:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005116:	458c      	cmp	ip, r1
 8005118:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800511c:	d8e7      	bhi.n	80050ee <__multiply+0xfe>
 800511e:	9a01      	ldr	r2, [sp, #4]
 8005120:	50b4      	str	r4, [r6, r2]
 8005122:	3604      	adds	r6, #4
 8005124:	e7a3      	b.n	800506e <__multiply+0x7e>
 8005126:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1a5      	bne.n	800507a <__multiply+0x8a>
 800512e:	3f01      	subs	r7, #1
 8005130:	e7a1      	b.n	8005076 <__multiply+0x86>
 8005132:	bf00      	nop
 8005134:	08006263 	.word	0x08006263
 8005138:	08006274 	.word	0x08006274

0800513c <__pow5mult>:
 800513c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005140:	4615      	mov	r5, r2
 8005142:	f012 0203 	ands.w	r2, r2, #3
 8005146:	4606      	mov	r6, r0
 8005148:	460f      	mov	r7, r1
 800514a:	d007      	beq.n	800515c <__pow5mult+0x20>
 800514c:	4c25      	ldr	r4, [pc, #148]	; (80051e4 <__pow5mult+0xa8>)
 800514e:	3a01      	subs	r2, #1
 8005150:	2300      	movs	r3, #0
 8005152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005156:	f7ff fe9b 	bl	8004e90 <__multadd>
 800515a:	4607      	mov	r7, r0
 800515c:	10ad      	asrs	r5, r5, #2
 800515e:	d03d      	beq.n	80051dc <__pow5mult+0xa0>
 8005160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005162:	b97c      	cbnz	r4, 8005184 <__pow5mult+0x48>
 8005164:	2010      	movs	r0, #16
 8005166:	f7ff fe1b 	bl	8004da0 <malloc>
 800516a:	4602      	mov	r2, r0
 800516c:	6270      	str	r0, [r6, #36]	; 0x24
 800516e:	b928      	cbnz	r0, 800517c <__pow5mult+0x40>
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <__pow5mult+0xac>)
 8005172:	481e      	ldr	r0, [pc, #120]	; (80051ec <__pow5mult+0xb0>)
 8005174:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005178:	f000 fa70 	bl	800565c <__assert_func>
 800517c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005180:	6004      	str	r4, [r0, #0]
 8005182:	60c4      	str	r4, [r0, #12]
 8005184:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800518c:	b94c      	cbnz	r4, 80051a2 <__pow5mult+0x66>
 800518e:	f240 2171 	movw	r1, #625	; 0x271
 8005192:	4630      	mov	r0, r6
 8005194:	f7ff ff16 	bl	8004fc4 <__i2b>
 8005198:	2300      	movs	r3, #0
 800519a:	f8c8 0008 	str.w	r0, [r8, #8]
 800519e:	4604      	mov	r4, r0
 80051a0:	6003      	str	r3, [r0, #0]
 80051a2:	f04f 0900 	mov.w	r9, #0
 80051a6:	07eb      	lsls	r3, r5, #31
 80051a8:	d50a      	bpl.n	80051c0 <__pow5mult+0x84>
 80051aa:	4639      	mov	r1, r7
 80051ac:	4622      	mov	r2, r4
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff ff1e 	bl	8004ff0 <__multiply>
 80051b4:	4639      	mov	r1, r7
 80051b6:	4680      	mov	r8, r0
 80051b8:	4630      	mov	r0, r6
 80051ba:	f7ff fe47 	bl	8004e4c <_Bfree>
 80051be:	4647      	mov	r7, r8
 80051c0:	106d      	asrs	r5, r5, #1
 80051c2:	d00b      	beq.n	80051dc <__pow5mult+0xa0>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	b938      	cbnz	r0, 80051d8 <__pow5mult+0x9c>
 80051c8:	4622      	mov	r2, r4
 80051ca:	4621      	mov	r1, r4
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ff0f 	bl	8004ff0 <__multiply>
 80051d2:	6020      	str	r0, [r4, #0]
 80051d4:	f8c0 9000 	str.w	r9, [r0]
 80051d8:	4604      	mov	r4, r0
 80051da:	e7e4      	b.n	80051a6 <__pow5mult+0x6a>
 80051dc:	4638      	mov	r0, r7
 80051de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e2:	bf00      	nop
 80051e4:	080063c8 	.word	0x080063c8
 80051e8:	080061ed 	.word	0x080061ed
 80051ec:	08006274 	.word	0x08006274

080051f0 <__lshift>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	460c      	mov	r4, r1
 80051f6:	6849      	ldr	r1, [r1, #4]
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	4607      	mov	r7, r0
 8005202:	4691      	mov	r9, r2
 8005204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005208:	f108 0601 	add.w	r6, r8, #1
 800520c:	42b3      	cmp	r3, r6
 800520e:	db0b      	blt.n	8005228 <__lshift+0x38>
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff fddb 	bl	8004dcc <_Balloc>
 8005216:	4605      	mov	r5, r0
 8005218:	b948      	cbnz	r0, 800522e <__lshift+0x3e>
 800521a:	4602      	mov	r2, r0
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <__lshift+0xd0>)
 800521e:	4829      	ldr	r0, [pc, #164]	; (80052c4 <__lshift+0xd4>)
 8005220:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005224:	f000 fa1a 	bl	800565c <__assert_func>
 8005228:	3101      	adds	r1, #1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	e7ee      	b.n	800520c <__lshift+0x1c>
 800522e:	2300      	movs	r3, #0
 8005230:	f100 0114 	add.w	r1, r0, #20
 8005234:	f100 0210 	add.w	r2, r0, #16
 8005238:	4618      	mov	r0, r3
 800523a:	4553      	cmp	r3, sl
 800523c:	db33      	blt.n	80052a6 <__lshift+0xb6>
 800523e:	6920      	ldr	r0, [r4, #16]
 8005240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005244:	f104 0314 	add.w	r3, r4, #20
 8005248:	f019 091f 	ands.w	r9, r9, #31
 800524c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005250:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005254:	d02b      	beq.n	80052ae <__lshift+0xbe>
 8005256:	f1c9 0e20 	rsb	lr, r9, #32
 800525a:	468a      	mov	sl, r1
 800525c:	2200      	movs	r2, #0
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	fa00 f009 	lsl.w	r0, r0, r9
 8005264:	4302      	orrs	r2, r0
 8005266:	f84a 2b04 	str.w	r2, [sl], #4
 800526a:	f853 2b04 	ldr.w	r2, [r3], #4
 800526e:	459c      	cmp	ip, r3
 8005270:	fa22 f20e 	lsr.w	r2, r2, lr
 8005274:	d8f3      	bhi.n	800525e <__lshift+0x6e>
 8005276:	ebac 0304 	sub.w	r3, ip, r4
 800527a:	3b15      	subs	r3, #21
 800527c:	f023 0303 	bic.w	r3, r3, #3
 8005280:	3304      	adds	r3, #4
 8005282:	f104 0015 	add.w	r0, r4, #21
 8005286:	4584      	cmp	ip, r0
 8005288:	bf38      	it	cc
 800528a:	2304      	movcc	r3, #4
 800528c:	50ca      	str	r2, [r1, r3]
 800528e:	b10a      	cbz	r2, 8005294 <__lshift+0xa4>
 8005290:	f108 0602 	add.w	r6, r8, #2
 8005294:	3e01      	subs	r6, #1
 8005296:	4638      	mov	r0, r7
 8005298:	612e      	str	r6, [r5, #16]
 800529a:	4621      	mov	r1, r4
 800529c:	f7ff fdd6 	bl	8004e4c <_Bfree>
 80052a0:	4628      	mov	r0, r5
 80052a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80052aa:	3301      	adds	r3, #1
 80052ac:	e7c5      	b.n	800523a <__lshift+0x4a>
 80052ae:	3904      	subs	r1, #4
 80052b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80052b8:	459c      	cmp	ip, r3
 80052ba:	d8f9      	bhi.n	80052b0 <__lshift+0xc0>
 80052bc:	e7ea      	b.n	8005294 <__lshift+0xa4>
 80052be:	bf00      	nop
 80052c0:	08006263 	.word	0x08006263
 80052c4:	08006274 	.word	0x08006274

080052c8 <__mcmp>:
 80052c8:	b530      	push	{r4, r5, lr}
 80052ca:	6902      	ldr	r2, [r0, #16]
 80052cc:	690c      	ldr	r4, [r1, #16]
 80052ce:	1b12      	subs	r2, r2, r4
 80052d0:	d10e      	bne.n	80052f0 <__mcmp+0x28>
 80052d2:	f100 0314 	add.w	r3, r0, #20
 80052d6:	3114      	adds	r1, #20
 80052d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80052dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80052e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	d003      	beq.n	80052f4 <__mcmp+0x2c>
 80052ec:	d305      	bcc.n	80052fa <__mcmp+0x32>
 80052ee:	2201      	movs	r2, #1
 80052f0:	4610      	mov	r0, r2
 80052f2:	bd30      	pop	{r4, r5, pc}
 80052f4:	4283      	cmp	r3, r0
 80052f6:	d3f3      	bcc.n	80052e0 <__mcmp+0x18>
 80052f8:	e7fa      	b.n	80052f0 <__mcmp+0x28>
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	e7f7      	b.n	80052f0 <__mcmp+0x28>

08005300 <__mdiff>:
 8005300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	460c      	mov	r4, r1
 8005306:	4606      	mov	r6, r0
 8005308:	4611      	mov	r1, r2
 800530a:	4620      	mov	r0, r4
 800530c:	4617      	mov	r7, r2
 800530e:	f7ff ffdb 	bl	80052c8 <__mcmp>
 8005312:	1e05      	subs	r5, r0, #0
 8005314:	d110      	bne.n	8005338 <__mdiff+0x38>
 8005316:	4629      	mov	r1, r5
 8005318:	4630      	mov	r0, r6
 800531a:	f7ff fd57 	bl	8004dcc <_Balloc>
 800531e:	b930      	cbnz	r0, 800532e <__mdiff+0x2e>
 8005320:	4b39      	ldr	r3, [pc, #228]	; (8005408 <__mdiff+0x108>)
 8005322:	4602      	mov	r2, r0
 8005324:	f240 2132 	movw	r1, #562	; 0x232
 8005328:	4838      	ldr	r0, [pc, #224]	; (800540c <__mdiff+0x10c>)
 800532a:	f000 f997 	bl	800565c <__assert_func>
 800532e:	2301      	movs	r3, #1
 8005330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005338:	bfa4      	itt	ge
 800533a:	463b      	movge	r3, r7
 800533c:	4627      	movge	r7, r4
 800533e:	4630      	mov	r0, r6
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	bfa6      	itte	ge
 8005344:	461c      	movge	r4, r3
 8005346:	2500      	movge	r5, #0
 8005348:	2501      	movlt	r5, #1
 800534a:	f7ff fd3f 	bl	8004dcc <_Balloc>
 800534e:	b920      	cbnz	r0, 800535a <__mdiff+0x5a>
 8005350:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <__mdiff+0x108>)
 8005352:	4602      	mov	r2, r0
 8005354:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005358:	e7e6      	b.n	8005328 <__mdiff+0x28>
 800535a:	693e      	ldr	r6, [r7, #16]
 800535c:	60c5      	str	r5, [r0, #12]
 800535e:	6925      	ldr	r5, [r4, #16]
 8005360:	f107 0114 	add.w	r1, r7, #20
 8005364:	f104 0914 	add.w	r9, r4, #20
 8005368:	f100 0e14 	add.w	lr, r0, #20
 800536c:	f107 0210 	add.w	r2, r7, #16
 8005370:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005374:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005378:	46f2      	mov	sl, lr
 800537a:	2700      	movs	r7, #0
 800537c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005380:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005384:	fa1f f883 	uxth.w	r8, r3
 8005388:	fa17 f78b 	uxtah	r7, r7, fp
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	eba7 0808 	sub.w	r8, r7, r8
 8005392:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005396:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800539a:	fa1f f888 	uxth.w	r8, r8
 800539e:	141f      	asrs	r7, r3, #16
 80053a0:	454d      	cmp	r5, r9
 80053a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80053a6:	f84a 3b04 	str.w	r3, [sl], #4
 80053aa:	d8e7      	bhi.n	800537c <__mdiff+0x7c>
 80053ac:	1b2b      	subs	r3, r5, r4
 80053ae:	3b15      	subs	r3, #21
 80053b0:	f023 0303 	bic.w	r3, r3, #3
 80053b4:	3304      	adds	r3, #4
 80053b6:	3415      	adds	r4, #21
 80053b8:	42a5      	cmp	r5, r4
 80053ba:	bf38      	it	cc
 80053bc:	2304      	movcc	r3, #4
 80053be:	4419      	add	r1, r3
 80053c0:	4473      	add	r3, lr
 80053c2:	469e      	mov	lr, r3
 80053c4:	460d      	mov	r5, r1
 80053c6:	4565      	cmp	r5, ip
 80053c8:	d30e      	bcc.n	80053e8 <__mdiff+0xe8>
 80053ca:	f10c 0203 	add.w	r2, ip, #3
 80053ce:	1a52      	subs	r2, r2, r1
 80053d0:	f022 0203 	bic.w	r2, r2, #3
 80053d4:	3903      	subs	r1, #3
 80053d6:	458c      	cmp	ip, r1
 80053d8:	bf38      	it	cc
 80053da:	2200      	movcc	r2, #0
 80053dc:	441a      	add	r2, r3
 80053de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80053e2:	b17b      	cbz	r3, 8005404 <__mdiff+0x104>
 80053e4:	6106      	str	r6, [r0, #16]
 80053e6:	e7a5      	b.n	8005334 <__mdiff+0x34>
 80053e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80053ec:	fa17 f488 	uxtah	r4, r7, r8
 80053f0:	1422      	asrs	r2, r4, #16
 80053f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80053f6:	b2a4      	uxth	r4, r4
 80053f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80053fc:	f84e 4b04 	str.w	r4, [lr], #4
 8005400:	1417      	asrs	r7, r2, #16
 8005402:	e7e0      	b.n	80053c6 <__mdiff+0xc6>
 8005404:	3e01      	subs	r6, #1
 8005406:	e7ea      	b.n	80053de <__mdiff+0xde>
 8005408:	08006263 	.word	0x08006263
 800540c:	08006274 	.word	0x08006274

08005410 <__d2b>:
 8005410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005414:	4689      	mov	r9, r1
 8005416:	2101      	movs	r1, #1
 8005418:	ec57 6b10 	vmov	r6, r7, d0
 800541c:	4690      	mov	r8, r2
 800541e:	f7ff fcd5 	bl	8004dcc <_Balloc>
 8005422:	4604      	mov	r4, r0
 8005424:	b930      	cbnz	r0, 8005434 <__d2b+0x24>
 8005426:	4602      	mov	r2, r0
 8005428:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <__d2b+0xb0>)
 800542a:	4826      	ldr	r0, [pc, #152]	; (80054c4 <__d2b+0xb4>)
 800542c:	f240 310a 	movw	r1, #778	; 0x30a
 8005430:	f000 f914 	bl	800565c <__assert_func>
 8005434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800543c:	bb35      	cbnz	r5, 800548c <__d2b+0x7c>
 800543e:	2e00      	cmp	r6, #0
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	d028      	beq.n	8005496 <__d2b+0x86>
 8005444:	4668      	mov	r0, sp
 8005446:	9600      	str	r6, [sp, #0]
 8005448:	f7ff fd8c 	bl	8004f64 <__lo0bits>
 800544c:	9900      	ldr	r1, [sp, #0]
 800544e:	b300      	cbz	r0, 8005492 <__d2b+0x82>
 8005450:	9a01      	ldr	r2, [sp, #4]
 8005452:	f1c0 0320 	rsb	r3, r0, #32
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	430b      	orrs	r3, r1
 800545c:	40c2      	lsrs	r2, r0
 800545e:	6163      	str	r3, [r4, #20]
 8005460:	9201      	str	r2, [sp, #4]
 8005462:	9b01      	ldr	r3, [sp, #4]
 8005464:	61a3      	str	r3, [r4, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf14      	ite	ne
 800546a:	2202      	movne	r2, #2
 800546c:	2201      	moveq	r2, #1
 800546e:	6122      	str	r2, [r4, #16]
 8005470:	b1d5      	cbz	r5, 80054a8 <__d2b+0x98>
 8005472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005476:	4405      	add	r5, r0
 8005478:	f8c9 5000 	str.w	r5, [r9]
 800547c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005480:	f8c8 0000 	str.w	r0, [r8]
 8005484:	4620      	mov	r0, r4
 8005486:	b003      	add	sp, #12
 8005488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800548c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005490:	e7d5      	b.n	800543e <__d2b+0x2e>
 8005492:	6161      	str	r1, [r4, #20]
 8005494:	e7e5      	b.n	8005462 <__d2b+0x52>
 8005496:	a801      	add	r0, sp, #4
 8005498:	f7ff fd64 	bl	8004f64 <__lo0bits>
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	6163      	str	r3, [r4, #20]
 80054a0:	2201      	movs	r2, #1
 80054a2:	6122      	str	r2, [r4, #16]
 80054a4:	3020      	adds	r0, #32
 80054a6:	e7e3      	b.n	8005470 <__d2b+0x60>
 80054a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054b0:	f8c9 0000 	str.w	r0, [r9]
 80054b4:	6918      	ldr	r0, [r3, #16]
 80054b6:	f7ff fd35 	bl	8004f24 <__hi0bits>
 80054ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80054be:	e7df      	b.n	8005480 <__d2b+0x70>
 80054c0:	08006263 	.word	0x08006263
 80054c4:	08006274 	.word	0x08006274

080054c8 <_calloc_r>:
 80054c8:	b513      	push	{r0, r1, r4, lr}
 80054ca:	434a      	muls	r2, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	9201      	str	r2, [sp, #4]
 80054d0:	f000 f85a 	bl	8005588 <_malloc_r>
 80054d4:	4604      	mov	r4, r0
 80054d6:	b118      	cbz	r0, 80054e0 <_calloc_r+0x18>
 80054d8:	9a01      	ldr	r2, [sp, #4]
 80054da:	2100      	movs	r1, #0
 80054dc:	f7fe f972 	bl	80037c4 <memset>
 80054e0:	4620      	mov	r0, r4
 80054e2:	b002      	add	sp, #8
 80054e4:	bd10      	pop	{r4, pc}
	...

080054e8 <_free_r>:
 80054e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ea:	2900      	cmp	r1, #0
 80054ec:	d048      	beq.n	8005580 <_free_r+0x98>
 80054ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f2:	9001      	str	r0, [sp, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f1a1 0404 	sub.w	r4, r1, #4
 80054fa:	bfb8      	it	lt
 80054fc:	18e4      	addlt	r4, r4, r3
 80054fe:	f000 f8ef 	bl	80056e0 <__malloc_lock>
 8005502:	4a20      	ldr	r2, [pc, #128]	; (8005584 <_free_r+0x9c>)
 8005504:	9801      	ldr	r0, [sp, #4]
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	4615      	mov	r5, r2
 800550a:	b933      	cbnz	r3, 800551a <_free_r+0x32>
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6014      	str	r4, [r2, #0]
 8005510:	b003      	add	sp, #12
 8005512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005516:	f000 b8e9 	b.w	80056ec <__malloc_unlock>
 800551a:	42a3      	cmp	r3, r4
 800551c:	d90b      	bls.n	8005536 <_free_r+0x4e>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	1862      	adds	r2, r4, r1
 8005522:	4293      	cmp	r3, r2
 8005524:	bf04      	itt	eq
 8005526:	681a      	ldreq	r2, [r3, #0]
 8005528:	685b      	ldreq	r3, [r3, #4]
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	bf04      	itt	eq
 800552e:	1852      	addeq	r2, r2, r1
 8005530:	6022      	streq	r2, [r4, #0]
 8005532:	602c      	str	r4, [r5, #0]
 8005534:	e7ec      	b.n	8005510 <_free_r+0x28>
 8005536:	461a      	mov	r2, r3
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b10b      	cbz	r3, 8005540 <_free_r+0x58>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d9fa      	bls.n	8005536 <_free_r+0x4e>
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	1855      	adds	r5, r2, r1
 8005544:	42a5      	cmp	r5, r4
 8005546:	d10b      	bne.n	8005560 <_free_r+0x78>
 8005548:	6824      	ldr	r4, [r4, #0]
 800554a:	4421      	add	r1, r4
 800554c:	1854      	adds	r4, r2, r1
 800554e:	42a3      	cmp	r3, r4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	d1dd      	bne.n	8005510 <_free_r+0x28>
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	4421      	add	r1, r4
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	e7d7      	b.n	8005510 <_free_r+0x28>
 8005560:	d902      	bls.n	8005568 <_free_r+0x80>
 8005562:	230c      	movs	r3, #12
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	e7d3      	b.n	8005510 <_free_r+0x28>
 8005568:	6825      	ldr	r5, [r4, #0]
 800556a:	1961      	adds	r1, r4, r5
 800556c:	428b      	cmp	r3, r1
 800556e:	bf04      	itt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	bf04      	itt	eq
 8005578:	1949      	addeq	r1, r1, r5
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	6054      	str	r4, [r2, #4]
 800557e:	e7c7      	b.n	8005510 <_free_r+0x28>
 8005580:	b003      	add	sp, #12
 8005582:	bd30      	pop	{r4, r5, pc}
 8005584:	200001fc 	.word	0x200001fc

08005588 <_malloc_r>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	1ccd      	adds	r5, r1, #3
 800558c:	f025 0503 	bic.w	r5, r5, #3
 8005590:	3508      	adds	r5, #8
 8005592:	2d0c      	cmp	r5, #12
 8005594:	bf38      	it	cc
 8005596:	250c      	movcc	r5, #12
 8005598:	2d00      	cmp	r5, #0
 800559a:	4606      	mov	r6, r0
 800559c:	db01      	blt.n	80055a2 <_malloc_r+0x1a>
 800559e:	42a9      	cmp	r1, r5
 80055a0:	d903      	bls.n	80055aa <_malloc_r+0x22>
 80055a2:	230c      	movs	r3, #12
 80055a4:	6033      	str	r3, [r6, #0]
 80055a6:	2000      	movs	r0, #0
 80055a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055aa:	f000 f899 	bl	80056e0 <__malloc_lock>
 80055ae:	4921      	ldr	r1, [pc, #132]	; (8005634 <_malloc_r+0xac>)
 80055b0:	680a      	ldr	r2, [r1, #0]
 80055b2:	4614      	mov	r4, r2
 80055b4:	b99c      	cbnz	r4, 80055de <_malloc_r+0x56>
 80055b6:	4f20      	ldr	r7, [pc, #128]	; (8005638 <_malloc_r+0xb0>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b923      	cbnz	r3, 80055c6 <_malloc_r+0x3e>
 80055bc:	4621      	mov	r1, r4
 80055be:	4630      	mov	r0, r6
 80055c0:	f000 f83c 	bl	800563c <_sbrk_r>
 80055c4:	6038      	str	r0, [r7, #0]
 80055c6:	4629      	mov	r1, r5
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 f837 	bl	800563c <_sbrk_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	d123      	bne.n	800561a <_malloc_r+0x92>
 80055d2:	230c      	movs	r3, #12
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 f888 	bl	80056ec <__malloc_unlock>
 80055dc:	e7e3      	b.n	80055a6 <_malloc_r+0x1e>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	1b5b      	subs	r3, r3, r5
 80055e2:	d417      	bmi.n	8005614 <_malloc_r+0x8c>
 80055e4:	2b0b      	cmp	r3, #11
 80055e6:	d903      	bls.n	80055f0 <_malloc_r+0x68>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	441c      	add	r4, r3
 80055ec:	6025      	str	r5, [r4, #0]
 80055ee:	e004      	b.n	80055fa <_malloc_r+0x72>
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	42a2      	cmp	r2, r4
 80055f4:	bf0c      	ite	eq
 80055f6:	600b      	streq	r3, [r1, #0]
 80055f8:	6053      	strne	r3, [r2, #4]
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 f876 	bl	80056ec <__malloc_unlock>
 8005600:	f104 000b 	add.w	r0, r4, #11
 8005604:	1d23      	adds	r3, r4, #4
 8005606:	f020 0007 	bic.w	r0, r0, #7
 800560a:	1ac2      	subs	r2, r0, r3
 800560c:	d0cc      	beq.n	80055a8 <_malloc_r+0x20>
 800560e:	1a1b      	subs	r3, r3, r0
 8005610:	50a3      	str	r3, [r4, r2]
 8005612:	e7c9      	b.n	80055a8 <_malloc_r+0x20>
 8005614:	4622      	mov	r2, r4
 8005616:	6864      	ldr	r4, [r4, #4]
 8005618:	e7cc      	b.n	80055b4 <_malloc_r+0x2c>
 800561a:	1cc4      	adds	r4, r0, #3
 800561c:	f024 0403 	bic.w	r4, r4, #3
 8005620:	42a0      	cmp	r0, r4
 8005622:	d0e3      	beq.n	80055ec <_malloc_r+0x64>
 8005624:	1a21      	subs	r1, r4, r0
 8005626:	4630      	mov	r0, r6
 8005628:	f000 f808 	bl	800563c <_sbrk_r>
 800562c:	3001      	adds	r0, #1
 800562e:	d1dd      	bne.n	80055ec <_malloc_r+0x64>
 8005630:	e7cf      	b.n	80055d2 <_malloc_r+0x4a>
 8005632:	bf00      	nop
 8005634:	200001fc 	.word	0x200001fc
 8005638:	20000200 	.word	0x20000200

0800563c <_sbrk_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d06      	ldr	r5, [pc, #24]	; (8005658 <_sbrk_r+0x1c>)
 8005640:	2300      	movs	r3, #0
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	f7fb ff3a 	bl	80014c0 <_sbrk>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_sbrk_r+0x1a>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_sbrk_r+0x1a>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	200002a0 	.word	0x200002a0

0800565c <__assert_func>:
 800565c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800565e:	4614      	mov	r4, r2
 8005660:	461a      	mov	r2, r3
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <__assert_func+0x2c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4605      	mov	r5, r0
 8005668:	68d8      	ldr	r0, [r3, #12]
 800566a:	b14c      	cbz	r4, 8005680 <__assert_func+0x24>
 800566c:	4b07      	ldr	r3, [pc, #28]	; (800568c <__assert_func+0x30>)
 800566e:	9100      	str	r1, [sp, #0]
 8005670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005674:	4906      	ldr	r1, [pc, #24]	; (8005690 <__assert_func+0x34>)
 8005676:	462b      	mov	r3, r5
 8005678:	f000 f80e 	bl	8005698 <fiprintf>
 800567c:	f000 fa64 	bl	8005b48 <abort>
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <__assert_func+0x38>)
 8005682:	461c      	mov	r4, r3
 8005684:	e7f3      	b.n	800566e <__assert_func+0x12>
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c
 800568c:	080063d4 	.word	0x080063d4
 8005690:	080063e1 	.word	0x080063e1
 8005694:	0800640f 	.word	0x0800640f

08005698 <fiprintf>:
 8005698:	b40e      	push	{r1, r2, r3}
 800569a:	b503      	push	{r0, r1, lr}
 800569c:	4601      	mov	r1, r0
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	4805      	ldr	r0, [pc, #20]	; (80056b8 <fiprintf+0x20>)
 80056a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a6:	6800      	ldr	r0, [r0, #0]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	f000 f84f 	bl	800574c <_vfiprintf_r>
 80056ae:	b002      	add	sp, #8
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	b003      	add	sp, #12
 80056b6:	4770      	bx	lr
 80056b8:	2000000c 	.word	0x2000000c

080056bc <__ascii_mbtowc>:
 80056bc:	b082      	sub	sp, #8
 80056be:	b901      	cbnz	r1, 80056c2 <__ascii_mbtowc+0x6>
 80056c0:	a901      	add	r1, sp, #4
 80056c2:	b142      	cbz	r2, 80056d6 <__ascii_mbtowc+0x1a>
 80056c4:	b14b      	cbz	r3, 80056da <__ascii_mbtowc+0x1e>
 80056c6:	7813      	ldrb	r3, [r2, #0]
 80056c8:	600b      	str	r3, [r1, #0]
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	1e10      	subs	r0, r2, #0
 80056ce:	bf18      	it	ne
 80056d0:	2001      	movne	r0, #1
 80056d2:	b002      	add	sp, #8
 80056d4:	4770      	bx	lr
 80056d6:	4610      	mov	r0, r2
 80056d8:	e7fb      	b.n	80056d2 <__ascii_mbtowc+0x16>
 80056da:	f06f 0001 	mvn.w	r0, #1
 80056de:	e7f8      	b.n	80056d2 <__ascii_mbtowc+0x16>

080056e0 <__malloc_lock>:
 80056e0:	4801      	ldr	r0, [pc, #4]	; (80056e8 <__malloc_lock+0x8>)
 80056e2:	f000 bbf1 	b.w	8005ec8 <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	200002a8 	.word	0x200002a8

080056ec <__malloc_unlock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__malloc_unlock+0x8>)
 80056ee:	f000 bbec 	b.w	8005eca <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	200002a8 	.word	0x200002a8

080056f8 <__sfputc_r>:
 80056f8:	6893      	ldr	r3, [r2, #8]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	b410      	push	{r4}
 8005700:	6093      	str	r3, [r2, #8]
 8005702:	da08      	bge.n	8005716 <__sfputc_r+0x1e>
 8005704:	6994      	ldr	r4, [r2, #24]
 8005706:	42a3      	cmp	r3, r4
 8005708:	db01      	blt.n	800570e <__sfputc_r+0x16>
 800570a:	290a      	cmp	r1, #10
 800570c:	d103      	bne.n	8005716 <__sfputc_r+0x1e>
 800570e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005712:	f000 b94b 	b.w	80059ac <__swbuf_r>
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	1c58      	adds	r0, r3, #1
 800571a:	6010      	str	r0, [r2, #0]
 800571c:	7019      	strb	r1, [r3, #0]
 800571e:	4608      	mov	r0, r1
 8005720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005724:	4770      	bx	lr

08005726 <__sfputs_r>:
 8005726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005728:	4606      	mov	r6, r0
 800572a:	460f      	mov	r7, r1
 800572c:	4614      	mov	r4, r2
 800572e:	18d5      	adds	r5, r2, r3
 8005730:	42ac      	cmp	r4, r5
 8005732:	d101      	bne.n	8005738 <__sfputs_r+0x12>
 8005734:	2000      	movs	r0, #0
 8005736:	e007      	b.n	8005748 <__sfputs_r+0x22>
 8005738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573c:	463a      	mov	r2, r7
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ffda 	bl	80056f8 <__sfputc_r>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d1f3      	bne.n	8005730 <__sfputs_r+0xa>
 8005748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800574c <_vfiprintf_r>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	460d      	mov	r5, r1
 8005752:	b09d      	sub	sp, #116	; 0x74
 8005754:	4614      	mov	r4, r2
 8005756:	4698      	mov	r8, r3
 8005758:	4606      	mov	r6, r0
 800575a:	b118      	cbz	r0, 8005764 <_vfiprintf_r+0x18>
 800575c:	6983      	ldr	r3, [r0, #24]
 800575e:	b90b      	cbnz	r3, 8005764 <_vfiprintf_r+0x18>
 8005760:	f000 fb14 	bl	8005d8c <__sinit>
 8005764:	4b89      	ldr	r3, [pc, #548]	; (800598c <_vfiprintf_r+0x240>)
 8005766:	429d      	cmp	r5, r3
 8005768:	d11b      	bne.n	80057a2 <_vfiprintf_r+0x56>
 800576a:	6875      	ldr	r5, [r6, #4]
 800576c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800576e:	07d9      	lsls	r1, r3, #31
 8005770:	d405      	bmi.n	800577e <_vfiprintf_r+0x32>
 8005772:	89ab      	ldrh	r3, [r5, #12]
 8005774:	059a      	lsls	r2, r3, #22
 8005776:	d402      	bmi.n	800577e <_vfiprintf_r+0x32>
 8005778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800577a:	f000 fba5 	bl	8005ec8 <__retarget_lock_acquire_recursive>
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	071b      	lsls	r3, r3, #28
 8005782:	d501      	bpl.n	8005788 <_vfiprintf_r+0x3c>
 8005784:	692b      	ldr	r3, [r5, #16]
 8005786:	b9eb      	cbnz	r3, 80057c4 <_vfiprintf_r+0x78>
 8005788:	4629      	mov	r1, r5
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f96e 	bl	8005a6c <__swsetup_r>
 8005790:	b1c0      	cbz	r0, 80057c4 <_vfiprintf_r+0x78>
 8005792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005794:	07dc      	lsls	r4, r3, #31
 8005796:	d50e      	bpl.n	80057b6 <_vfiprintf_r+0x6a>
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	b01d      	add	sp, #116	; 0x74
 800579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a2:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <_vfiprintf_r+0x244>)
 80057a4:	429d      	cmp	r5, r3
 80057a6:	d101      	bne.n	80057ac <_vfiprintf_r+0x60>
 80057a8:	68b5      	ldr	r5, [r6, #8]
 80057aa:	e7df      	b.n	800576c <_vfiprintf_r+0x20>
 80057ac:	4b79      	ldr	r3, [pc, #484]	; (8005994 <_vfiprintf_r+0x248>)
 80057ae:	429d      	cmp	r5, r3
 80057b0:	bf08      	it	eq
 80057b2:	68f5      	ldreq	r5, [r6, #12]
 80057b4:	e7da      	b.n	800576c <_vfiprintf_r+0x20>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	0598      	lsls	r0, r3, #22
 80057ba:	d4ed      	bmi.n	8005798 <_vfiprintf_r+0x4c>
 80057bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057be:	f000 fb84 	bl	8005eca <__retarget_lock_release_recursive>
 80057c2:	e7e9      	b.n	8005798 <_vfiprintf_r+0x4c>
 80057c4:	2300      	movs	r3, #0
 80057c6:	9309      	str	r3, [sp, #36]	; 0x24
 80057c8:	2320      	movs	r3, #32
 80057ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80057d2:	2330      	movs	r3, #48	; 0x30
 80057d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005998 <_vfiprintf_r+0x24c>
 80057d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057dc:	f04f 0901 	mov.w	r9, #1
 80057e0:	4623      	mov	r3, r4
 80057e2:	469a      	mov	sl, r3
 80057e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057e8:	b10a      	cbz	r2, 80057ee <_vfiprintf_r+0xa2>
 80057ea:	2a25      	cmp	r2, #37	; 0x25
 80057ec:	d1f9      	bne.n	80057e2 <_vfiprintf_r+0x96>
 80057ee:	ebba 0b04 	subs.w	fp, sl, r4
 80057f2:	d00b      	beq.n	800580c <_vfiprintf_r+0xc0>
 80057f4:	465b      	mov	r3, fp
 80057f6:	4622      	mov	r2, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7ff ff93 	bl	8005726 <__sfputs_r>
 8005800:	3001      	adds	r0, #1
 8005802:	f000 80aa 	beq.w	800595a <_vfiprintf_r+0x20e>
 8005806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005808:	445a      	add	r2, fp
 800580a:	9209      	str	r2, [sp, #36]	; 0x24
 800580c:	f89a 3000 	ldrb.w	r3, [sl]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a2 	beq.w	800595a <_vfiprintf_r+0x20e>
 8005816:	2300      	movs	r3, #0
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005820:	f10a 0a01 	add.w	sl, sl, #1
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	9307      	str	r3, [sp, #28]
 8005828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800582c:	931a      	str	r3, [sp, #104]	; 0x68
 800582e:	4654      	mov	r4, sl
 8005830:	2205      	movs	r2, #5
 8005832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005836:	4858      	ldr	r0, [pc, #352]	; (8005998 <_vfiprintf_r+0x24c>)
 8005838:	f7fa fcf2 	bl	8000220 <memchr>
 800583c:	9a04      	ldr	r2, [sp, #16]
 800583e:	b9d8      	cbnz	r0, 8005878 <_vfiprintf_r+0x12c>
 8005840:	06d1      	lsls	r1, r2, #27
 8005842:	bf44      	itt	mi
 8005844:	2320      	movmi	r3, #32
 8005846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800584a:	0713      	lsls	r3, r2, #28
 800584c:	bf44      	itt	mi
 800584e:	232b      	movmi	r3, #43	; 0x2b
 8005850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005854:	f89a 3000 	ldrb.w	r3, [sl]
 8005858:	2b2a      	cmp	r3, #42	; 0x2a
 800585a:	d015      	beq.n	8005888 <_vfiprintf_r+0x13c>
 800585c:	9a07      	ldr	r2, [sp, #28]
 800585e:	4654      	mov	r4, sl
 8005860:	2000      	movs	r0, #0
 8005862:	f04f 0c0a 	mov.w	ip, #10
 8005866:	4621      	mov	r1, r4
 8005868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800586c:	3b30      	subs	r3, #48	; 0x30
 800586e:	2b09      	cmp	r3, #9
 8005870:	d94e      	bls.n	8005910 <_vfiprintf_r+0x1c4>
 8005872:	b1b0      	cbz	r0, 80058a2 <_vfiprintf_r+0x156>
 8005874:	9207      	str	r2, [sp, #28]
 8005876:	e014      	b.n	80058a2 <_vfiprintf_r+0x156>
 8005878:	eba0 0308 	sub.w	r3, r0, r8
 800587c:	fa09 f303 	lsl.w	r3, r9, r3
 8005880:	4313      	orrs	r3, r2
 8005882:	9304      	str	r3, [sp, #16]
 8005884:	46a2      	mov	sl, r4
 8005886:	e7d2      	b.n	800582e <_vfiprintf_r+0xe2>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	1d19      	adds	r1, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9103      	str	r1, [sp, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfbb      	ittet	lt
 8005894:	425b      	neglt	r3, r3
 8005896:	f042 0202 	orrlt.w	r2, r2, #2
 800589a:	9307      	strge	r3, [sp, #28]
 800589c:	9307      	strlt	r3, [sp, #28]
 800589e:	bfb8      	it	lt
 80058a0:	9204      	strlt	r2, [sp, #16]
 80058a2:	7823      	ldrb	r3, [r4, #0]
 80058a4:	2b2e      	cmp	r3, #46	; 0x2e
 80058a6:	d10c      	bne.n	80058c2 <_vfiprintf_r+0x176>
 80058a8:	7863      	ldrb	r3, [r4, #1]
 80058aa:	2b2a      	cmp	r3, #42	; 0x2a
 80058ac:	d135      	bne.n	800591a <_vfiprintf_r+0x1ce>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	1d1a      	adds	r2, r3, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	9203      	str	r2, [sp, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfb8      	it	lt
 80058ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80058be:	3402      	adds	r4, #2
 80058c0:	9305      	str	r3, [sp, #20]
 80058c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059a8 <_vfiprintf_r+0x25c>
 80058c6:	7821      	ldrb	r1, [r4, #0]
 80058c8:	2203      	movs	r2, #3
 80058ca:	4650      	mov	r0, sl
 80058cc:	f7fa fca8 	bl	8000220 <memchr>
 80058d0:	b140      	cbz	r0, 80058e4 <_vfiprintf_r+0x198>
 80058d2:	2340      	movs	r3, #64	; 0x40
 80058d4:	eba0 000a 	sub.w	r0, r0, sl
 80058d8:	fa03 f000 	lsl.w	r0, r3, r0
 80058dc:	9b04      	ldr	r3, [sp, #16]
 80058de:	4303      	orrs	r3, r0
 80058e0:	3401      	adds	r4, #1
 80058e2:	9304      	str	r3, [sp, #16]
 80058e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e8:	482c      	ldr	r0, [pc, #176]	; (800599c <_vfiprintf_r+0x250>)
 80058ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058ee:	2206      	movs	r2, #6
 80058f0:	f7fa fc96 	bl	8000220 <memchr>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d03f      	beq.n	8005978 <_vfiprintf_r+0x22c>
 80058f8:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <_vfiprintf_r+0x254>)
 80058fa:	bb1b      	cbnz	r3, 8005944 <_vfiprintf_r+0x1f8>
 80058fc:	9b03      	ldr	r3, [sp, #12]
 80058fe:	3307      	adds	r3, #7
 8005900:	f023 0307 	bic.w	r3, r3, #7
 8005904:	3308      	adds	r3, #8
 8005906:	9303      	str	r3, [sp, #12]
 8005908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590a:	443b      	add	r3, r7
 800590c:	9309      	str	r3, [sp, #36]	; 0x24
 800590e:	e767      	b.n	80057e0 <_vfiprintf_r+0x94>
 8005910:	fb0c 3202 	mla	r2, ip, r2, r3
 8005914:	460c      	mov	r4, r1
 8005916:	2001      	movs	r0, #1
 8005918:	e7a5      	b.n	8005866 <_vfiprintf_r+0x11a>
 800591a:	2300      	movs	r3, #0
 800591c:	3401      	adds	r4, #1
 800591e:	9305      	str	r3, [sp, #20]
 8005920:	4619      	mov	r1, r3
 8005922:	f04f 0c0a 	mov.w	ip, #10
 8005926:	4620      	mov	r0, r4
 8005928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800592c:	3a30      	subs	r2, #48	; 0x30
 800592e:	2a09      	cmp	r2, #9
 8005930:	d903      	bls.n	800593a <_vfiprintf_r+0x1ee>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0c5      	beq.n	80058c2 <_vfiprintf_r+0x176>
 8005936:	9105      	str	r1, [sp, #20]
 8005938:	e7c3      	b.n	80058c2 <_vfiprintf_r+0x176>
 800593a:	fb0c 2101 	mla	r1, ip, r1, r2
 800593e:	4604      	mov	r4, r0
 8005940:	2301      	movs	r3, #1
 8005942:	e7f0      	b.n	8005926 <_vfiprintf_r+0x1da>
 8005944:	ab03      	add	r3, sp, #12
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	462a      	mov	r2, r5
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <_vfiprintf_r+0x258>)
 800594c:	a904      	add	r1, sp, #16
 800594e:	4630      	mov	r0, r6
 8005950:	f7fd ffe0 	bl	8003914 <_printf_float>
 8005954:	4607      	mov	r7, r0
 8005956:	1c78      	adds	r0, r7, #1
 8005958:	d1d6      	bne.n	8005908 <_vfiprintf_r+0x1bc>
 800595a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800595c:	07d9      	lsls	r1, r3, #31
 800595e:	d405      	bmi.n	800596c <_vfiprintf_r+0x220>
 8005960:	89ab      	ldrh	r3, [r5, #12]
 8005962:	059a      	lsls	r2, r3, #22
 8005964:	d402      	bmi.n	800596c <_vfiprintf_r+0x220>
 8005966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005968:	f000 faaf 	bl	8005eca <__retarget_lock_release_recursive>
 800596c:	89ab      	ldrh	r3, [r5, #12]
 800596e:	065b      	lsls	r3, r3, #25
 8005970:	f53f af12 	bmi.w	8005798 <_vfiprintf_r+0x4c>
 8005974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005976:	e711      	b.n	800579c <_vfiprintf_r+0x50>
 8005978:	ab03      	add	r3, sp, #12
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	462a      	mov	r2, r5
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <_vfiprintf_r+0x258>)
 8005980:	a904      	add	r1, sp, #16
 8005982:	4630      	mov	r0, r6
 8005984:	f7fe fa6a 	bl	8003e5c <_printf_i>
 8005988:	e7e4      	b.n	8005954 <_vfiprintf_r+0x208>
 800598a:	bf00      	nop
 800598c:	0800654c 	.word	0x0800654c
 8005990:	0800656c 	.word	0x0800656c
 8005994:	0800652c 	.word	0x0800652c
 8005998:	0800641a 	.word	0x0800641a
 800599c:	08006424 	.word	0x08006424
 80059a0:	08003915 	.word	0x08003915
 80059a4:	08005727 	.word	0x08005727
 80059a8:	08006420 	.word	0x08006420

080059ac <__swbuf_r>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	460e      	mov	r6, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	4605      	mov	r5, r0
 80059b4:	b118      	cbz	r0, 80059be <__swbuf_r+0x12>
 80059b6:	6983      	ldr	r3, [r0, #24]
 80059b8:	b90b      	cbnz	r3, 80059be <__swbuf_r+0x12>
 80059ba:	f000 f9e7 	bl	8005d8c <__sinit>
 80059be:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <__swbuf_r+0x98>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d12b      	bne.n	8005a1c <__swbuf_r+0x70>
 80059c4:	686c      	ldr	r4, [r5, #4]
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	d52f      	bpl.n	8005a30 <__swbuf_r+0x84>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b36b      	cbz	r3, 8005a30 <__swbuf_r+0x84>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	1ac0      	subs	r0, r0, r3
 80059da:	6963      	ldr	r3, [r4, #20]
 80059dc:	b2f6      	uxtb	r6, r6
 80059de:	4283      	cmp	r3, r0
 80059e0:	4637      	mov	r7, r6
 80059e2:	dc04      	bgt.n	80059ee <__swbuf_r+0x42>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 f93c 	bl	8005c64 <_fflush_r>
 80059ec:	bb30      	cbnz	r0, 8005a3c <__swbuf_r+0x90>
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	701e      	strb	r6, [r3, #0]
 80059fc:	6963      	ldr	r3, [r4, #20]
 80059fe:	3001      	adds	r0, #1
 8005a00:	4283      	cmp	r3, r0
 8005a02:	d004      	beq.n	8005a0e <__swbuf_r+0x62>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	07db      	lsls	r3, r3, #31
 8005a08:	d506      	bpl.n	8005a18 <__swbuf_r+0x6c>
 8005a0a:	2e0a      	cmp	r6, #10
 8005a0c:	d104      	bne.n	8005a18 <__swbuf_r+0x6c>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 f927 	bl	8005c64 <_fflush_r>
 8005a16:	b988      	cbnz	r0, 8005a3c <__swbuf_r+0x90>
 8005a18:	4638      	mov	r0, r7
 8005a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <__swbuf_r+0x9c>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d101      	bne.n	8005a26 <__swbuf_r+0x7a>
 8005a22:	68ac      	ldr	r4, [r5, #8]
 8005a24:	e7cf      	b.n	80059c6 <__swbuf_r+0x1a>
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <__swbuf_r+0xa0>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	bf08      	it	eq
 8005a2c:	68ec      	ldreq	r4, [r5, #12]
 8005a2e:	e7ca      	b.n	80059c6 <__swbuf_r+0x1a>
 8005a30:	4621      	mov	r1, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f81a 	bl	8005a6c <__swsetup_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d0cb      	beq.n	80059d4 <__swbuf_r+0x28>
 8005a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a40:	e7ea      	b.n	8005a18 <__swbuf_r+0x6c>
 8005a42:	bf00      	nop
 8005a44:	0800654c 	.word	0x0800654c
 8005a48:	0800656c 	.word	0x0800656c
 8005a4c:	0800652c 	.word	0x0800652c

08005a50 <__ascii_wctomb>:
 8005a50:	b149      	cbz	r1, 8005a66 <__ascii_wctomb+0x16>
 8005a52:	2aff      	cmp	r2, #255	; 0xff
 8005a54:	bf85      	ittet	hi
 8005a56:	238a      	movhi	r3, #138	; 0x8a
 8005a58:	6003      	strhi	r3, [r0, #0]
 8005a5a:	700a      	strbls	r2, [r1, #0]
 8005a5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a60:	bf98      	it	ls
 8005a62:	2001      	movls	r0, #1
 8005a64:	4770      	bx	lr
 8005a66:	4608      	mov	r0, r1
 8005a68:	4770      	bx	lr
	...

08005a6c <__swsetup_r>:
 8005a6c:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <__swsetup_r+0xcc>)
 8005a6e:	b570      	push	{r4, r5, r6, lr}
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	b125      	cbz	r5, 8005a82 <__swsetup_r+0x16>
 8005a78:	69ab      	ldr	r3, [r5, #24]
 8005a7a:	b913      	cbnz	r3, 8005a82 <__swsetup_r+0x16>
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f985 	bl	8005d8c <__sinit>
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <__swsetup_r+0xd0>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d10f      	bne.n	8005aa8 <__swsetup_r+0x3c>
 8005a88:	686c      	ldr	r4, [r5, #4]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a90:	0719      	lsls	r1, r3, #28
 8005a92:	d42c      	bmi.n	8005aee <__swsetup_r+0x82>
 8005a94:	06dd      	lsls	r5, r3, #27
 8005a96:	d411      	bmi.n	8005abc <__swsetup_r+0x50>
 8005a98:	2309      	movs	r3, #9
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa6:	e03e      	b.n	8005b26 <__swsetup_r+0xba>
 8005aa8:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <__swsetup_r+0xd4>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swsetup_r+0x46>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7eb      	b.n	8005a8a <__swsetup_r+0x1e>
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <__swsetup_r+0xd8>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7e6      	b.n	8005a8a <__swsetup_r+0x1e>
 8005abc:	0758      	lsls	r0, r3, #29
 8005abe:	d512      	bpl.n	8005ae6 <__swsetup_r+0x7a>
 8005ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac2:	b141      	cbz	r1, 8005ad6 <__swsetup_r+0x6a>
 8005ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	d002      	beq.n	8005ad2 <__swsetup_r+0x66>
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7ff fd0b 	bl	80054e8 <_free_r>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f043 0308 	orr.w	r3, r3, #8
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b94b      	cbnz	r3, 8005b06 <__swsetup_r+0x9a>
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d003      	beq.n	8005b06 <__swsetup_r+0x9a>
 8005afe:	4621      	mov	r1, r4
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 fa07 	bl	8005f14 <__smakebuf_r>
 8005b06:	89a0      	ldrh	r0, [r4, #12]
 8005b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b0c:	f010 0301 	ands.w	r3, r0, #1
 8005b10:	d00a      	beq.n	8005b28 <__swsetup_r+0xbc>
 8005b12:	2300      	movs	r3, #0
 8005b14:	60a3      	str	r3, [r4, #8]
 8005b16:	6963      	ldr	r3, [r4, #20]
 8005b18:	425b      	negs	r3, r3
 8005b1a:	61a3      	str	r3, [r4, #24]
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	b943      	cbnz	r3, 8005b32 <__swsetup_r+0xc6>
 8005b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b24:	d1ba      	bne.n	8005a9c <__swsetup_r+0x30>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	0781      	lsls	r1, r0, #30
 8005b2a:	bf58      	it	pl
 8005b2c:	6963      	ldrpl	r3, [r4, #20]
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	e7f4      	b.n	8005b1c <__swsetup_r+0xb0>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e7f7      	b.n	8005b26 <__swsetup_r+0xba>
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	0800654c 	.word	0x0800654c
 8005b40:	0800656c 	.word	0x0800656c
 8005b44:	0800652c 	.word	0x0800652c

08005b48 <abort>:
 8005b48:	b508      	push	{r3, lr}
 8005b4a:	2006      	movs	r0, #6
 8005b4c:	f000 fa4a 	bl	8005fe4 <raise>
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7fb fc3d 	bl	80013d0 <_exit>
	...

08005b58 <__sflush_r>:
 8005b58:	898a      	ldrh	r2, [r1, #12]
 8005b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5e:	4605      	mov	r5, r0
 8005b60:	0710      	lsls	r0, r2, #28
 8005b62:	460c      	mov	r4, r1
 8005b64:	d458      	bmi.n	8005c18 <__sflush_r+0xc0>
 8005b66:	684b      	ldr	r3, [r1, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dc05      	bgt.n	8005b78 <__sflush_r+0x20>
 8005b6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dc02      	bgt.n	8005b78 <__sflush_r+0x20>
 8005b72:	2000      	movs	r0, #0
 8005b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b7a:	2e00      	cmp	r6, #0
 8005b7c:	d0f9      	beq.n	8005b72 <__sflush_r+0x1a>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b84:	682f      	ldr	r7, [r5, #0]
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	d032      	beq.n	8005bf0 <__sflush_r+0x98>
 8005b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	075a      	lsls	r2, r3, #29
 8005b90:	d505      	bpl.n	8005b9e <__sflush_r+0x46>
 8005b92:	6863      	ldr	r3, [r4, #4]
 8005b94:	1ac0      	subs	r0, r0, r3
 8005b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b98:	b10b      	cbz	r3, 8005b9e <__sflush_r+0x46>
 8005b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b9c:	1ac0      	subs	r0, r0, r3
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba4:	6a21      	ldr	r1, [r4, #32]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b0      	blx	r6
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	d106      	bne.n	8005bbe <__sflush_r+0x66>
 8005bb0:	6829      	ldr	r1, [r5, #0]
 8005bb2:	291d      	cmp	r1, #29
 8005bb4:	d82c      	bhi.n	8005c10 <__sflush_r+0xb8>
 8005bb6:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <__sflush_r+0x108>)
 8005bb8:	40ca      	lsrs	r2, r1
 8005bba:	07d6      	lsls	r6, r2, #31
 8005bbc:	d528      	bpl.n	8005c10 <__sflush_r+0xb8>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	6062      	str	r2, [r4, #4]
 8005bc2:	04d9      	lsls	r1, r3, #19
 8005bc4:	6922      	ldr	r2, [r4, #16]
 8005bc6:	6022      	str	r2, [r4, #0]
 8005bc8:	d504      	bpl.n	8005bd4 <__sflush_r+0x7c>
 8005bca:	1c42      	adds	r2, r0, #1
 8005bcc:	d101      	bne.n	8005bd2 <__sflush_r+0x7a>
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	b903      	cbnz	r3, 8005bd4 <__sflush_r+0x7c>
 8005bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8005bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd6:	602f      	str	r7, [r5, #0]
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d0ca      	beq.n	8005b72 <__sflush_r+0x1a>
 8005bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <__sflush_r+0x92>
 8005be4:	4628      	mov	r0, r5
 8005be6:	f7ff fc7f 	bl	80054e8 <_free_r>
 8005bea:	2000      	movs	r0, #0
 8005bec:	6360      	str	r0, [r4, #52]	; 0x34
 8005bee:	e7c1      	b.n	8005b74 <__sflush_r+0x1c>
 8005bf0:	6a21      	ldr	r1, [r4, #32]
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b0      	blx	r6
 8005bf8:	1c41      	adds	r1, r0, #1
 8005bfa:	d1c7      	bne.n	8005b8c <__sflush_r+0x34>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0c4      	beq.n	8005b8c <__sflush_r+0x34>
 8005c02:	2b1d      	cmp	r3, #29
 8005c04:	d001      	beq.n	8005c0a <__sflush_r+0xb2>
 8005c06:	2b16      	cmp	r3, #22
 8005c08:	d101      	bne.n	8005c0e <__sflush_r+0xb6>
 8005c0a:	602f      	str	r7, [r5, #0]
 8005c0c:	e7b1      	b.n	8005b72 <__sflush_r+0x1a>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c14:	81a3      	strh	r3, [r4, #12]
 8005c16:	e7ad      	b.n	8005b74 <__sflush_r+0x1c>
 8005c18:	690f      	ldr	r7, [r1, #16]
 8005c1a:	2f00      	cmp	r7, #0
 8005c1c:	d0a9      	beq.n	8005b72 <__sflush_r+0x1a>
 8005c1e:	0793      	lsls	r3, r2, #30
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	bf08      	it	eq
 8005c24:	694b      	ldreq	r3, [r1, #20]
 8005c26:	600f      	str	r7, [r1, #0]
 8005c28:	bf18      	it	ne
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	eba6 0807 	sub.w	r8, r6, r7
 8005c30:	608b      	str	r3, [r1, #8]
 8005c32:	f1b8 0f00 	cmp.w	r8, #0
 8005c36:	dd9c      	ble.n	8005b72 <__sflush_r+0x1a>
 8005c38:	6a21      	ldr	r1, [r4, #32]
 8005c3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c3c:	4643      	mov	r3, r8
 8005c3e:	463a      	mov	r2, r7
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b0      	blx	r6
 8005c44:	2800      	cmp	r0, #0
 8005c46:	dc06      	bgt.n	8005c56 <__sflush_r+0xfe>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	e78e      	b.n	8005b74 <__sflush_r+0x1c>
 8005c56:	4407      	add	r7, r0
 8005c58:	eba8 0800 	sub.w	r8, r8, r0
 8005c5c:	e7e9      	b.n	8005c32 <__sflush_r+0xda>
 8005c5e:	bf00      	nop
 8005c60:	20400001 	.word	0x20400001

08005c64 <_fflush_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	690b      	ldr	r3, [r1, #16]
 8005c68:	4605      	mov	r5, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	b913      	cbnz	r3, 8005c74 <_fflush_r+0x10>
 8005c6e:	2500      	movs	r5, #0
 8005c70:	4628      	mov	r0, r5
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	b118      	cbz	r0, 8005c7e <_fflush_r+0x1a>
 8005c76:	6983      	ldr	r3, [r0, #24]
 8005c78:	b90b      	cbnz	r3, 8005c7e <_fflush_r+0x1a>
 8005c7a:	f000 f887 	bl	8005d8c <__sinit>
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <_fflush_r+0x6c>)
 8005c80:	429c      	cmp	r4, r3
 8005c82:	d11b      	bne.n	8005cbc <_fflush_r+0x58>
 8005c84:	686c      	ldr	r4, [r5, #4]
 8005c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0ef      	beq.n	8005c6e <_fflush_r+0xa>
 8005c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c90:	07d0      	lsls	r0, r2, #31
 8005c92:	d404      	bmi.n	8005c9e <_fflush_r+0x3a>
 8005c94:	0599      	lsls	r1, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_fflush_r+0x3a>
 8005c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c9a:	f000 f915 	bl	8005ec8 <__retarget_lock_acquire_recursive>
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	f7ff ff59 	bl	8005b58 <__sflush_r>
 8005ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ca8:	07da      	lsls	r2, r3, #31
 8005caa:	4605      	mov	r5, r0
 8005cac:	d4e0      	bmi.n	8005c70 <_fflush_r+0xc>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	059b      	lsls	r3, r3, #22
 8005cb2:	d4dd      	bmi.n	8005c70 <_fflush_r+0xc>
 8005cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb6:	f000 f908 	bl	8005eca <__retarget_lock_release_recursive>
 8005cba:	e7d9      	b.n	8005c70 <_fflush_r+0xc>
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <_fflush_r+0x70>)
 8005cbe:	429c      	cmp	r4, r3
 8005cc0:	d101      	bne.n	8005cc6 <_fflush_r+0x62>
 8005cc2:	68ac      	ldr	r4, [r5, #8]
 8005cc4:	e7df      	b.n	8005c86 <_fflush_r+0x22>
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <_fflush_r+0x74>)
 8005cc8:	429c      	cmp	r4, r3
 8005cca:	bf08      	it	eq
 8005ccc:	68ec      	ldreq	r4, [r5, #12]
 8005cce:	e7da      	b.n	8005c86 <_fflush_r+0x22>
 8005cd0:	0800654c 	.word	0x0800654c
 8005cd4:	0800656c 	.word	0x0800656c
 8005cd8:	0800652c 	.word	0x0800652c

08005cdc <std>:
 8005cdc:	2300      	movs	r3, #0
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cea:	6083      	str	r3, [r0, #8]
 8005cec:	8181      	strh	r1, [r0, #12]
 8005cee:	6643      	str	r3, [r0, #100]	; 0x64
 8005cf0:	81c2      	strh	r2, [r0, #14]
 8005cf2:	6183      	str	r3, [r0, #24]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	305c      	adds	r0, #92	; 0x5c
 8005cfa:	f7fd fd63 	bl	80037c4 <memset>
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <std+0x38>)
 8005d00:	6263      	str	r3, [r4, #36]	; 0x24
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <std+0x3c>)
 8005d04:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <std+0x40>)
 8005d08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <std+0x44>)
 8005d0c:	6224      	str	r4, [r4, #32]
 8005d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	bf00      	nop
 8005d14:	0800601d 	.word	0x0800601d
 8005d18:	0800603f 	.word	0x0800603f
 8005d1c:	08006077 	.word	0x08006077
 8005d20:	0800609b 	.word	0x0800609b

08005d24 <_cleanup_r>:
 8005d24:	4901      	ldr	r1, [pc, #4]	; (8005d2c <_cleanup_r+0x8>)
 8005d26:	f000 b8af 	b.w	8005e88 <_fwalk_reent>
 8005d2a:	bf00      	nop
 8005d2c:	08005c65 	.word	0x08005c65

08005d30 <__sfmoreglue>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	1e4a      	subs	r2, r1, #1
 8005d34:	2568      	movs	r5, #104	; 0x68
 8005d36:	4355      	muls	r5, r2
 8005d38:	460e      	mov	r6, r1
 8005d3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d3e:	f7ff fc23 	bl	8005588 <_malloc_r>
 8005d42:	4604      	mov	r4, r0
 8005d44:	b140      	cbz	r0, 8005d58 <__sfmoreglue+0x28>
 8005d46:	2100      	movs	r1, #0
 8005d48:	e9c0 1600 	strd	r1, r6, [r0]
 8005d4c:	300c      	adds	r0, #12
 8005d4e:	60a0      	str	r0, [r4, #8]
 8005d50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d54:	f7fd fd36 	bl	80037c4 <memset>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}

08005d5c <__sfp_lock_acquire>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	; (8005d64 <__sfp_lock_acquire+0x8>)
 8005d5e:	f000 b8b3 	b.w	8005ec8 <__retarget_lock_acquire_recursive>
 8005d62:	bf00      	nop
 8005d64:	200002ac 	.word	0x200002ac

08005d68 <__sfp_lock_release>:
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <__sfp_lock_release+0x8>)
 8005d6a:	f000 b8ae 	b.w	8005eca <__retarget_lock_release_recursive>
 8005d6e:	bf00      	nop
 8005d70:	200002ac 	.word	0x200002ac

08005d74 <__sinit_lock_acquire>:
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <__sinit_lock_acquire+0x8>)
 8005d76:	f000 b8a7 	b.w	8005ec8 <__retarget_lock_acquire_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	200002a7 	.word	0x200002a7

08005d80 <__sinit_lock_release>:
 8005d80:	4801      	ldr	r0, [pc, #4]	; (8005d88 <__sinit_lock_release+0x8>)
 8005d82:	f000 b8a2 	b.w	8005eca <__retarget_lock_release_recursive>
 8005d86:	bf00      	nop
 8005d88:	200002a7 	.word	0x200002a7

08005d8c <__sinit>:
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4604      	mov	r4, r0
 8005d90:	f7ff fff0 	bl	8005d74 <__sinit_lock_acquire>
 8005d94:	69a3      	ldr	r3, [r4, #24]
 8005d96:	b11b      	cbz	r3, 8005da0 <__sinit+0x14>
 8005d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d9c:	f7ff bff0 	b.w	8005d80 <__sinit_lock_release>
 8005da0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005da4:	6523      	str	r3, [r4, #80]	; 0x50
 8005da6:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <__sinit+0x68>)
 8005da8:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <__sinit+0x6c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	bf04      	itt	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	61a3      	streq	r3, [r4, #24]
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 f820 	bl	8005dfc <__sfp>
 8005dbc:	6060      	str	r0, [r4, #4]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 f81c 	bl	8005dfc <__sfp>
 8005dc4:	60a0      	str	r0, [r4, #8]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f818 	bl	8005dfc <__sfp>
 8005dcc:	2200      	movs	r2, #0
 8005dce:	60e0      	str	r0, [r4, #12]
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	6860      	ldr	r0, [r4, #4]
 8005dd4:	f7ff ff82 	bl	8005cdc <std>
 8005dd8:	68a0      	ldr	r0, [r4, #8]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	2109      	movs	r1, #9
 8005dde:	f7ff ff7d 	bl	8005cdc <std>
 8005de2:	68e0      	ldr	r0, [r4, #12]
 8005de4:	2202      	movs	r2, #2
 8005de6:	2112      	movs	r1, #18
 8005de8:	f7ff ff78 	bl	8005cdc <std>
 8005dec:	2301      	movs	r3, #1
 8005dee:	61a3      	str	r3, [r4, #24]
 8005df0:	e7d2      	b.n	8005d98 <__sinit+0xc>
 8005df2:	bf00      	nop
 8005df4:	080061a8 	.word	0x080061a8
 8005df8:	08005d25 	.word	0x08005d25

08005dfc <__sfp>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	4607      	mov	r7, r0
 8005e00:	f7ff ffac 	bl	8005d5c <__sfp_lock_acquire>
 8005e04:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <__sfp+0x84>)
 8005e06:	681e      	ldr	r6, [r3, #0]
 8005e08:	69b3      	ldr	r3, [r6, #24]
 8005e0a:	b913      	cbnz	r3, 8005e12 <__sfp+0x16>
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ffbd 	bl	8005d8c <__sinit>
 8005e12:	3648      	adds	r6, #72	; 0x48
 8005e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	d503      	bpl.n	8005e24 <__sfp+0x28>
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	b30b      	cbz	r3, 8005e64 <__sfp+0x68>
 8005e20:	6836      	ldr	r6, [r6, #0]
 8005e22:	e7f7      	b.n	8005e14 <__sfp+0x18>
 8005e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e28:	b9d5      	cbnz	r5, 8005e60 <__sfp+0x64>
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <__sfp+0x88>)
 8005e2c:	60e3      	str	r3, [r4, #12]
 8005e2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e32:	6665      	str	r5, [r4, #100]	; 0x64
 8005e34:	f000 f847 	bl	8005ec6 <__retarget_lock_init_recursive>
 8005e38:	f7ff ff96 	bl	8005d68 <__sfp_lock_release>
 8005e3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e44:	6025      	str	r5, [r4, #0]
 8005e46:	61a5      	str	r5, [r4, #24]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e50:	f7fd fcb8 	bl	80037c4 <memset>
 8005e54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e60:	3468      	adds	r4, #104	; 0x68
 8005e62:	e7d9      	b.n	8005e18 <__sfp+0x1c>
 8005e64:	2104      	movs	r1, #4
 8005e66:	4638      	mov	r0, r7
 8005e68:	f7ff ff62 	bl	8005d30 <__sfmoreglue>
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	6030      	str	r0, [r6, #0]
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d1d5      	bne.n	8005e20 <__sfp+0x24>
 8005e74:	f7ff ff78 	bl	8005d68 <__sfp_lock_release>
 8005e78:	230c      	movs	r3, #12
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	e7ee      	b.n	8005e5c <__sfp+0x60>
 8005e7e:	bf00      	nop
 8005e80:	080061a8 	.word	0x080061a8
 8005e84:	ffff0001 	.word	0xffff0001

08005e88 <_fwalk_reent>:
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	4688      	mov	r8, r1
 8005e90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e94:	2700      	movs	r7, #0
 8005e96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e9a:	f1b9 0901 	subs.w	r9, r9, #1
 8005e9e:	d505      	bpl.n	8005eac <_fwalk_reent+0x24>
 8005ea0:	6824      	ldr	r4, [r4, #0]
 8005ea2:	2c00      	cmp	r4, #0
 8005ea4:	d1f7      	bne.n	8005e96 <_fwalk_reent+0xe>
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eac:	89ab      	ldrh	r3, [r5, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d907      	bls.n	8005ec2 <_fwalk_reent+0x3a>
 8005eb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	d003      	beq.n	8005ec2 <_fwalk_reent+0x3a>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	47c0      	blx	r8
 8005ec0:	4307      	orrs	r7, r0
 8005ec2:	3568      	adds	r5, #104	; 0x68
 8005ec4:	e7e9      	b.n	8005e9a <_fwalk_reent+0x12>

08005ec6 <__retarget_lock_init_recursive>:
 8005ec6:	4770      	bx	lr

08005ec8 <__retarget_lock_acquire_recursive>:
 8005ec8:	4770      	bx	lr

08005eca <__retarget_lock_release_recursive>:
 8005eca:	4770      	bx	lr

08005ecc <__swhatbuf_r>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	460e      	mov	r6, r1
 8005ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	b096      	sub	sp, #88	; 0x58
 8005ed8:	4614      	mov	r4, r2
 8005eda:	461d      	mov	r5, r3
 8005edc:	da07      	bge.n	8005eee <__swhatbuf_r+0x22>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	89b3      	ldrh	r3, [r6, #12]
 8005ee4:	061a      	lsls	r2, r3, #24
 8005ee6:	d410      	bmi.n	8005f0a <__swhatbuf_r+0x3e>
 8005ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eec:	e00e      	b.n	8005f0c <__swhatbuf_r+0x40>
 8005eee:	466a      	mov	r2, sp
 8005ef0:	f000 f8fa 	bl	80060e8 <_fstat_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	dbf2      	blt.n	8005ede <__swhatbuf_r+0x12>
 8005ef8:	9a01      	ldr	r2, [sp, #4]
 8005efa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005efe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f02:	425a      	negs	r2, r3
 8005f04:	415a      	adcs	r2, r3
 8005f06:	602a      	str	r2, [r5, #0]
 8005f08:	e7ee      	b.n	8005ee8 <__swhatbuf_r+0x1c>
 8005f0a:	2340      	movs	r3, #64	; 0x40
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	b016      	add	sp, #88	; 0x58
 8005f12:	bd70      	pop	{r4, r5, r6, pc}

08005f14 <__smakebuf_r>:
 8005f14:	898b      	ldrh	r3, [r1, #12]
 8005f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f18:	079d      	lsls	r5, r3, #30
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	d507      	bpl.n	8005f30 <__smakebuf_r+0x1c>
 8005f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	6163      	str	r3, [r4, #20]
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	ab01      	add	r3, sp, #4
 8005f32:	466a      	mov	r2, sp
 8005f34:	f7ff ffca 	bl	8005ecc <__swhatbuf_r>
 8005f38:	9900      	ldr	r1, [sp, #0]
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff fb23 	bl	8005588 <_malloc_r>
 8005f42:	b948      	cbnz	r0, 8005f58 <__smakebuf_r+0x44>
 8005f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f48:	059a      	lsls	r2, r3, #22
 8005f4a:	d4ef      	bmi.n	8005f2c <__smakebuf_r+0x18>
 8005f4c:	f023 0303 	bic.w	r3, r3, #3
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	e7e3      	b.n	8005f20 <__smakebuf_r+0xc>
 8005f58:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <__smakebuf_r+0x7c>)
 8005f5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	6020      	str	r0, [r4, #0]
 8005f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	6163      	str	r3, [r4, #20]
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	6120      	str	r0, [r4, #16]
 8005f6e:	b15b      	cbz	r3, 8005f88 <__smakebuf_r+0x74>
 8005f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f74:	4630      	mov	r0, r6
 8005f76:	f000 f8c9 	bl	800610c <_isatty_r>
 8005f7a:	b128      	cbz	r0, 8005f88 <__smakebuf_r+0x74>
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	89a0      	ldrh	r0, [r4, #12]
 8005f8a:	4305      	orrs	r5, r0
 8005f8c:	81a5      	strh	r5, [r4, #12]
 8005f8e:	e7cd      	b.n	8005f2c <__smakebuf_r+0x18>
 8005f90:	08005d25 	.word	0x08005d25

08005f94 <_raise_r>:
 8005f94:	291f      	cmp	r1, #31
 8005f96:	b538      	push	{r3, r4, r5, lr}
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	d904      	bls.n	8005fa8 <_raise_r+0x14>
 8005f9e:	2316      	movs	r3, #22
 8005fa0:	6003      	str	r3, [r0, #0]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005faa:	b112      	cbz	r2, 8005fb2 <_raise_r+0x1e>
 8005fac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fb0:	b94b      	cbnz	r3, 8005fc6 <_raise_r+0x32>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f830 	bl	8006018 <_getpid_r>
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4601      	mov	r1, r0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc2:	f000 b817 	b.w	8005ff4 <_kill_r>
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d00a      	beq.n	8005fe0 <_raise_r+0x4c>
 8005fca:	1c59      	adds	r1, r3, #1
 8005fcc:	d103      	bne.n	8005fd6 <_raise_r+0x42>
 8005fce:	2316      	movs	r3, #22
 8005fd0:	6003      	str	r3, [r0, #0]
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e7e7      	b.n	8005fa6 <_raise_r+0x12>
 8005fd6:	2400      	movs	r4, #0
 8005fd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fdc:	4628      	mov	r0, r5
 8005fde:	4798      	blx	r3
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e7e0      	b.n	8005fa6 <_raise_r+0x12>

08005fe4 <raise>:
 8005fe4:	4b02      	ldr	r3, [pc, #8]	; (8005ff0 <raise+0xc>)
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	f7ff bfd3 	b.w	8005f94 <_raise_r>
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c

08005ff4 <_kill_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4d07      	ldr	r5, [pc, #28]	; (8006014 <_kill_r+0x20>)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	602b      	str	r3, [r5, #0]
 8006002:	f7fb f9d5 	bl	80013b0 <_kill>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d102      	bne.n	8006010 <_kill_r+0x1c>
 800600a:	682b      	ldr	r3, [r5, #0]
 800600c:	b103      	cbz	r3, 8006010 <_kill_r+0x1c>
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	bd38      	pop	{r3, r4, r5, pc}
 8006012:	bf00      	nop
 8006014:	200002a0 	.word	0x200002a0

08006018 <_getpid_r>:
 8006018:	f7fb b9c2 	b.w	80013a0 <_getpid>

0800601c <__sread>:
 800601c:	b510      	push	{r4, lr}
 800601e:	460c      	mov	r4, r1
 8006020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006024:	f000 f894 	bl	8006150 <_read_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	bfab      	itete	ge
 800602c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800602e:	89a3      	ldrhlt	r3, [r4, #12]
 8006030:	181b      	addge	r3, r3, r0
 8006032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006036:	bfac      	ite	ge
 8006038:	6563      	strge	r3, [r4, #84]	; 0x54
 800603a:	81a3      	strhlt	r3, [r4, #12]
 800603c:	bd10      	pop	{r4, pc}

0800603e <__swrite>:
 800603e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006042:	461f      	mov	r7, r3
 8006044:	898b      	ldrh	r3, [r1, #12]
 8006046:	05db      	lsls	r3, r3, #23
 8006048:	4605      	mov	r5, r0
 800604a:	460c      	mov	r4, r1
 800604c:	4616      	mov	r6, r2
 800604e:	d505      	bpl.n	800605c <__swrite+0x1e>
 8006050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006054:	2302      	movs	r3, #2
 8006056:	2200      	movs	r2, #0
 8006058:	f000 f868 	bl	800612c <_lseek_r>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	4632      	mov	r2, r6
 800606a:	463b      	mov	r3, r7
 800606c:	4628      	mov	r0, r5
 800606e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	f000 b817 	b.w	80060a4 <_write_r>

08006076 <__sseek>:
 8006076:	b510      	push	{r4, lr}
 8006078:	460c      	mov	r4, r1
 800607a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607e:	f000 f855 	bl	800612c <_lseek_r>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	bf15      	itete	ne
 8006088:	6560      	strne	r0, [r4, #84]	; 0x54
 800608a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800608e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006092:	81a3      	strheq	r3, [r4, #12]
 8006094:	bf18      	it	ne
 8006096:	81a3      	strhne	r3, [r4, #12]
 8006098:	bd10      	pop	{r4, pc}

0800609a <__sclose>:
 800609a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609e:	f000 b813 	b.w	80060c8 <_close_r>
	...

080060a4 <_write_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_write_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fb f9b3 	bl	800141e <_write>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_write_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_write_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	200002a0 	.word	0x200002a0

080060c8 <_close_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	; (80060e4 <_close_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb f9bf 	bl	8001456 <_close>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_close_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_close_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200002a0 	.word	0x200002a0

080060e8 <_fstat_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	; (8006108 <_fstat_r+0x20>)
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	f7fb f9ba 	bl	800146e <_fstat>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d102      	bne.n	8006104 <_fstat_r+0x1c>
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	b103      	cbz	r3, 8006104 <_fstat_r+0x1c>
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	bd38      	pop	{r3, r4, r5, pc}
 8006106:	bf00      	nop
 8006108:	200002a0 	.word	0x200002a0

0800610c <_isatty_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	; (8006128 <_isatty_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fb f9b9 	bl	800148e <_isatty>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_isatty_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_isatty_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	200002a0 	.word	0x200002a0

0800612c <_lseek_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	; (800614c <_lseek_r+0x20>)
 8006130:	4604      	mov	r4, r0
 8006132:	4608      	mov	r0, r1
 8006134:	4611      	mov	r1, r2
 8006136:	2200      	movs	r2, #0
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fb f9b2 	bl	80014a4 <_lseek>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_lseek_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_lseek_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	200002a0 	.word	0x200002a0

08006150 <_read_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	; (8006170 <_read_r+0x20>)
 8006154:	4604      	mov	r4, r0
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	2200      	movs	r2, #0
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fb f940 	bl	80013e4 <_read>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_read_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_read_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	200002a0 	.word	0x200002a0

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
