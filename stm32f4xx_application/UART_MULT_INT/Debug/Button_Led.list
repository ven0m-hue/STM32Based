
Button_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026d0  080026d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08002748  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002748  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090b8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001612  00000000  00000000  00029158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0002a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  0002ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ab6  00000000  00000000  0002b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007de0  00000000  00000000  0004befe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f57  00000000  00000000  00053cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ac35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  0011ac88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002594 	.word	0x08002594

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08002594 	.word	0x08002594

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb18 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f82a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8ea 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f894 	bl	8000638 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f8bc 	bl	800068c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2120      	movs	r1, #32
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x3c>)
 800051a:	f000 fe47 	bl	80011ac <HAL_GPIO_WritePin>
	 HAL_Delay(200);
 800051e:	20c8      	movs	r0, #200	; 0xc8
 8000520:	f000 fb7a 	bl	8000c18 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x3c>)
 800052a:	f000 fe3f 	bl	80011ac <HAL_GPIO_WritePin>
	 HAL_Delay(200);
 800052e:	20c8      	movs	r0, #200	; 0xc8
 8000530:	f000 fb72 	bl	8000c18 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000534:	e7ee      	b.n	8000514 <main+0x18>
 8000536:	bf00      	nop
 8000538:	40020000 	.word	0x40020000

0800053c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <HAL_GPIO_EXTI_Callback+0x1c>)
 800054c:	f000 fe2e 	bl	80011ac <HAL_GPIO_WritePin>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020000 	.word	0x40020000

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2234      	movs	r2, #52	; 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 ff7c 	bl	8002468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <SystemClock_Config+0xd4>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xd4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xd8>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d0:	2310      	movs	r3, #16
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005da:	2304      	movs	r3, #4
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f8dc 	bl	80017a8 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f6:	f000 f8eb 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fdfa 	bl	8001210 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000622:	f000 f8d5 	bl	80007d0 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_USART2_UART_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000670:	f001 fb38 	bl	8001ce4 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f8a9 	bl	80007d0 <Error_Handler>
  }

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000f8 	.word	0x200000f8
 8000688:	40004400 	.word	0x40004400

0800068c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART1_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f001 fb0e 	bl	8001ce4 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f87f 	bl	80007d0 <Error_Handler>
  }

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	40011000 	.word	0x40011000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <MX_GPIO_Init+0xe0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <MX_GPIO_Init+0xe0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_GPIO_Init+0xe0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_GPIO_Init+0xe0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_GPIO_Init+0xe4>)
 800076c:	f000 fd1e 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_GPIO_Init+0xe8>)
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4811      	ldr	r0, [pc, #68]	; (80007cc <MX_GPIO_Init+0xec>)
 8000786:	f000 fb7d 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078a:	2320      	movs	r3, #32
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <MX_GPIO_Init+0xe4>)
 80007a2:	f000 fb6f 	bl	8000e84 <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2103      	movs	r1, #3
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 fb33 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b0:	2028      	movs	r0, #40	; 0x28
 80007b2:	f000 fb4c 	bl	8000e4e <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	; 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	10210000 	.word	0x10210000
 80007cc:	40020800 	.word	0x40020800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800081a:	2007      	movs	r0, #7
 800081c:	f000 faf0 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b090      	sub	sp, #64	; 0x40
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct1 = {0};
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <HAL_UART_MspInit+0x108>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a35      	ldr	r2, [pc, #212]	; (8000934 <HAL_UART_MspInit+0x108>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_UART_MspInit+0x108>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USART1_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <HAL_UART_MspInit+0x108>)
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <HAL_UART_MspInit+0x108>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6453      	str	r3, [r2, #68]	; 0x44
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <HAL_UART_MspInit+0x108>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <HAL_UART_MspInit+0x108>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <HAL_UART_MspInit+0x108>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <HAL_UART_MspInit+0x108>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2, PA9     ------> USART2_TX
    PA3, PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a8:	230c      	movs	r3, #12
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b8:	2307      	movs	r3, #7
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c0:	4619      	mov	r1, r3
 80008c2:	481d      	ldr	r0, [pc, #116]	; (8000938 <HAL_UART_MspInit+0x10c>)
 80008c4:	f000 fade 	bl	8000e84 <HAL_GPIO_Init>

    GPIO_InitStruct1.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80008c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct1.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct1.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct1.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct1.Alternate = GPIO_AF7_USART1;
 80008da:	2307      	movs	r3, #7
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4814      	ldr	r0, [pc, #80]	; (8000938 <HAL_UART_MspInit+0x10c>)
 80008e6:	f000 facd 	bl	8000e84 <HAL_GPIO_Init>


    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ea:	2026      	movs	r0, #38	; 0x26
 80008ec:	f000 faaf 	bl	8000e4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,3,0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2103      	movs	r1, #3
 80008f4:	2026      	movs	r0, #38	; 0x26
 80008f6:	f000 fa8e 	bl	8000e16 <HAL_NVIC_SetPriority>

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_UART_MspInit+0x110>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0x110>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f042 0220 	orr.w	r2, r2, #32
 8000908:	60da      	str	r2, [r3, #12]

	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800090a:	2025      	movs	r0, #37	; 0x25
 800090c:	f000 fa9f 	bl	8000e4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 8000910:	2200      	movs	r2, #0
 8000912:	2106      	movs	r1, #6
 8000914:	2025      	movs	r0, #37	; 0x25
 8000916:	f000 fa7e 	bl	8000e16 <HAL_NVIC_SetPriority>

    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_UART_MspInit+0x114>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_UART_MspInit+0x114>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f042 0220 	orr.w	r2, r2, #32
 8000928:	60da      	str	r2, [r3, #12]


}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	200000f8 	.word	0x200000f8
 8000940:	200000a0 	.word	0x200000a0

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f922 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <USART2_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, &receivedData, 1, HAL_MAX_DELAY);
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	2201      	movs	r2, #1
 80009a2:	4919      	ldr	r1, [pc, #100]	; (8000a08 <USART2_IRQHandler+0x70>)
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <USART2_IRQHandler+0x74>)
 80009a6:	f001 fa7c 	bl	8001ea2 <HAL_UART_Receive>
		if (receivedData == '\r')
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <USART2_IRQHandler+0x70>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b0d      	cmp	r3, #13
 80009b0:	d11e      	bne.n	80009f0 <USART2_IRQHandler+0x58>
			{
				recepCmplt = true;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <USART2_IRQHandler+0x78>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
				Data = atoi((char*)data_buffer);
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <USART2_IRQHandler+0x7c>)
 80009ba:	f001 fd27 	bl	800240c <atoi>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <USART2_IRQHandler+0x80>)
 80009c4:	601a      	str	r2, [r3, #0]

				data_buffer[count++] = '\r';
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <USART2_IRQHandler+0x84>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	4913      	ldr	r1, [pc, #76]	; (8000a1c <USART2_IRQHandler+0x84>)
 80009ce:	600a      	str	r2, [r1, #0]
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <USART2_IRQHandler+0x7c>)
 80009d2:	210d      	movs	r1, #13
 80009d4:	54d1      	strb	r1, [r2, r3]

			HAL_UART_Transmit(&huart2, data_buffer, count, HAL_MAX_DELAY);  //send to terminal
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <USART2_IRQHandler+0x84>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <USART2_IRQHandler+0x7c>)
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <USART2_IRQHandler+0x74>)
 80009e4:	f001 f9cb 	bl	8001d7e <HAL_UART_Transmit>
			count = 0;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <USART2_IRQHandler+0x84>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
		{
			data_buffer[count++] = receivedData;

		}

	return;
 80009ee:	e008      	b.n	8000a02 <USART2_IRQHandler+0x6a>
			data_buffer[count++] = receivedData;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <USART2_IRQHandler+0x84>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <USART2_IRQHandler+0x84>)
 80009f8:	600a      	str	r2, [r1, #0]
 80009fa:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <USART2_IRQHandler+0x70>)
 80009fc:	7811      	ldrb	r1, [r2, #0]
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <USART2_IRQHandler+0x7c>)
 8000a00:	54d1      	strb	r1, [r2, r3]
	return;
 8000a02:	bf00      	nop

	HAL_UART_IRQHandler(&huart2);
}
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000009c 	.word	0x2000009c
 8000a0c:	200000f8 	.word	0x200000f8
 8000a10:	20000090 	.word	0x20000090
 8000a14:	2000013c 	.word	0x2000013c
 8000a18:	200000e4 	.word	0x200000e4
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData1, 1, HAL_MAX_DELAY);
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4919      	ldr	r1, [pc, #100]	; (8000a90 <USART1_IRQHandler+0x70>)
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <USART1_IRQHandler+0x74>)
 8000a2e:	f001 fa38 	bl	8001ea2 <HAL_UART_Receive>
		if (receivedData1 == '\r')
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <USART1_IRQHandler+0x70>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b0d      	cmp	r3, #13
 8000a38:	d11e      	bne.n	8000a78 <USART1_IRQHandler+0x58>
			{
				recepCmplt1 = true;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <USART1_IRQHandler+0x78>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
				Data1 = atoi((char*)data_buffer1);
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <USART1_IRQHandler+0x7c>)
 8000a42:	f001 fce3 	bl	800240c <atoi>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <USART1_IRQHandler+0x80>)
 8000a4c:	601a      	str	r2, [r3, #0]

				data_buffer1[count1++] = '\r';
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <USART1_IRQHandler+0x84>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	4913      	ldr	r1, [pc, #76]	; (8000aa4 <USART1_IRQHandler+0x84>)
 8000a56:	600a      	str	r2, [r1, #0]
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <USART1_IRQHandler+0x7c>)
 8000a5a:	210d      	movs	r1, #13
 8000a5c:	54d1      	strb	r1, [r2, r3]

			HAL_UART_Transmit(&huart2, data_buffer1, count1, HAL_MAX_DELAY);  //send to terminal
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <USART1_IRQHandler+0x84>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <USART1_IRQHandler+0x7c>)
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <USART1_IRQHandler+0x88>)
 8000a6c:	f001 f987 	bl	8001d7e <HAL_UART_Transmit>
			count1 = 0;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <USART1_IRQHandler+0x84>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
		{
			data_buffer1[count1++] = receivedData1;

		}

	return;
 8000a76:	e008      	b.n	8000a8a <USART1_IRQHandler+0x6a>
			data_buffer1[count1++] = receivedData1;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <USART1_IRQHandler+0x84>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	4909      	ldr	r1, [pc, #36]	; (8000aa4 <USART1_IRQHandler+0x84>)
 8000a80:	600a      	str	r2, [r1, #0]
 8000a82:	4a03      	ldr	r2, [pc, #12]	; (8000a90 <USART1_IRQHandler+0x70>)
 8000a84:	7811      	ldrb	r1, [r2, #0]
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <USART1_IRQHandler+0x7c>)
 8000a88:	54d1      	strb	r1, [r2, r3]
	return;
 8000a8a:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);
}
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000e8 	.word	0x200000e8
 8000a94:	200000a0 	.word	0x200000a0
 8000a98:	20000094 	.word	0x20000094
 8000a9c:	200000f0 	.word	0x200000f0
 8000aa0:	20000098 	.word	0x20000098
 8000aa4:	200000ec 	.word	0x200000ec
 8000aa8:	200000f8 	.word	0x200000f8

08000aac <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab4:	f000 fb94 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff ffd7 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f001 fc87 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fcf3 	bl	80004fc <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b24:	080026d8 	.word	0x080026d8
  ldr r2, =_sbss
 8000b28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b2c:	20000148 	.word	0x20000148

08000b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_Init+0x40>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_Init+0x40>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x40>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f94f 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe38 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f967 	bl	8000e6a <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f92f 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000144 	.word	0x20000144

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000144 	.word	0x20000144

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e165      	b.n	800116c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 8154 	bne.w	8001166 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d005      	beq.n	8000ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d017      	beq.n	8000f74 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80ae 	beq.w	8001166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <HAL_GPIO_Init+0x300>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a5c      	ldr	r2, [pc, #368]	; (8001184 <HAL_GPIO_Init+0x300>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <HAL_GPIO_Init+0x300>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001026:	4a58      	ldr	r2, [pc, #352]	; (8001188 <HAL_GPIO_Init+0x304>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x308>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d025      	beq.n	800109e <HAL_GPIO_Init+0x21a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x30c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x216>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x310>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x212>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x314>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x20e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x318>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x20a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x206>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <HAL_GPIO_Init+0x320>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x202>
 8001082:	2306      	movs	r3, #6
 8001084:	e00c      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 8001086:	2307      	movs	r3, #7
 8001088:	e00a      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 800108a:	2305      	movs	r3, #5
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 800108e:	2304      	movs	r3, #4
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x21c>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	; (8001188 <HAL_GPIO_Init+0x304>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_GPIO_Init+0x324>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e2:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <HAL_GPIO_Init+0x324>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x324>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f ae96 	bls.w	8000ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f99c 	bl	800053c <HAL_GPIO_EXTI_Callback>
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0cc      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d90c      	bls.n	800124c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0b8      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a58      	ldr	r2, [pc, #352]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800126e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800127c:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	494d      	ldr	r1, [pc, #308]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d044      	beq.n	8001330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d119      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e07f      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d003      	beq.n	80012ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e06f      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e067      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f023 0203 	bic.w	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4934      	ldr	r1, [pc, #208]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001300:	f7ff fc7e 	bl	8000c00 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	e00a      	b.n	800131e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001308:	f7ff fc7a 	bl	8000c00 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e04f      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 020c 	and.w	r2, r3, #12
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	429a      	cmp	r2, r3
 800132e:	d1eb      	bne.n	8001308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d20c      	bcs.n	8001358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e032      	b.n	80013be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4916      	ldr	r1, [pc, #88]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	490e      	ldr	r1, [pc, #56]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001396:	f000 f855 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 800139a:	4602      	mov	r2, r0
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	490a      	ldr	r1, [pc, #40]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	5ccb      	ldrb	r3, [r1, r3]
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_RCC_ClockConfig+0x1c8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fbde 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00
 80013cc:	40023800 	.word	0x40023800
 80013d0:	080025ac 	.word	0x080025ac
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f8:	f7ff fff0 	bl	80013dc <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	0a9b      	lsrs	r3, r3, #10
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	; (8001418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	080025bc 	.word	0x080025bc

0800141c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001420:	f7ff ffdc 	bl	80013dc <HAL_RCC_GetHCLKFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	0b5b      	lsrs	r3, r3, #13
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	080025bc 	.word	0x080025bc

08001444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001448:	b088      	sub	sp, #32
 800144a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001460:	4bce      	ldr	r3, [pc, #824]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b0c      	cmp	r3, #12
 800146a:	f200 818d 	bhi.w	8001788 <HAL_RCC_GetSysClockFreq+0x344>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <HAL_RCC_GetSysClockFreq+0x30>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	080014a9 	.word	0x080014a9
 8001478:	08001789 	.word	0x08001789
 800147c:	08001789 	.word	0x08001789
 8001480:	08001789 	.word	0x08001789
 8001484:	080014af 	.word	0x080014af
 8001488:	08001789 	.word	0x08001789
 800148c:	08001789 	.word	0x08001789
 8001490:	08001789 	.word	0x08001789
 8001494:	080014b5 	.word	0x080014b5
 8001498:	08001789 	.word	0x08001789
 800149c:	08001789 	.word	0x08001789
 80014a0:	08001789 	.word	0x08001789
 80014a4:	08001629 	.word	0x08001629
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4bbd      	ldr	r3, [pc, #756]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014aa:	61bb      	str	r3, [r7, #24]
       break;
 80014ac:	e16f      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014ae:	4bbd      	ldr	r3, [pc, #756]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x360>)
 80014b0:	61bb      	str	r3, [r7, #24]
      break;
 80014b2:	e16c      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b4:	4bb9      	ldr	r3, [pc, #740]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014be:	4bb7      	ldr	r3, [pc, #732]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d053      	beq.n	8001572 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ca:	4bb4      	ldr	r3, [pc, #720]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	461a      	mov	r2, r3
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	ea02 0400 	and.w	r4, r2, r0
 80014e2:	603c      	str	r4, [r7, #0]
 80014e4:	400b      	ands	r3, r1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	014b      	lsls	r3, r1, #5
 80014fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014fe:	0142      	lsls	r2, r0, #5
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	4623      	mov	r3, r4
 8001506:	1ac0      	subs	r0, r0, r3
 8001508:	462b      	mov	r3, r5
 800150a:	eb61 0103 	sbc.w	r1, r1, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	018b      	lsls	r3, r1, #6
 8001518:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800151c:	0182      	lsls	r2, r0, #6
 800151e:	1a12      	subs	r2, r2, r0
 8001520:	eb63 0301 	sbc.w	r3, r3, r1
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	00d9      	lsls	r1, r3, #3
 800152e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001532:	00d0      	lsls	r0, r2, #3
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4621      	mov	r1, r4
 800153a:	1852      	adds	r2, r2, r1
 800153c:	4629      	mov	r1, r5
 800153e:	eb43 0101 	adc.w	r1, r3, r1
 8001542:	460b      	mov	r3, r1
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	0259      	lsls	r1, r3, #9
 800154e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001552:	0250      	lsls	r0, r2, #9
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f7fe fe4e 	bl	8000204 <__aeabi_uldivmod>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4613      	mov	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e04c      	b.n	800160c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001572:	4b8a      	ldr	r3, [pc, #552]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	099b      	lsrs	r3, r3, #6
 8001578:	461a      	mov	r2, r3
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001582:	f04f 0100 	mov.w	r1, #0
 8001586:	ea02 0a00 	and.w	sl, r2, r0
 800158a:	ea03 0b01 	and.w	fp, r3, r1
 800158e:	4650      	mov	r0, sl
 8001590:	4659      	mov	r1, fp
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	014b      	lsls	r3, r1, #5
 800159c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015a0:	0142      	lsls	r2, r0, #5
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	ebb0 000a 	subs.w	r0, r0, sl
 80015aa:	eb61 010b 	sbc.w	r1, r1, fp
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	018b      	lsls	r3, r1, #6
 80015b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015bc:	0182      	lsls	r2, r0, #6
 80015be:	1a12      	subs	r2, r2, r0
 80015c0:	eb63 0301 	sbc.w	r3, r3, r1
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	00d9      	lsls	r1, r3, #3
 80015ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015d2:	00d0      	lsls	r0, r2, #3
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	eb12 020a 	adds.w	r2, r2, sl
 80015dc:	eb43 030b 	adc.w	r3, r3, fp
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	0299      	lsls	r1, r3, #10
 80015ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80015ee:	0290      	lsls	r0, r2, #10
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	f7fe fe00 	bl	8000204 <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4613      	mov	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800160c:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	0c1b      	lsrs	r3, r3, #16
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	3301      	adds	r3, #1
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	61bb      	str	r3, [r7, #24]
      break;
 8001626:	e0b2      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001632:	4b5a      	ldr	r3, [pc, #360]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04d      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	461a      	mov	r2, r3
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	ea02 0800 	and.w	r8, r2, r0
 8001656:	ea03 0901 	and.w	r9, r3, r1
 800165a:	4640      	mov	r0, r8
 800165c:	4649      	mov	r1, r9
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	014b      	lsls	r3, r1, #5
 8001668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800166c:	0142      	lsls	r2, r0, #5
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	ebb0 0008 	subs.w	r0, r0, r8
 8001676:	eb61 0109 	sbc.w	r1, r1, r9
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	018b      	lsls	r3, r1, #6
 8001684:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001688:	0182      	lsls	r2, r0, #6
 800168a:	1a12      	subs	r2, r2, r0
 800168c:	eb63 0301 	sbc.w	r3, r3, r1
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	00d9      	lsls	r1, r3, #3
 800169a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800169e:	00d0      	lsls	r0, r2, #3
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	eb12 0208 	adds.w	r2, r2, r8
 80016a8:	eb43 0309 	adc.w	r3, r3, r9
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0259      	lsls	r1, r3, #9
 80016b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ba:	0250      	lsls	r0, r2, #9
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f7fe fd9a 	bl	8000204 <__aeabi_uldivmod>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4613      	mov	r3, r2
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	e04a      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	461a      	mov	r2, r3
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	ea02 0400 	and.w	r4, r2, r0
 80016f2:	ea03 0501 	and.w	r5, r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	014b      	lsls	r3, r1, #5
 8001704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001708:	0142      	lsls	r2, r0, #5
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	1b00      	subs	r0, r0, r4
 8001710:	eb61 0105 	sbc.w	r1, r1, r5
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	018b      	lsls	r3, r1, #6
 800171e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001722:	0182      	lsls	r2, r0, #6
 8001724:	1a12      	subs	r2, r2, r0
 8001726:	eb63 0301 	sbc.w	r3, r3, r1
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	00d9      	lsls	r1, r3, #3
 8001734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001738:	00d0      	lsls	r0, r2, #3
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	1912      	adds	r2, r2, r4
 8001740:	eb45 0303 	adc.w	r3, r5, r3
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	f04f 0100 	mov.w	r1, #0
 800174c:	0299      	lsls	r1, r3, #10
 800174e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001752:	0290      	lsls	r0, r2, #10
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	461a      	mov	r2, r3
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f7fe fd4e 	bl	8000204 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0f1b      	lsrs	r3, r3, #28
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	61bb      	str	r3, [r7, #24]
      break;
 8001786:	e002      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800178a:	61bb      	str	r3, [r7, #24]
      break;
 800178c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178e:	69bb      	ldr	r3, [r7, #24]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	00f42400 	.word	0x00f42400
 80017a4:	007a1200 	.word	0x007a1200

080017a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e28d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8083 	beq.w	80018ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c8:	4b94      	ldr	r3, [pc, #592]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d019      	beq.n	8001808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e0:	4b8e      	ldr	r3, [pc, #568]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ec:	d00c      	beq.n	8001808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d112      	bne.n	8001820 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001806:	d10b      	bne.n	8001820 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d05b      	beq.n	80018cc <HAL_RCC_OscConfig+0x124>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d157      	bne.n	80018cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e25a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001828:	d106      	bne.n	8001838 <HAL_RCC_OscConfig+0x90>
 800182a:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7b      	ldr	r2, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xcc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xb4>
 8001842:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a75      	ldr	r2, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a72      	ldr	r2, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xcc>
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6c      	ldr	r3, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6b      	ldr	r2, [pc, #428]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff f9c0 	bl	8000c00 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff f9bc 	bl	8000c00 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e21f      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xdc>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f9ac 	bl	8000c00 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff f9a8 	bl	8000c00 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e20b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x104>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06f      	beq.n	80019ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018da:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d017      	beq.n	8001916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018e6:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d11c      	bne.n	8001944 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x186>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1d3      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4937      	ldr	r1, [pc, #220]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001942:	e03a      	b.n	80019ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x278>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f955 	bl	8000c00 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff f951 	bl	8000c00 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1b4      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4925      	ldr	r1, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x278>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f934 	bl	8000c00 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff f930 	bl	8000c00 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e193      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d036      	beq.n	8001a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d016      	beq.n	80019fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f914 	bl	8000c00 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f910 	bl	8000c00 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e173      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x234>
 80019fa:	e01b      	b.n	8001a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x27c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f8fd 	bl	8000c00 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	e00e      	b.n	8001a28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f8f9 	bl	8000c00 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d907      	bls.n	8001a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e15c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	42470000 	.word	0x42470000
 8001a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b8a      	ldr	r3, [pc, #552]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ea      	bne.n	8001a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8097 	beq.w	8001b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x4b0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4b0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4b0>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f8b9 	bl	8000c00 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff f8b5 	bl	8000c00 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e118      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x4b0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x31e>
 8001ab8:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x358>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x340>
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a60      	ldr	r2, [pc, #384]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x358>
 8001ae8:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a59      	ldr	r2, [pc, #356]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a56      	ldr	r2, [pc, #344]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	f023 0304 	bic.w	r3, r3, #4
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f87a 	bl	8000c00 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f876 	bl	8000c00 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0d7      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0ee      	beq.n	8001b10 <HAL_RCC_OscConfig+0x368>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff f864 	bl	8000c00 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f860 	bl	8000c00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0c1      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80ad 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d060      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d145      	bne.n	8001c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x4b4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f834 	bl	8000c00 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f830 	bl	8000c00 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e093      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	071b      	lsls	r3, r3, #28
 8001be6:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x4b4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f805 	bl	8000c00 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f801 	bl	8000c00 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e064      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x452>
 8001c18:	e05c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x4b4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7fe ffee 	bl	8000c00 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7fe ffea 	bl	8000c00 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e04d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x480>
 8001c46:	e045      	b.n	8001cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e040      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_RCC_OscConfig+0x538>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d030      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d129      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d122      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d119      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10f      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e03f      	b.n	8001d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fd8e 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f9a7 	bl	800207c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b08a      	sub	sp, #40	; 0x28
 8001d82:	af02      	add	r7, sp, #8
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d17c      	bne.n	8001e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_UART_Transmit+0x2c>
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e075      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_UART_Transmit+0x3e>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e06e      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	; 0x21
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe ff15 	bl	8000c00 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	88fa      	ldrh	r2, [r7, #6]
 8001ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dec:	d108      	bne.n	8001e00 <HAL_UART_Transmit+0x82>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	e003      	b.n	8001e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e10:	e02a      	b.n	8001e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f8e2 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e036      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10b      	bne.n	8001e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	3302      	adds	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	e007      	b.n	8001e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1cf      	bne.n	8001e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f8b2 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b08a      	sub	sp, #40	; 0x28
 8001ea6:	af02      	add	r7, sp, #8
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	f040 808c 	bne.w	8001fdc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_UART_Receive+0x2e>
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e084      	b.n	8001fde <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Receive+0x40>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e07d      	b.n	8001fde <HAL_UART_Receive+0x13c>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2222      	movs	r2, #34	; 0x22
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001efe:	f7fe fe7f 	bl	8000c00 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f18:	d108      	bne.n	8001f2c <HAL_UART_Receive+0x8a>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d104      	bne.n	8001f2c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e003      	b.n	8001f34 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f3c:	e043      	b.n	8001fc6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2120      	movs	r1, #32
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f84c 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e042      	b.n	8001fde <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	3302      	adds	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	e01f      	b.n	8001fb8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f80:	d007      	beq.n	8001f92 <HAL_UART_Receive+0xf0>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_UART_Receive+0xfe>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e008      	b.n	8001fb2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1b6      	bne.n	8001f3e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff6:	e02c      	b.n	8002052 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d028      	beq.n	8002052 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <UART_WaitOnFlagUntilTimeout+0x30>
 8002006:	f7fe fdfb 	bl	8000c00 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	429a      	cmp	r2, r3
 8002014:	d21d      	bcs.n	8002052 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002024:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e00f      	b.n	8002072 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	429a      	cmp	r2, r3
 800206e:	d0c3      	beq.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002080:	b09f      	sub	sp, #124	; 0x7c
 8002082:	af00      	add	r7, sp, #0
 8002084:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	ea40 0301 	orr.w	r3, r0, r1
 800209c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800209e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80020b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020c0:	f021 010c 	bic.w	r1, r1, #12
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ca:	430b      	orrs	r3, r1
 80020cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020da:	6999      	ldr	r1, [r3, #24]
 80020dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	ea40 0301 	orr.w	r3, r0, r1
 80020e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4bc5      	ldr	r3, [pc, #788]	; (8002400 <UART_SetConfig+0x384>)
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d004      	beq.n	80020fa <UART_SetConfig+0x7e>
 80020f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4bc3      	ldr	r3, [pc, #780]	; (8002404 <UART_SetConfig+0x388>)
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d103      	bne.n	8002102 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020fa:	f7ff f98f 	bl	800141c <HAL_RCC_GetPCLK2Freq>
 80020fe:	6778      	str	r0, [r7, #116]	; 0x74
 8002100:	e002      	b.n	8002108 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002102:	f7ff f977 	bl	80013f4 <HAL_RCC_GetPCLK1Freq>
 8002106:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002110:	f040 80b6 	bne.w	8002280 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002116:	461c      	mov	r4, r3
 8002118:	f04f 0500 	mov.w	r5, #0
 800211c:	4622      	mov	r2, r4
 800211e:	462b      	mov	r3, r5
 8002120:	1891      	adds	r1, r2, r2
 8002122:	6439      	str	r1, [r7, #64]	; 0x40
 8002124:	415b      	adcs	r3, r3
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
 8002128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800212c:	1912      	adds	r2, r2, r4
 800212e:	eb45 0303 	adc.w	r3, r5, r3
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	00d9      	lsls	r1, r3, #3
 800213c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002140:	00d0      	lsls	r0, r2, #3
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	1911      	adds	r1, r2, r4
 8002148:	6639      	str	r1, [r7, #96]	; 0x60
 800214a:	416b      	adcs	r3, r5
 800214c:	667b      	str	r3, [r7, #100]	; 0x64
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	1891      	adds	r1, r2, r2
 800215a:	63b9      	str	r1, [r7, #56]	; 0x38
 800215c:	415b      	adcs	r3, r3
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002164:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002168:	f7fe f84c 	bl	8000204 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4ba5      	ldr	r3, [pc, #660]	; (8002408 <UART_SetConfig+0x38c>)
 8002172:	fba3 2302 	umull	r2, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	011e      	lsls	r6, r3, #4
 800217a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217c:	461c      	mov	r4, r3
 800217e:	f04f 0500 	mov.w	r5, #0
 8002182:	4622      	mov	r2, r4
 8002184:	462b      	mov	r3, r5
 8002186:	1891      	adds	r1, r2, r2
 8002188:	6339      	str	r1, [r7, #48]	; 0x30
 800218a:	415b      	adcs	r3, r3
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
 800218e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002192:	1912      	adds	r2, r2, r4
 8002194:	eb45 0303 	adc.w	r3, r5, r3
 8002198:	f04f 0000 	mov.w	r0, #0
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	00d9      	lsls	r1, r3, #3
 80021a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a6:	00d0      	lsls	r0, r2, #3
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	1911      	adds	r1, r2, r4
 80021ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80021b0:	416b      	adcs	r3, r5
 80021b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	1891      	adds	r1, r2, r2
 80021c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80021c2:	415b      	adcs	r3, r3
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021ce:	f7fe f819 	bl	8000204 <__aeabi_uldivmod>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <UART_SetConfig+0x38c>)
 80021d8:	fba3 1302 	umull	r1, r3, r3, r2
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	2164      	movs	r1, #100	; 0x64
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	3332      	adds	r3, #50	; 0x32
 80021ea:	4a87      	ldr	r2, [pc, #540]	; (8002408 <UART_SetConfig+0x38c>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f8:	441e      	add	r6, r3
 80021fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fc:	4618      	mov	r0, r3
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	1894      	adds	r4, r2, r2
 8002208:	623c      	str	r4, [r7, #32]
 800220a:	415b      	adcs	r3, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002212:	1812      	adds	r2, r2, r0
 8002214:	eb41 0303 	adc.w	r3, r1, r3
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	f04f 0500 	mov.w	r5, #0
 8002220:	00dd      	lsls	r5, r3, #3
 8002222:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002226:	00d4      	lsls	r4, r2, #3
 8002228:	4622      	mov	r2, r4
 800222a:	462b      	mov	r3, r5
 800222c:	1814      	adds	r4, r2, r0
 800222e:	653c      	str	r4, [r7, #80]	; 0x50
 8002230:	414b      	adcs	r3, r1
 8002232:	657b      	str	r3, [r7, #84]	; 0x54
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	461a      	mov	r2, r3
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	1891      	adds	r1, r2, r2
 8002240:	61b9      	str	r1, [r7, #24]
 8002242:	415b      	adcs	r3, r3
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800224e:	f7fd ffd9 	bl	8000204 <__aeabi_uldivmod>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <UART_SetConfig+0x38c>)
 8002258:	fba3 1302 	umull	r1, r3, r3, r2
 800225c:	095b      	lsrs	r3, r3, #5
 800225e:	2164      	movs	r1, #100	; 0x64
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	3332      	adds	r3, #50	; 0x32
 800226a:	4a67      	ldr	r2, [pc, #412]	; (8002408 <UART_SetConfig+0x38c>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	f003 0207 	and.w	r2, r3, #7
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4432      	add	r2, r6
 800227c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800227e:	e0b9      	b.n	80023f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002282:	461c      	mov	r4, r3
 8002284:	f04f 0500 	mov.w	r5, #0
 8002288:	4622      	mov	r2, r4
 800228a:	462b      	mov	r3, r5
 800228c:	1891      	adds	r1, r2, r2
 800228e:	6139      	str	r1, [r7, #16]
 8002290:	415b      	adcs	r3, r3
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002298:	1912      	adds	r2, r2, r4
 800229a:	eb45 0303 	adc.w	r3, r5, r3
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	00d9      	lsls	r1, r3, #3
 80022a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ac:	00d0      	lsls	r0, r2, #3
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	eb12 0804 	adds.w	r8, r2, r4
 80022b6:	eb43 0905 	adc.w	r9, r3, r5
 80022ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f04f 0100 	mov.w	r1, #0
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	008b      	lsls	r3, r1, #2
 80022ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022d2:	0082      	lsls	r2, r0, #2
 80022d4:	4640      	mov	r0, r8
 80022d6:	4649      	mov	r1, r9
 80022d8:	f7fd ff94 	bl	8000204 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <UART_SetConfig+0x38c>)
 80022e2:	fba3 2302 	umull	r2, r3, r3, r2
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	011e      	lsls	r6, r3, #4
 80022ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ec:	4618      	mov	r0, r3
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	1894      	adds	r4, r2, r2
 80022f8:	60bc      	str	r4, [r7, #8]
 80022fa:	415b      	adcs	r3, r3
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002302:	1812      	adds	r2, r2, r0
 8002304:	eb41 0303 	adc.w	r3, r1, r3
 8002308:	f04f 0400 	mov.w	r4, #0
 800230c:	f04f 0500 	mov.w	r5, #0
 8002310:	00dd      	lsls	r5, r3, #3
 8002312:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002316:	00d4      	lsls	r4, r2, #3
 8002318:	4622      	mov	r2, r4
 800231a:	462b      	mov	r3, r5
 800231c:	1814      	adds	r4, r2, r0
 800231e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002320:	414b      	adcs	r3, r1
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	008b      	lsls	r3, r1, #2
 8002338:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800233c:	0082      	lsls	r2, r0, #2
 800233e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002342:	f7fd ff5f 	bl	8000204 <__aeabi_uldivmod>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <UART_SetConfig+0x38c>)
 800234c:	fba3 1302 	umull	r1, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2164      	movs	r1, #100	; 0x64
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	3332      	adds	r3, #50	; 0x32
 800235e:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <UART_SetConfig+0x38c>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	441e      	add	r6, r3
 800236c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236e:	4618      	mov	r0, r3
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	1894      	adds	r4, r2, r2
 800237a:	603c      	str	r4, [r7, #0]
 800237c:	415b      	adcs	r3, r3
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002384:	1812      	adds	r2, r2, r0
 8002386:	eb41 0303 	adc.w	r3, r1, r3
 800238a:	f04f 0400 	mov.w	r4, #0
 800238e:	f04f 0500 	mov.w	r5, #0
 8002392:	00dd      	lsls	r5, r3, #3
 8002394:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002398:	00d4      	lsls	r4, r2, #3
 800239a:	4622      	mov	r2, r4
 800239c:	462b      	mov	r3, r5
 800239e:	eb12 0a00 	adds.w	sl, r2, r0
 80023a2:	eb43 0b01 	adc.w	fp, r3, r1
 80023a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	008b      	lsls	r3, r1, #2
 80023ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023be:	0082      	lsls	r2, r0, #2
 80023c0:	4650      	mov	r0, sl
 80023c2:	4659      	mov	r1, fp
 80023c4:	f7fd ff1e 	bl	8000204 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <UART_SetConfig+0x38c>)
 80023ce:	fba3 1302 	umull	r1, r3, r3, r2
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2164      	movs	r1, #100	; 0x64
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	3332      	adds	r3, #50	; 0x32
 80023e0:	4a09      	ldr	r2, [pc, #36]	; (8002408 <UART_SetConfig+0x38c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4432      	add	r2, r6
 80023f2:	609a      	str	r2, [r3, #8]
}
 80023f4:	bf00      	nop
 80023f6:	377c      	adds	r7, #124	; 0x7c
 80023f8:	46bd      	mov	sp, r7
 80023fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023fe:	bf00      	nop
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	51eb851f 	.word	0x51eb851f

0800240c <atoi>:
 800240c:	220a      	movs	r2, #10
 800240e:	2100      	movs	r1, #0
 8002410:	f000 b8b6 	b.w	8002580 <strtol>

08002414 <__errno>:
 8002414:	4b01      	ldr	r3, [pc, #4]	; (800241c <__errno+0x8>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000000c 	.word	0x2000000c

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4d0d      	ldr	r5, [pc, #52]	; (8002458 <__libc_init_array+0x38>)
 8002424:	4c0d      	ldr	r4, [pc, #52]	; (800245c <__libc_init_array+0x3c>)
 8002426:	1b64      	subs	r4, r4, r5
 8002428:	10a4      	asrs	r4, r4, #2
 800242a:	2600      	movs	r6, #0
 800242c:	42a6      	cmp	r6, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	4d0b      	ldr	r5, [pc, #44]	; (8002460 <__libc_init_array+0x40>)
 8002432:	4c0c      	ldr	r4, [pc, #48]	; (8002464 <__libc_init_array+0x44>)
 8002434:	f000 f8ae 	bl	8002594 <_init>
 8002438:	1b64      	subs	r4, r4, r5
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	2600      	movs	r6, #0
 800243e:	42a6      	cmp	r6, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f855 3b04 	ldr.w	r3, [r5], #4
 8002448:	4798      	blx	r3
 800244a:	3601      	adds	r6, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002452:	4798      	blx	r3
 8002454:	3601      	adds	r6, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	080026d0 	.word	0x080026d0
 800245c:	080026d0 	.word	0x080026d0
 8002460:	080026d0 	.word	0x080026d0
 8002464:	080026d4 	.word	0x080026d4

08002468 <memset>:
 8002468:	4402      	add	r2, r0
 800246a:	4603      	mov	r3, r0
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <memset+0xa>
 8002470:	4770      	bx	lr
 8002472:	f803 1b01 	strb.w	r1, [r3], #1
 8002476:	e7f9      	b.n	800246c <memset+0x4>

08002478 <_strtol_l.isra.0>:
 8002478:	2b01      	cmp	r3, #1
 800247a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800247e:	d001      	beq.n	8002484 <_strtol_l.isra.0+0xc>
 8002480:	2b24      	cmp	r3, #36	; 0x24
 8002482:	d906      	bls.n	8002492 <_strtol_l.isra.0+0x1a>
 8002484:	f7ff ffc6 	bl	8002414 <__errno>
 8002488:	2316      	movs	r3, #22
 800248a:	6003      	str	r3, [r0, #0]
 800248c:	2000      	movs	r0, #0
 800248e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002492:	4f3a      	ldr	r7, [pc, #232]	; (800257c <_strtol_l.isra.0+0x104>)
 8002494:	468e      	mov	lr, r1
 8002496:	4676      	mov	r6, lr
 8002498:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800249c:	5de5      	ldrb	r5, [r4, r7]
 800249e:	f015 0508 	ands.w	r5, r5, #8
 80024a2:	d1f8      	bne.n	8002496 <_strtol_l.isra.0+0x1e>
 80024a4:	2c2d      	cmp	r4, #45	; 0x2d
 80024a6:	d134      	bne.n	8002512 <_strtol_l.isra.0+0x9a>
 80024a8:	f89e 4000 	ldrb.w	r4, [lr]
 80024ac:	f04f 0801 	mov.w	r8, #1
 80024b0:	f106 0e02 	add.w	lr, r6, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05c      	beq.n	8002572 <_strtol_l.isra.0+0xfa>
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d10c      	bne.n	80024d6 <_strtol_l.isra.0+0x5e>
 80024bc:	2c30      	cmp	r4, #48	; 0x30
 80024be:	d10a      	bne.n	80024d6 <_strtol_l.isra.0+0x5e>
 80024c0:	f89e 4000 	ldrb.w	r4, [lr]
 80024c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80024c8:	2c58      	cmp	r4, #88	; 0x58
 80024ca:	d14d      	bne.n	8002568 <_strtol_l.isra.0+0xf0>
 80024cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80024d0:	2310      	movs	r3, #16
 80024d2:	f10e 0e02 	add.w	lr, lr, #2
 80024d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80024da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80024de:	2600      	movs	r6, #0
 80024e0:	fbbc f9f3 	udiv	r9, ip, r3
 80024e4:	4635      	mov	r5, r6
 80024e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80024ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80024ee:	2f09      	cmp	r7, #9
 80024f0:	d818      	bhi.n	8002524 <_strtol_l.isra.0+0xac>
 80024f2:	463c      	mov	r4, r7
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	dd24      	ble.n	8002542 <_strtol_l.isra.0+0xca>
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	db1f      	blt.n	800253c <_strtol_l.isra.0+0xc4>
 80024fc:	45a9      	cmp	r9, r5
 80024fe:	d31d      	bcc.n	800253c <_strtol_l.isra.0+0xc4>
 8002500:	d101      	bne.n	8002506 <_strtol_l.isra.0+0x8e>
 8002502:	45a2      	cmp	sl, r4
 8002504:	db1a      	blt.n	800253c <_strtol_l.isra.0+0xc4>
 8002506:	fb05 4503 	mla	r5, r5, r3, r4
 800250a:	2601      	movs	r6, #1
 800250c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002510:	e7eb      	b.n	80024ea <_strtol_l.isra.0+0x72>
 8002512:	2c2b      	cmp	r4, #43	; 0x2b
 8002514:	bf08      	it	eq
 8002516:	f89e 4000 	ldrbeq.w	r4, [lr]
 800251a:	46a8      	mov	r8, r5
 800251c:	bf08      	it	eq
 800251e:	f106 0e02 	addeq.w	lr, r6, #2
 8002522:	e7c7      	b.n	80024b4 <_strtol_l.isra.0+0x3c>
 8002524:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002528:	2f19      	cmp	r7, #25
 800252a:	d801      	bhi.n	8002530 <_strtol_l.isra.0+0xb8>
 800252c:	3c37      	subs	r4, #55	; 0x37
 800252e:	e7e1      	b.n	80024f4 <_strtol_l.isra.0+0x7c>
 8002530:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002534:	2f19      	cmp	r7, #25
 8002536:	d804      	bhi.n	8002542 <_strtol_l.isra.0+0xca>
 8002538:	3c57      	subs	r4, #87	; 0x57
 800253a:	e7db      	b.n	80024f4 <_strtol_l.isra.0+0x7c>
 800253c:	f04f 36ff 	mov.w	r6, #4294967295
 8002540:	e7e4      	b.n	800250c <_strtol_l.isra.0+0x94>
 8002542:	2e00      	cmp	r6, #0
 8002544:	da05      	bge.n	8002552 <_strtol_l.isra.0+0xda>
 8002546:	2322      	movs	r3, #34	; 0x22
 8002548:	6003      	str	r3, [r0, #0]
 800254a:	4665      	mov	r5, ip
 800254c:	b942      	cbnz	r2, 8002560 <_strtol_l.isra.0+0xe8>
 800254e:	4628      	mov	r0, r5
 8002550:	e79d      	b.n	800248e <_strtol_l.isra.0+0x16>
 8002552:	f1b8 0f00 	cmp.w	r8, #0
 8002556:	d000      	beq.n	800255a <_strtol_l.isra.0+0xe2>
 8002558:	426d      	negs	r5, r5
 800255a:	2a00      	cmp	r2, #0
 800255c:	d0f7      	beq.n	800254e <_strtol_l.isra.0+0xd6>
 800255e:	b10e      	cbz	r6, 8002564 <_strtol_l.isra.0+0xec>
 8002560:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	e7f2      	b.n	800254e <_strtol_l.isra.0+0xd6>
 8002568:	2430      	movs	r4, #48	; 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1b3      	bne.n	80024d6 <_strtol_l.isra.0+0x5e>
 800256e:	2308      	movs	r3, #8
 8002570:	e7b1      	b.n	80024d6 <_strtol_l.isra.0+0x5e>
 8002572:	2c30      	cmp	r4, #48	; 0x30
 8002574:	d0a4      	beq.n	80024c0 <_strtol_l.isra.0+0x48>
 8002576:	230a      	movs	r3, #10
 8002578:	e7ad      	b.n	80024d6 <_strtol_l.isra.0+0x5e>
 800257a:	bf00      	nop
 800257c:	080025c5 	.word	0x080025c5

08002580 <strtol>:
 8002580:	4613      	mov	r3, r2
 8002582:	460a      	mov	r2, r1
 8002584:	4601      	mov	r1, r0
 8002586:	4802      	ldr	r0, [pc, #8]	; (8002590 <strtol+0x10>)
 8002588:	6800      	ldr	r0, [r0, #0]
 800258a:	f7ff bf75 	b.w	8002478 <_strtol_l.isra.0>
 800258e:	bf00      	nop
 8002590:	2000000c 	.word	0x2000000c

08002594 <_init>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr

080025a0 <_fini>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr
